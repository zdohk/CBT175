++ USERMOD (NAPJ005) .
++ VER (Z038) FMID(HJE2221).
++JCLIN.
//STEP1    EXEC PGM=IEV90
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR
//SYSIN  DD  SYS1.JES2SRC(J2XIT06),DISP=SHR
//STEP2    EXEC PGM=IEWL,PARM='RENT'
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR
//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR
//SYSLIN  DD  *
  INCLUDE SYSPUNCH(J2XIT06)
  NAME J2XIT06(R)
++SRC (J2XIT06) DISTLIB(JES2SRC).
*          DATA SET J2XIT06    AT LEVEL 047 AS OF 07/07/89
EXIT     TITLE 'PHILIPS LIGHTING (SHARE CD WEJ)  LOCAL HASP EXIT 6, CON*00001
               VERTER JCL VALIDATION'                                   00002
         SPACE 5                                                        00003
         COPY  $HASPGBL                                                 00004
J2XIT06  $MODULE TITLE='PHILIPS LIGHTING (WEJ) HASP EXIT ROUTINES',    X00005
               CVT,                GENERATE OS CVT DSECT               X00006
               DEB,                GENERATE OS DEB DSECT               X00007
               KEYS,               GENERATE OS KEYS DSECT              X00008
               NEL,                GENERATE OS NEL DSECT               X00009
               PSA,                GENERATE OS PSA DSECT               X00010
               RESPA,              GENERATE JES FSI RESPA DSECT        X00011
               RPL,                GENERATE OS RPL DSECT               X00012
               SDWA,               GENERATE OS SDWA DSECT              X00013
               TEXT,               GENERATE OS TEXT DSECT              X00014
               WPL,                GENERATE OS WPL DSECT               X00015
               $BUFFER,            GENERATE HASP BUFFER DSECT          X00016
               $CAT,               GENERATE HASP CAT DSECT             X00017
               $CMB,               GENERATE HASP CMB DSECT             X00018
               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X00019
               $COMWORK,           GENERATE HASP COMWORK DSECT         X00020
               $DCT,               GENERATE HASP DCT DSECT             X00021
               $DTE,               GENERATE HASP DTE DSECT          WEJ*00022
               $DTECNV,            GENERATE HASP DTECNV DSECT       WEJ*00023
               $ERA,               GENERATE HASP ERA DSECT          WEJ*00024
               $HASPEQU,           GENERATE HASP EQUATES               X00025
               $HCT,               GENERATE HASP HCT DSECT             X00026
               $IOT,               GENERATE HASP IOT DSECT             X00027
               $JCT,               GENERATE HASP JCT DSECT             X00028
               $JOE,               GENERATE HASP JOE DSECT             X00029
               $JOT,               GENERATE HASP JOT DSECT             X00030
               $JQE,               GENERATE HASP JQE DSECT             X00031
               $LRC,               GENERATE HASP LRC DSECT             X00032
               $MIT,               GENERATE HASP MIT DSECT             X00033
               $NHD,               GENERATE HASP NJE HEADER DSECTS     *00034*47
               $PADDR,             GENERATE HASP PADDR DSECT           X00035**6
               $PCE,               GENERATE HASP PCE DSECT             X00036**6
               $PDDB,              GENERATE HASP PDDB DSECT            X00037
               $PPPWORK,           GENERATE PPU WORK DSECT             X00038
               $RDRWORK,           GENERATE RDR WORK DSECT             X00039
               $RAT,               GENERATE RAT WORK DSECT             X00040
               $TAB,               GENERATE TAB WORK DSECT             X00041
               $TRP,               GENERATE TRP WORK DSECT          WEJ*00042
               $TQE,               GENERATE HASP TQE DSECT          WEJ*00043
               $XECB               GENERATE HASP XECB DSECT         WEJ 00044
         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'                         00045
*********************************************************************** 00046
*                                                                     * 00047
*        ENVIRONMENT   MVS SP 1.3.5  LEVEL 8804                    WEJ* 00048
*                      JES2 FOR SP 1.3.6                              * 00049
*                                                                     * 00050
*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER       * 00051
*        TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE  * 00052
*        THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.       * 00053
*                                                                     * 00054
*        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES       * 00055
*        WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND         * 00056
*        FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN     * 00057
*        CODE TO THE JES2 CONVERTER SUB-TASK.                         * 00058
*                                                                     * 00059
*        THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS            * 00060
*        PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT        * 00061
*        TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE       * 00062
*        EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE       * 00063
*        COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING       * 00064
*        JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE       * 00065
*        PCE WORK AREA AND CAN BE USED TO ISSUE ERROR MESSAGES        * 00066
*        TO THE JOB MESSAGE PORTION OF THE LISTING.                   * 00067
*                                                                     * 00068
*        ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO        * 00069
*        SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,       * 00070
*        BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,         * 00071
*        50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL      * 00072
*        NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED      * 00073
*        THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY       * 00074
*        THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT        * 00075
*        THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL ERRORS OF       * 00076
*        THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL  * 00077
*        ERROR AND SET THE JOB TO CLASS=A.  THE ESTAE ROUTINE,        * 00078
*        WHEN ENTERED FOR AN ABEND, WILL ALSO SET THE CLASS TO        * 00079
*        'A' AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM       * 00080
*        ABEND AND CONSEQUENT LOSS OF THE JOB.  THIS IS DONE BY       * 00081
*        THE SEVERE ERROR RECOVERY ROUTINE TURNING OFF THE EXIT 6     * 00082
*        BIT IN THE EXIT MASK FOR THE JOB.                            * 00083
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - WEJ * 00084
*                                                                 WEJ * 00085
*       CHANGES AT PHILIPS LIGHTING                               WEJ * 00086
* 1. UPDATE USINGS FOR JES CTL BLOCKS TO JES2 1.3.6 NAMES.        WEJ * 00087
* 2. ADD CONTROL BLOCKS $DTE AND $DTECNV TO PICK UP PSUEDO ACB    WEJ * 00088
*    FOR JESMSG                                                   WEJ * 00089
* 3. CHANGE ACCOUNT CODE CHECKING TO AGREE WITH LIGHTING          WEJ * 00090
*    CONVENTIONS.                                                 WEJ * 00091
* 4. GENERATE SMF248 RECORD FOR PROCLIB USAGE                     WEJ * 00092
* 5. THE CHECK FOR MOUNTABLE DASD DEVICES IS ELIMINATED.          WEJ * 00093
*                                                                 WEJ * 00094
*********************************************************************** 00095
         SPACE 2                                                        00096
*********************************************************************** 00097
*                                                                     * 00098
*        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL        * 00099
*        OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS        * 00100
*        ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END        * 00101
*        OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES       * 00102
*        FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES               * 00103
*        FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT             * 00104
*        HAS NOT BEEN DETERMINED AT THE END OF PROCESSING             * 00105
*        FOR A DD STATEMENT, THE CATALOG IS SEARCHED.                 * 00106*39
*        CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES     * 00107
*        PER STEP, WHETHER OR NOT TCAM QUEUES ARE USED, THE PRIVELEGE * 00108*39
*        OF THE SUBMITTER AND THE TIME PARAMETER IN THE JOB CARD.     * 00109*39
*                                                                     * 00110
*        THE JOB CLASSES ARE: A - PRODUCTION JOB WITH TAPE            * 00111*39
*                             B - PRODUCTION OR TEST JOB TAKING MORE  * 00112*39
*                                 THAN 29 SECONDS                     * 00113*39
*                             C - CICS RELATED JOB                    * 00114*39
*                             D - DATA BASE RELATED JOB               * 00115*39
*                             F - PRODUCTION OR TEST JOB TAKING LESS  * 00116*39
*                                 THAN 30 SECONDS, NO TAPE            * 00117*39
*                             H - TEST JOB 2-N TAPES                  * 00118*39
*                             I - TEST JOB WITH 1 TAPE                * 00119*39
*                             J - TCAM JOB WITH 0-N TAPES, QNAME=PH/PQ* 00120*39
*                             L - TCAM JOB WITH 0-N TAPES,            * 00121*39
*                                 QNAME=ADMINMSG                      * 00122*39
*                             N - CLASS FOR ACCESS JOBS SUBMITTED BY  * 00123*39
*                             Q - UNKNOWN                             * 00124*39
*                             S - SINGLE STREAM JOB SUBMISSION        * 00125*39
*                             U - TECH SERVICES JOB 2-N TAPES         * 00126*39
*                             V - TECH SERVICES JOB 1 TAPE            * 00127*39
*                             W - TECH SERVICES JOB, NO TAPE          * 00128*39
*                             X - TECH SERVICES JOB, SINGLE STREAM    * 00129*39
*                             Z - DEDICATED SYSTEM BACKUPS            * 00130*39
*                                                                     * 00131*39
*        WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL    * 00132
*        VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO       * 00133
*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        * 00134
*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         * 00135
*        DETERMINE THE ADDRESS OF THE ABEND.                          * 00136
*                                                                     * 00137
*                                                                     * 00138
*        WRITTEN BY:                                                  * 00139
*                        JOHN V. HOOPER                               * 00140
*                        NORTHWESTERN BANK                            * 00141
*                        P.O. BOX 310                                 * 00142
*                        NORTH WILKESBORO, N.C. 28674                 * 00143
*                                                                     * 00144
*        UPDATED BY:                                                  * 00145
*                        GLENN HARPER                                 * 00146
*                        A.N.R. PRODUCTION COMPANY                    * 00147
*                        5075 WESTHEIMER                              * 00148
*                        HOUSTON, TEXAS  77056                        * 00149
*                                                                 WEJ * 00150
*                        CLARK MORRIS, DEPT. 5069                 WEJ * 00151
*                        PHILIPS LIGHTING COMPANY                 WEJ * 00152
*                        PHILIPS SQUARE, CN6800                   WEJ * 00153
*                        SOMERSET, NJ 08875-6800                  WEJ * 00154
*                        UNITED STATES OF AMERICA                 WEJ * 00155
*                        201-563-3575                             WEJ * 00156
*                                                                     * 00157
*********************************************************************** 00158
         SPACE                                                          00159
*********************************************************************** 00160
*                                                                     * 00161
*        SET CONDITIONAL ASSEMBLY VARIABLES, AMODE, RMODE             * 00162
*                                                                     * 00163
*********************************************************************** 00164
J2XIT06  AMODE 31                                                       00165
J2XIT06  RMODE 24                                                       00166
         LCLC &TSO                                                      00167
         LCLC &CAMLST                                                   00168
         LCLC &ERRMSG                                                   00169
         LCLC &SDUMP                                                    00170
         LCLC &FLUSH                                                    00171
         LCLC &MODIFY                                                   00172
         LCLC &UCBSEAR                                                  00173
&TSO     SETC 'NO'         ASSEMBLE FOR TSO TESTING                     00174
&CAMLST  SETC 'YES'        SEARCH CATALOG FOR DATASETS                  00175
&ERRMSG  SETC 'YES'        PRODUCE JOB FAILED BY EXIT MESSAGE           00176
&SDUMP   SETC 'YES'        PRODUCE CONSOLE DUMP FOR ABENDS              00177
&FLUSH   SETC 'YES'        FLUSH JOB FOR STANDARDS VIOLATIONS           00178
&MODIFY  SETC 'YES'        MODIFY JOB CLASS IN JCT AND JQE              00179
&UCBSEAR SETC 'NO'         SEARCH THE DASD UCBS FOR UNMOUNTED VOLUMES   00180
         EJECT                                                          00181
*********************************************************************** 00182
*                                                                     * 00183
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             * 00184
*                                                                     * 00185
*        R0       - CODE INDICATING STATUS OF CONVERSION              * 00186
*            0  INDICATES A JCL STATEMENT HAS BEEN CONVERTED          * 00187
*            4  INDICATES ALL JCL FOR A JOB HAS BEEN CONVERTED        * 00188
*        R1       - ADDRESS OF 2-WORD PARAMETER LIST                  * 00189
*           WORD 1 (+0)  ADDRESS OF A 16-BYTE WORK AREA               * 00190
*           WORD 2 (+4)  IF R0 IS 0 ADDRESS OF LAST TEXT IMAGE        * 00191
*           WORD 3 (+8)  ADDRESS OF THE DTE                        WEJ* 00192
*           WORD 4 (+12) ADDRESS OF THE JCT                        WEJ* 00193
*        R11      - ADDRESS OF THE HCT                                * 00194
*        R13      - ADDRESS OF AN OS-STYLE SAVE AREA                  * 00195
*        R14      - RETURN ADDRESS                                    * 00196
*        R15      - ENTRY ADDRESS                                     * 00197
*                                                                     * 00198
*********************************************************************** 00199
         SPACE 4                                                        00200
*********************************************************************** 00201
*                                                                     * 00202
*        REGISTER USAGE WITH THIS EXIT:                               * 00203
*                                                                     * 00204
*        R0,R1    - PARM/WORK REGISTERS                               * 00205
*        R4,R3    - WORK REGISTER FOR EACH TEXT KEY                   * 00206*19
*        R5,R2    - WORK REGISTER                                     * 00207*19
*        R6       - TEXT POINTER                                      * 00208
*        R7       - SAVETABLE POINTER                                 * 00209
*        R8       - POINTER TO DTE                                 WEJ* 00210
*        R9       - BASE REGISTER #2                                  * 00211
*        R10      - BASE REGISTER #3                                  * 00212
*        R11      - ADDRESS OF THE HCT                                * 00213
*        R12      - BASE REGISTER #1                                  * 00214
*        R13      - WORKAREA POINTER                                  * 00215
*        R14      - RETURN ADDRESS                                    * 00216
*        R15      - RETURN CONDITION CODE                             * 00217
*                                                                     * 00218
*********************************************************************** 00219
         EJECT                                                          00220
*********************************************************************** 00221
*                                                                     * 00222
*        ACTUAL JES2 EXIT ENTRY POINT                                 * 00223
*                                                                     * 00224
*********************************************************************** 00225
J2XIT06E $ENTRY  BASE=(R12,R9,R10)                                      00226
         SAVE  (14,12)        SAVE CALLERS REGISTERS                    00227
         DROP  R13                                                      00228
         USING DTE,R8         SET ADDRESSABILITY TO DTE            WEJ  00229
         L     R8,8(,R1)      LOAD THE ADDRESS OF THE CURRENT DTE  WEJ  00230
         LR    R12,R15        ESTABLISH BASE REGISTER                   00231
         LA    R10,4095       SET SECOND                                00232
         LA    R9,1(R12,R10)      BASE REGISTER                         00233
         LA    R10,1(R10,R9)  SET THIRD BASE REGISTER                   00234
         LR    R5,R0          SAVE REG 0                                00235*19
         LR    R4,R1          SAVE ADDRESS OF PARAMETER POINTER     WEJ 00236*19
         L     R6,0(,R4)      POINT TO EXIT WORK AREA               WEJ 00237*19
         USING EXITWORK,R6                                          WEJ 00238
         ICM   R1,B'1111',EXWKPTR1  GET WORK AREA POINTER           WEJ 00239
         BZ    GETMAIN        NO, GO DO REQUIRED GETMAINS               00240
         ST    R13,4(R1)      SAVE OLD SAVE ADDR IN NEW                 00241
         ST    R1,8(R13)      SAVE NEW SAVE ADDR IN OLD                 00242
         LR    R13,R1         SAVE NEW SAVE AND WORKAREA ADDRESS        00243
         USING WORKAREA,R13   SET ADDRESSABILITY                        00244
         L     R7,SUBTABLE    RESTORE SUB TABLE AREA                    00245
         USING SAVTABLE,R7    SET ADDRESSABILITY                        00246
         B     ENDGETM        BYPASS GETMAINS                           00247
         SPACE 4                                                        00248
*********************************************************************** 00249
*                                                                     * 00250
*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        * 00251
*        THE JOB                                                      * 00252
*                                                                     * 00253
*********************************************************************** 00254
GETMAIN  DS    0H                                                       00255
         LH    R0,GETLEN      LOAD GETMAIN SIZE                         00256
         GETMAIN R,LV=(0)     GET CORE FOR DYNAMIC SAVE AREA            00257
         LR    R3,R1          SAVE GETMAINED ADDRESS                    00258
         LR    R0,R1          CLEAR                                     00259
         LH    R1,GETLEN          ENTIRE                                00260
         SLR   R15,R15                GETMAINED                         00261
         MVCL  R0,R14                     TO ZEROS                      00262
         ST    R13,4(R3)      SAVE OLD SAVE ADDR IN NEW                 00263
         ST    R3,8(R13)      SAVE NEW SAVE ADDR IN OLD                 00264
         LR    R13,R3         SAVE NEW SAVE AND WORKAREA ADDRESS        00265
         ST    R13,EXWKPTR1   SAVE GETMAINED ADDRESS                    00266
         L     R0,F#8192      LOAD GETMAIN SIZE                         00267
*                             GET CORE FOR JCL TABLE                    00268
         GETMAIN RU,LV=(0),BNDRY=PAGE                                   00269
         LR    R7,R1          SAVE GETMAIN ADDRESS                      00270
         ST    R7,SUBTABLE    STORE ADDR OF SUB TABLE AREA              00271
         LR    R0,R7          CLEAR                                     00272
         L     R1,F#8192          ENTIRE                                00273
         SLR   R15,R15                GETMAINED                         00274
         MVCL  R0,R14                     TO ZEROS                      00275
         LA    R15,MSGRPL     LOAD OUTPUT RPL ADDRESS                   00276
         ST    R15,OUTRPL     SAVE OUTPUT RPL ADDRESS                   00277
         LA    R15,DCNVMSG    OBTAIN JESMSG OUTPUT ACB ADDRESS      WEJ 00278
         ST    R15,OUTACB     SAVE OUTPUT ACB ADDRESS                   00279
ENDGETM  DS    0H                                                       00280
         L     R1,12(,R4)     LOAD ADDRESS OF JCT                   WEJ 00281*19
         ST    R1,JCTADDR     SAVE JCT ADDRESS                      WEJ 00282
         EJECT                                                          00283
*********************************************************************** 00284
*        ESTABLISH ESTAE ENVIRONMENT                                  * 00285
*********************************************************************** 00286
         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM         00287
         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS               00288
         AIF   ('&TSO' EQ 'YES').TSO9                                   00289
         ESTAE PARAM=(13),BRANCH=YES,SVEAREA=STAEREGS,KEY=1,           X00290
               MF=(E,ESTAEL)                                            00291
         L     R13,DCNVUWA    SAME AS EXWKPTR1                      WEJ 00292
.TSO9    ANOP                                                           00293
         DROP  R6             R6 WILL NO LONGER POINT TO WORK AREA  WEJ 00294
         LTR   R0,R5          RESTORE REG 0 AND CHECK FOR INTERNAL  WEJ 00295*19
         BNZ   EOF            GET OUT (ALL TEXT IMAGES PROCESSED)   WEJ 00296
         L     R6,4(,R4)      LOAD TEXT STARTING ADDRESS            WEJ 00297*19
         ST    R6,TEXTSTAR    SAVE TEXT STARTING ADDRESS            WEJ 00298
         USING TEXT,R6        NOTE R6 POINTS TO TEXT                WEJ 00299
         SPACE 4                                                        00300
*********************************************************************** 00301
*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON BITS  * 00302
*        IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN THE       * 00303
*        CONVERTER COMPLETES.  THESE BITS WILL BE TESTED, AND IF      * 00304
*        THE JOB IS TO BE FAILED, ALL WORK AREAS WILL BE FREEMAINED   * 00305
*        AND CONTROL RETURNED TO JES2.                                * 00306
*********************************************************************** 00307
         L     R14,JCTADDR    LOAD JCT ADDRESS                          00308
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 00309
         LA    R15,JCTCJCL    SET JCL ERROR IN CONVERTER RETURN CODE    00310
         C     R15,JCTCNVRC   TEST CONVERTER RETURN CODE                00311
         BNE   RECORD1        NO, OK, BRANCH                            00312
         LA    R15,4          TELL JES2 TO QUIT THIS EXIT               00313
         ST    R15,RETCODE    AND SAVE THE RETURN CODE                  00314
         B     ENDOFIT        CONVERTER HAS ALREADY FAILED JOB          00315
         DROP  R14            DROP ADDRESSABILITY TO JCT                00316
         SPACE 4                                                        00317
*********************************************************************** 00318
*        WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST       * 00319
*        STATEMENT FOR THE STEP.  IF THE STATEMENT IS A DD STATEMENT  * 00320
*        AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR * 00321
*        WILL REFLECT LAST STATEMENT OF THE STEP.  IF, HOWEVER, THE   * 00322
*        CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD      * 00323
*        STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO     * 00324
*        CHECK FOR THIS CONDITION ALSO.                               * 00325
*********************************************************************** 00326
RECORD1  TM    STRINDCS,LASTSTMT LAST STMT FOR STEP?                    00327
         BO    RECORD3        YES, BRANCH                               00328
         TM    STRINDCS,EXECSTR EXEC STMT?                              00329
         BNO   RECORD2        NO, BRANCH                                00330
         TM    STREINDC,ETXNODD STEP HAS NO DD STMTS?                   00331
         BO    RECORD3        TRUE, ALSO LAST STMT FOR STEP             00332
*********************************************************************** 00333
*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP         * 00334
*********************************************************************** 00335
RECORD2  NI    EOFIND,X'FE'   TURN OFF LAST STMT IND                    00336
         B     RECORD4        GET OUT                                   00337
*********************************************************************** 00338
*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP             * 00339
*********************************************************************** 00340
RECORD3  OI    EOFIND,ENDSTEP TURN ON LAST STMT IND                     00341
RECORD4  TM    STRINDCS,JOBSTR JOB STATEMENT?                           00342
         BO    JOBCARD        YES, BRANCH                               00343
         TM    STRINDCS,EXECSTR EXEC STATEMENT?                         00344
         BO    EXECARD        YES, BRANCH                               00345
         TM    STRINDCS,DDSTR DD STATEMENT?                             00346
         BO    DDCARD         YES, BRANCH                               00347
         TM    STRINDCS,PROCSTR PROC STATEMENT?                         00348
         BO    PROCINST       YES, BRANCH BECAUSE PROC IN STREAM        00349
         TM    STRINDCS,JDVBSTR JDT VERB STATEMENT?                     00350
         BO    JDTCARD        YES, BRANCH                               00351
*** IF NONE OF THE ABOVE FORGET IT  WILL BE CAUGHT BY CONVERTER         00352
         B     GETNEXT        GO GET ANOTHER STATEMENT                  00353
         EJECT                                                          00354
*********************************************************************** 00355
*        THE TEXT OF THE JOBCARD IS AS FOLLOWS:                       * 00356
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 00357
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 00358
*            3)  3 BYTES OF MISCELLANEOUS INDICATORS                  * 00359
*            4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS     * 00360
*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               * 00361
*                1ST POS PARAM IS JOBNAME                             * 00362
*                2ND POS PARAM IS ACCT PARAM LIST                     * 00363
*                3RD POS PARAM IS PGMR NAME                           * 00364
*            5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD            * 00365
*            5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A             * 00366
*                1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING         * 00367
*                THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY   * 00368
*                IF MORE THAN 1 ACCT ENTRY -                          * 00369
*                THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES      * 00370
*                FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS* 00371
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 00372
*                IF ONLY 1 ACCT ENTRY -                               * 00373
*                THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY    * 00374
*                FOLLOWED BY THE ACCOUNTING ENTRY                     * 00375
*            5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD          * 00376
*            6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 00377
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 00378
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 00379
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 00380
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 00381
*                POSITIONAL PARAMETER.                                * 00382
*********************************************************************** 00383
         SPACE 6                                                        00384
JOBCARD  EQU   *                                                        00385
*********************************************************************** 00386
*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED   * 00387
*********************************************************************** 00388
JOBINIT  L     R14,JCTADDR         LOAD JCT ADDRESS                     00389
         USING JCT,R14             SET ADDRESSABILITY TO JCT        WEJ 00390
         MVI   ENTRYTYP,TYPJOB     SET TO JOB ENTRY                     00391
         MVC   JENTRY,BLANKS       BLANK ENTIRE JOB INFO                00392
         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY              00393
         ST    R7,FIRSTENT         SAVE ADDR OF FIRST ENTRY             00394
         XC    CLASSFLD,CLASSFLD   ZERO DETERMINED JOB CLASS            00395
         XC    MAXTIME,MAXTIME     CLEAR MAXIMUM CPU TIME               00396
         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK?              00397
         BNO   JOBINIT1            NO, BRANCH                           00398
         OI    JOBIND,JOBSTC       TURN ON STC INDICATOR                00399
         MVC   JCTROOMN,=C'USSM    '   FORCE ROOM NUMBER TO USSM        00400*45
         MVC   NJHGROOM-NJH+JCTNJHDR,=C'USSM    '                   WEJ 00401*45
         B     JOBINIT2            BRANCH                               00402*41
JOBINIT1 TM    JCTJOBFL,JCTTSUJB   IS THIS A TSO USER?                  00403
         BNO   CKAUTH0             NO, BRANCH                           00404**5
         OI    JOBIND,JOBTSO       TURN ON TSO INDICATOR                00405
         B     JOBINIT2            BRANCH                               00406*41
CKAUTH0  DS    0H                                                   WEJ 00407**5
         CLC   JCTINDEV,C#UCC7     IS SOURCE UCC7 STARTED TASK      WEJ 00408*36
         BNE   CKAUTH1               YES, TURN ON PROD BIT.         WEJ 00409*41
JOBISPRD DS    0H                                                   WEJ 00410*36
         OI    JOBIND,JOBPROD    TURN ON PRODUCTION JOB INDICATOR       00411**5
         B     JOBINIT2          GO TO FINISH INIT                  WEJ 00412**5
CKAUTH1  DS    0H                                                   WEJ 00413**5
         OI    JOBIND,JOBTEST    TURN ON TEST JOB INDICATOR             00414**5
         CLI   JCTINDEV+7,C'*'   IF NOT TSO SUBMIT DO NO FURTHER    WEJ 00415**5
         BNE   JOBINIT2             AUTHORITY CHECK                 WEJ 00416**5
         CLC   C#FCH,JCTINDEV    IS THIS A TECH SUPPORT TSO SUBMIT  WEJ 00417**5
         BNE   CKAUTH2               NO, CHECK FOR COMMUNICATIONS   WEJ 00418**5
         OI    JOBIND,JOBTECH    TURN ON TECH SUPPORT INDICATOR     WEJ 00419**5
         B     JOBINIT2          GO FINISH INITIALIZATION           WEJ 00420**5
CKAUTH2  DS    0H                                                       00421**5
         CLC   C#FCB,JCTINDEV    IS THIS AN OPERATIONS SUBMISSION?  WEJ 00422**5
         BNE   CKAUTH3           NO, CHECK FOR COMMUNICATIONS       WEJ 00423**5
         OI    JOBIND,JOBOPER    TURN ON OPERATIONS BIT             WEJ 00424**5
         B     JOBINIT2          FINISH INITIALIZATION              WEJ 00425**5
CKAUTH3  DS    0H                                                       00426**5
         CLC   C#FCC,JCTINDEV    IS THIS AN COMMUNICATIONS SUBMIT?  WEJ 00427**5
         BNE   JOBINIT2          NO, FINISH INITIALIZATION          WEJ 00428**5
         OI    JOBIND,JOBCOMM    TURN ON COMMUNICATIONS BIT         WEJ 00429**5
         DROP  R14                 DROP ADDRESSABILITY TO JCT           00430
*********************************************************************** 00431
*        INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY             * 00432
*********************************************************************** 00433
JOBINIT2 LA    R15,1               SET REG TO 1                         00434
         ST    R15,CARDNO          SET CARD COUNT TO 1                  00435
         XC    MSGCOUNT,MSGCOUNT   ZERO MESSAGE COUNTER                 00436
         XC    RESOURCE,RESOURCE   CLEAR JES2 RESOURCES                 00437
         MVI   INCLASS,C'A'        SET INPUT DEFAULT CLASS TO 'A'       00438
         SPACE 4                                                        00439
*********************************************************************** 00440
*        START SCAN OF JOB CARD POSITIONAL PARAMETERS                 * 00441
*            1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY         * 00442
*            2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES           * 00443
*            3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES          * 00444
*            LAST ENTRY IS ALWAYS PROGRAMMER NAME                     * 00445
*********************************************************************** 00446
JOBSTART XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD                  00447
         LA    R4,STRJKEY     LOAD START OF TRUE TEXT                   00448*19
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           00449*19
         LA    R4,1(,R4)      INCR PAST JOB POSITIONAL PARM KEYWORD     00450*19
         SLR   R15,R15        CLEAR REGISTER FOR IC                     00451
         IC    R15,0(R4)      LOAD NUMBER OF POS SUBPARAMS              00452*19
         CH    R15,H#3        SEE IF THREE (JOBNAME, ACCT, PGMRNAME)    00453
         BNL   JOBCK1         YES, BRANCH                               00454
         TM    JOBIND,JOBSTC+JOBTSO ARE ALL PARAMETERS REQUIRED?        00455
         BM    JOBCK1         NO, BRANCH                                00456
         LA    R15,P@2        SET ERROR NUMBER                          00457
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00458**7
         B     JOBLOOP        BYPASS FIELDS                             00459**5
JOBCK1   LA    R4,1(,R4)      INCR PAST NUM OF POS SUBPARAMS            00460*19
JOBNM    DS    0H                                                       00461
         SLR   R3,R3          CLEAR REG FOR ICM                         00462
         ICM   R3,1,0(R4)     LOAD JOB NAME LENGTH                      00463*19
         BZ    JOBNM2         LENGTH ZERO, DO NOT MOVE                  00464
         CH    R3,H#8         SEE IF LENGTH > 8                         00465
         BNH   JOBNM1         NO, CONTINUE                              00466
         LA    R15,P@3        SET ERROR NUMBER                          00467
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00468**7
         B     JOBLOOP        BYPASS FIELDS                             00469
JOBNM1   DS    0H                                                       00470
         BCTR  R3,0           MAKE MACHINE LENGTH                       00471
*        EX    R3,MOVE1       MOVE JOB NAME TO SAVE TABLE               00472
         LA    R3,1(,R3)      RESTORE LENGTH                            00473
JOBNM2   LA    R4,1(R3,R4)    INCREMENT PAST JOB NAME                   00474*19
         TM    JOBIND,JOBSTC+JOBTSO ARE ACCOUNTING/PGMR NAME REQUIRED?  00475
         BM    JOBLOOP        NO, BRANCH                                00476
         SPACE 4                                                        00477
JOBACT   SLR   R5,R5          CLEAR REGISTER FOR ICM                    00478*19
         ICM   R5,1,0(R4)     INSERT CONTROL BYTE                       00479*19
         BNM   JOBACT1        HIGH BIT NOT ON, ONLY 1 PARAMETER         00480
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              00481*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00482*19
         B     JOBACT2        BRANCH                                    00483
JOBACT1  LA    R5,1           SET PARAM COUNT TO 1                      00484*19
         EJECT                                                          00485
*********************************************************************** 00486
*        WE ARE CHECKING THE FIRST ACCOUNTING FIELD FOR FORMATTING    * 00487
*        ERRORS.  THE LENGTH OF THE FIRST ACCOUNTING FIELD MUST BE 7. * 00488*16
*                                                                     * 00489
*        THE FIRST ACCOUNTING FIELD IS FORMATTED AS FOLLOWS:          * 00490
*                                                                     * 00491
*        1)  2 CHARACTER GROUP CODE, CURRENTLY ASSUMED ALPHA       WEJ* 00492
*        2)  5 DIGIT BUDGET NUMBER                                 WEJ* 00493
*                                                                     * 00494
*********************************************************************** 00495
JOBACT2  DS    0H                                                       00496
         SLR   R3,R3          CLEAR REG FOR ICM                         00497
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     00498*19
         BNZ   JOBACT2A       NOT ZERO, BRANCH                          00499
         LA    R15,P@35       SET ERROR NUMBER                          00500
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00501**7
         B     JOBACT17       BYPASS ACCT NUM                           00502
*********************************************************************** 00503
*        CHECK THE LENGTH OF THE FIRST ACCOUNTING FIELD FOR 7.     WEJ* 00504
*********************************************************************** 00505
JOBACT2A DS    0H                                                       00506
         CH    R3,H#7         COMPARE LENGTH TO 7                   WEJ 00507
         BE    JOBACT3        ACCT LENGTH = 7, BRANCH               WEJ 00508
         LA    R15,P@4        SET ERROR NUMBER                          00509
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00510**7
         B     JOBACT17       BYPASS FIELD                              00511
JOBACT3  DS    0H                                                       00512**5
         STC   R3,JACCTLEN    SAVE LENGTH OF ACCT NUM                   00513**5
         BCTR  R3,0           MAKE MACHINE LENGTH                       00514**5
         EX    R3,MOVE2       MOVE ACCT NUM TO SAVE TABLE               00515
         EX    R3,MOVE16      MOVE ACCT NUM TO WORK AREA                00516
         LA    R3,1(,R3)      RESTORE R3 TO TRUE SIZE OF FIELD      WEJ 00517*17
*********************************************************************** 00518
*        CURRENTLY ALL PHILIPS LIGHTING ACCT NUMBERS START WITH    WEJ* 00519
*        'FC'.  THIS WILL PROBABLY CHANGE IN THE FUTURE AND THIS   WEJ* 00520
*        CODE CHECKS THAT THE FIRST 2 DIGITS ARE ALPHABETIC        WEJ* 00521
*                                                                  WEJ* 00522
*                     A L L    J O B S                                * 00523
*                                                                     * 00524
*        1)  THE FIRST 2 CHARACTERS MUST BE ALPHABETIC             WEJ* 00525
*        2)  THE BUDGET MUST BE 5 NUMERIC CHARACTERS               WEJ* 00526
*********************************************************************** 00527
         L     R2,=A(ALPHATBL) POINT TO ALPHA TRT TABLE             WEJ 00528**5
         TRT   1(2,R4),0(R2)      TEST 1ST 2 CHRS FOR ALPHABETIC    WEJ 00529*19
         BZ    JOBACT15                                             WEJ 00530**5
JOBACT14 LA    R15,P@40           SET ERROR NUMBER                      00531
         BAL   R14,MSGRTN         GO ISSUE ERROR MSG                    00532**7
JOBACT15 DS    0H                                                       00533
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRT TABLE           WEJ 00534*16
         TRT   3(5,R4),0(R2)     TEST CHRS 3-7 FOR NUMERIC          WEJ 00535*19
         BZ    JOBACT18                                             WEJ 00536**5
JOBACT17 LA    R15,P@41           SET ERROR NUMBER                      00537
         BAL   R14,MSGRTN         GO ISSUE ERROR MSG                    00538**7
JOBACT18 LA    R4,1(R3,R4)        INCREMENT PAST PARM                   00539*19
         SLR   R3,R3              CLEAR REGISTER 3                      00540
         IC    R3,0(,R4)          LOAD LENGTH OF NEXT PARM              00541*19
         BCT   R5,JOBACT18        LOOP UNTIL ALL ACCT FIELDS DONE       00542*19
         SPACE 4                                                        00543
*********************************************************************** 00544
*        SAVE THE PROGRAMMER NAME                                     * 00545
*********************************************************************** 00546
JOBPGMR  DS    0H                                                       00547
         SLR   R3,R3          CLEAR REG 3                               00548
         ICM   R3,1,0(R4)     LOAD PGMR NAME LENGTH                     00549*19
         BZ    PGMREND        ZERO LENGTH, MISSING PARAM                00550
         CH    R3,H#20        SEE IF LENGTH > 20                        00551
         BNH   JOBPGMR1       NO, CONTINUE                              00552
         LA    R15,P@5        SET ERROR NUMBER                          00553
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00554**7
         B     JOBLOOP        BYPASS FIELDS                             00555
JOBPGMR1 DS    0H                                                       00556
         CH    R3,H#9         SEE IF LENGTH > 9                         00557
         BNH   PGMR10         IF NOT > 9 , OK                           00558
         LH    R3,H#9         MAKE LENGTH = 10                          00559
PGMR10   BCTR  R3,0           MAKE MACHINE LENGTH                       00560
         EX    R3,MOVE3       MOVE PGMR NAME TO SAVE TABLE              00561
         ICM   R3,1,0(R4)     RELOAD PGMR NAME LENGTH                   00562*19
         EJECT                                                          00563
*********************************************************************** 00564
*        IF THE JOB IS SUBMITTED FROM UCC7 IT IS CONSIDERED A      WEJ* 00565
*        PRODUCTION JOB (EXIT 2 IS USED TO SET JCTINDEV TO THE     WEJ* 00566
*        NAME OF THE OWNER OF AN INTERNAL READER SO IF UCC7        WEJ* 00567
*        SUBMITS THE JOB THE FULL 8 CHARACTERS WILL BE UCC7        WEJ* 00568
*        FOLLOWED BY 4 SPACES.  IF UCC7 IS NOT A STARTED TASK,     WEJ* 00569
*        THE "J" OR "T" FOR JOB OR TSO-ID WILL BE IN POSITION OF   WEJ* 00570
*        JCTINDEV.  CERTAIN TSO ID'S WILL BE RECOGNIZED AS         WEJ* 00571
*        PRIVILEGED AND TREATED ACCORDINGLY                        WEJ* 00572
*            A)  FCBXXX - OPERATIONS SUBMISSIONS                      * 00573
*            B)  FCCXXX - COMMUNICATIONS SUBMISSIONS                  * 00574
*            B)  FCHXXX - TECH SERVICES SUBMISSIONS                   * 00575
*                                                                     * 00576
*********************************************************************** 00577
PGMREND  DS    0H                CHECK AUTHORITY                    WEJ 00578
         B     JOBLOOP           LOOP BACK                          WEJ 00579
         SPACE 2                                                        00580
*********************************************************************** 00581
*        JOB CLASS                                                    * 00582
*********************************************************************** 00583
JCLASS   CLI   0(R4),CLASSJK  SEE IF CLASS=KEY                          00584*19
         BNE   JPERF          NO, BRANCH                                00585
         MVC   INCLASS,3(R4)  SAVE INPUT CLASS                          00586*19
         B     JOBLOOP        GO GET NEXT PARAM                         00587
         SPACE 2                                                        00588
*********************************************************************** 00589
*        JOB PERFORM                                                  * 00590
*********************************************************************** 00591
JPERF    CLI   0(R4),PRFMJK   SEE IF PERFORM= KEY                       00592*19
         BNE   JADDR          NO, BRANCH                                00593
         B     JOBLOOP        PERFORM CONTROLLED BY ICS                 00594
         SPACE 2                                                        00595
*********************************************************************** 00596
*        JOB ADDRSPC                                                  * 00597
*********************************************************************** 00598
JADDR    CLI   0(R4),ADRSPJK  SEE IF ADDRSPC= KEY                       00599*19
         BNE   JPRTY          NO, BRANCH                                00600
         TM    JOBIND,JOBPROD+JOBTECH+JOBSTC+JOBOPER+JOBCOMM ALLOW? WEJ 00601
         BM    JOBLOOP        ADDRSPC OK ON JOB CARD                WEJ 00602
         LA    R15,P@7        SET ERROR NUMBER                      WEJ 00603
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 00604**7
         B     JOBLOOP        BYPASS FIELDS                         WEJ 00605
         SPACE 4                                                        00606
*********************************************************************** 00607
*        JOB PRTY                                                     * 00608
*********************************************************************** 00609
JPRTY    CLI   0(R4),PRTYJK   SEE IF PRTY= KEY                          00610*19
         BNE   JESTIME        NO, BRANCH                                00611
         B     JOBLOOP        BYPASS CHECKING SINCE SET BY TIME     WEJ 00612**5
*        LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR          WEJ 00613*19
*        SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ 00614*19
*        ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ 00615*19
*        BZ    JOBLOOP        NONE, IGNORE                          WEJ 00616**5
*        LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE           WEJ 00617*19
*        SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ 00618**5
*        ICM   R3,1,0(R4)     LOAD LENGTH OF PRTY VALUE             WEJ 00619*19
*        BZ    JOBLOOP        ZERO, NULL VALUE, EXIT                WEJ 00620**5
*        BCTR  R3,0           MAKE MACHINE LENGTH                   WEJ 00621**5
*        EX    R3,PACK1       PACK PRTY                             WEJ 00622**5
*        CP    DOUBLE,P#0     SEE IF PRTY=0                         WEJ 00623**5
*        BE    JOBLOOP        YES, DEFAULT, ALWAYS OK               WEJ 00624**5
*        B     JOBLOOP        PRTY OVERRIDDEN BY TIME CALC AT END   WEJ 00625**5
         EJECT                                                          00626
*********************************************************************** 00627
*        JOB TIME                                                     * 00628
*********************************************************************** 00629
JESTIME  CLI   0(R4),TIMEJK   SEE IF TIME= KEY                          00630*19
         BNE   JREGN          NO, BRANCH                                00631
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00632*19
         SLR   R5,R5          CLEAR REGISTER FOR ICM                    00633*19
         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS            00634*19
         BZ    JOBLOOP        NONE, IGNORE                              00635
         STC   R5,SAVETCNT    SAVE THE NUMBER OF SUB-PARMS              00636*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00637*19
         SLR   R3,R3          CLEAR REGISTER FOR ICM                    00638
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD           00639*19
         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC       00640
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00641**5
JESTIME1 DS    0H                                                   WEJ 00642**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00643**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00644**6
         BNZ   JESTIME2       NOT NUMERIC                           WEJ 00645**5
         EX    R3,PACK1       PACK TIME                                 00646
         CVB   R15,DOUBLE     CONVERT TO BINARY                         00647
         LTR   R15,R15        SEE IF ZERO                           WEJ 00648
         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC       00649
         CH    R15,H#1440     SEE IF TIME = 1440                        00650
         BNE   JESTIME3       NO, BRANCH TO NEXT PARM                   00651
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ 00652
         BM    JESTIME3       YES, TIME=1440 OK ON JOB CARD             00653
         LA    R15,P@9        SET ERROR NUMBER                          00654
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00655**7
         B     JOBLOOP        GET OUT                                   00656
JESTIME2 LA    R15,P@8        SET ERROR NUMBER                          00657
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00658**7
         B     JOBLOOP        GET OUT                                   00659
JESTIME3 DS    0H                                                       00660
         MH    R15,H#60       MULTIPLY BY 60 TO GET TIME IN SECONDS     00661
         ST    R15,MAXTIME    STORE TIME                                00662
JESTIME4 DS    0H                                                       00663
         CLI   SAVETCNT,X'01' CHK NUMBER OF SUB PARAMETERS              00664
         BNH   JOBLOOP        NO, FINISHED                              00665
         SLR   R5,R5          CLEAR REGISTER 5                          00666*19
         ICM   R5,1,0(R4)     GET LENGTH OF FIRST SUBPARAMETER          00667*19
         LA    R4,1(R5,R4)    POINT TO SECOND SUBPARAMETER              00668*19
         SLR   R3,R3          ZERO OUT R3 FOR ICM                       00669
         ICM   R3,1,0(R4)     INSERT LENGTH OF SUB-PARARM               00670*19
         BZ    JOBLOOP        IF ZERO, FINISHED WITH TIME               00671
         CH    R3,H#2         IS LENGTH GREATER THAN 2                  00672
         BH    JESTIME2       YES, GO TO TIME ERROR                     00673
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00674**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00675**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00676**6
         BNZ   JESTIME2       NOT NUMERIC                           WEJ 00677**5
         EX    R3,PACK1       PACK TIME                                 00678
         CVB   R15,DOUBLE     CONVERT IT TO BINARY                      00679
         CH    R15,H#60       IS THE NUMBER OF SECONDS NOT < 60         00680
         BNL   JESTIME2       YES, GO TO ERROR                          00681
         A     R15,MAXTIME    ADD PREVIOUSLY CALCULATED TIME, IF ANY    00682
         ST    R15,MAXTIME    STORE RESULT                              00683
         B     JOBLOOP        GO TO CHECK REST OF CARD.                 00684
         EJECT                                                          00685
*********************************************************************** 00686
*        JOB REGION                                                   * 00687
*********************************************************************** 00688
JREGN    CLI   0(R4),REGINJK  SEE IF REGION= KEY                        00689*19
         BNE   JTYPRUN        NO, BRANCH                                00690
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00691*19
         SLR   R3,R3          CLEAR REG FOR ICM                         00692
         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT                   00693*19
         BZ    JOBLOOP        NO SUBPARAMETERS, BRANCH                  00694
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS           00695*19
         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM               00696*19
         BZ    JOBLOOP        ZERO, NULL, BRANCH                        00697
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00698
         BNH   JREGN0         NO, CONTINUE                              00699
         LA    R15,P@13       SET ERROR NUMBER                          00700
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00701**7
         B     JOBLOOP        GET OUT                                   00702
JREGN0   DS    0H                                                       00703
         CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              00704
         BL    EXELOOP        NO, MAX IS 99K, IGNORE                    00705
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         00706*19
         NI    JLIBIND,255-JREGIONK TURN OFF REGION SIZE IN 'K' IND     00707
         CLI   0(R15),C'K'    END IN 'K'                                00708
         BNE   JREGN1         NO, BRANCH                                00709
         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 00710
         OI    JLIBIND,JREGIONK REMEMBER REGION SIZE IN 'K'             00711
JREGN1   DS    0H                                                       00712**5
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00713**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00714**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00715**6
         BNZ   JREGN4         NOT NUMERIC                           WEJ 00716**5
         EX    R3,PACK1       PACK REGION SIZE                          00717
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             00718
         TM    JLIBIND,JREGIONK WAS REGION SPECIFIED IN 'K'             00719
         BO    JREGN3         YES, BRANCH                               00720
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              00721
JREGN3   STH   R15,JREGION    STORE REGION SIZE IN TABLE                00722
         B     JOBLOOP        BRANCH                                    00723
JREGN4   LA    R15,P@14       SET ERROR NUMBER                          00724
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00725**7
         B     JOBLOOP        GET OUT                                   00726
         SPACE 4                                                        00727
*********************************************************************** 00728
*        JOB TYPRUN                                                   * 00729
*********************************************************************** 00730
JTYPRUN  CLI   0(R4),TYPRUNJK SEE IF TYPRUN= KEY                        00731*19
         BNE   JOBLOOP        NO, BRANCH                                00732
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00733*19
         SLR   R5,R5          CLEAR REGISTER FOR ICM                    00734*19
         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS            00735*19
         BZ    JOBLOOP        NONE, IGNORE                              00736
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00737*19
         SLR   R3,R3          CLEAR REGISTER FOR ICM                    00738
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST VALUE FIELD          00739*19
         CH    R3,H#4         SEE IF CORRECT LENGTH                     00740
         BNE   JOBLOOP        NO, EXIT                                  00741
         CLC   C#HOLD,1(R4)    SEE IF TYPRUN=HOLD                       00742*19
         BNE   JOBLOOP        NO, EXIT                                  00743
         OI    JOBIND2,HELD   TURN ON HELD INDICATOR                    00744
         EJECT                                                          00745
*********************************************************************** 00746
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 00747
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 00748
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 00749
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 00750
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 00751
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 00752
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 00753
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 00754
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 00755
*        SINGLE SUBPARAMETER.                                         * 00756
*********************************************************************** 00757
JOBLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        00758*19
         SLR   R2,R2          CLEAR REGISTER FOR ICM                    00759**4
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00760*19
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   00761*19
         BNZ   JOBLOOP1       OK, BRANCH INTO ROUTINE                   00762
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                00763*19
         B     JOBLOOP5       AND GET OUT OF ROUTINE                    00764
JOBLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00765*19
JOBLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    00766*19
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     00767*19
         BNM   JOBLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         00768
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              00769*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00770*19
         B     JOBLOOP4       BRANCH                                    00771
JOBLOOP3 LA    R5,1           SET PARAM COUNT TO 1                      00772*19
JOBLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    00773
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     00774*19
         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       00775*19
         BCT   R5,JOBLOOP4    LOOP UNTIL PROCESSED ALL PARMS            00776*19
         BCT   R2,JOBLOOP2    LOOP UNTIL PROCESSED ALL PARMS            00777**4
JOBLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           00778*19
*********************************************************************** 00779
*        WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING       * 00780
*        ILLEGAL VALUES OR OTHER THAN DEFAULT                         * 00781
*********************************************************************** 00782
*                                                                       00783
*********************************************************************** 00784
*        KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:                     * 00785
*            1)  1 BYTE HEX KEYWORD                                   * 00786
*            2)  1 BYTE NUMBER OF SUBPARAMETERS                       * 00787
*            3)  LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A  * 00788
*                1 BYTE LENGTH FIELD                                  * 00789
*        THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL   * 00790
*        HAVE POSITIONAL SUBPARAMETERS THEMSELVES                     * 00791
*        THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM   * 00792
*        BY A HIGH ORDER BIT IN THE FIELD.  IN THIS CASE, THIS IS NOT * 00793
*        A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE  * 00794
*        A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.* 00795
*        THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL    * 00796
*        APPEAR AS FOLLOWS:                                           * 00797
*            1)  A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A       * 00798
*                HIGH ORDER BIT                                       * 00799
*            2)  A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE    * 00800
*                LENGTH FIELD                                         * 00801
*********************************************************************** 00802
*                                                                       00803
JOBPARMS CLI   0(R4),ENDK     END OF TEXT STRING?????                   00804*19
         BNE   JCLASS         NO, BRANCH                                00805
         SPACE                                                          00806
*********************************************************************** 00807
*        IF THE JOB CPU TIME LIMIT WAS NOT SPECIFIED ON THE JOB       * 00808
*        CARD, THE ANR VERSION OF THE EXIT OVERRODE WITH 120       WEJ* 00809
*        WHILE THE MODIFED VERSION WILL FORCE A PRIORITY 0 AND     WEJ* 00810
*        USE THE SYSTEM DEFAULT                                    WEJ* 00811
*********************************************************************** 00812
         L     R14,JCTADDR                                              00813
         USING JCT,R14                                                  00814
         MVI   JCTPRIO,X'00'  SET PRIORITY TO ZERO                      00815
         ICM   R15,B'1111',MAXTIME LOAD TIME FROM JOB CARD (IF ANY)     00816
         BZ    GETNEXT        YES, GO TO GET NEXT RECORD                00817
         L     R1,A#PTYPRF                                              00818
JOBENDLP DS    0H                                                       00819
         LA    R1,L'PRTYENT(,R1) POINT TO NEXT ENTRY                    00820
         CLC   MAXTIME,0(R1)  COMPARE MAX TIME TO PRTY TABLE            00821
         BH    JOBENDLP       LOOP WHILE GREATER THAN ENTRY             00822
         MVC   JCTPRIO,L'PRTYTIME(R1)                                   00823
         B     GETNEXT                                                  00824
         DROP  R14                                                      00825
         EJECT                                                          00826
*********************************************************************** 00827
*        THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS                 * 00828
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 00829
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 00830
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 00831
*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN * 00832
*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          * 00833
*                THE 1ST POS PARAMETER IS THE STEP NAME               * 00834
*                ALL OTHER POS PARAMETERS WILL BE IGNORED             * 00835
*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          * 00836
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 00837
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 00838
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 00839
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 00840
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 00841
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 00842
*                POSITIONAL PARAMETER.                                * 00843
*********************************************************************** 00844
         SPACE 4                                                        00845
EXECARD  EQU   *                                                        00846
*********************************************************************** 00847
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            * 00848
*********************************************************************** 00849
EXECUPDT L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY              00850
         LTR   R7,R7          SEE IF ADDR = 0                           00851
         BZ    EUPDT1         IF ZERO, NO UPDATE, BRANCH                00852
         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE          00853
         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE          00854
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT                       00855
         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT                       00856
         XC    LASTEXEC,LASTEXEC ZERO ADDR OF LAST EXEC ENTRY           00857
EUPDT1   TM    STREINDC,ETXPRCV STATEMENT INVOKE A PROCEDURE?           00858
         BO    PROCARD        YES, BRANCH                               00859
         SPACE 4                                                        00860
*********************************************************************** 00861
*        INITIALIZE NEW STEP ENTRY IN TABLE                           * 00862
*********************************************************************** 00863
EXECINIT LH    R15,ENTCOUNT   LOAD TABLE ENTRY COUNT                    00864
         LA    R15,1(,R15)    ADD 1 TO COUNT                            00865
         CH    R15,MAXENTS    SEE IF MAXIMUM REACHED                    00866
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT         00867
         STH   R15,ENTCOUNT   STORE NEW ENTRY COUNT                     00868
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY IN TABLE          00869
         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   00870
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE          00871
         ST    R7,LASTEXEC    SAVE ADDR OF LAST EXEC ENTRY              00872
         MVI   ENTRYTYP,TYPEXEC  SET TO EXEC ENTRY                      00873
         MVC   EENTRY,BLANKS     BLANK MOST OF EXEC INFO                00874
         XC    ELIBIND(7),ELIBIND ZERO REST OF EXEC INFO                00875
* * *    MVC   EREGION,H#512     SET DEFAULT REGION SIZE TO 512K    WEJ 00876
         TM    STREINDC,ETXPROC  STATEMENT FROM A PROC??                00877
         BNO   EINIT1            NO, BRANCH                             00878
         MVC   EJSTEP,SAVEPROC   MOVE JOB STEP NAME TO TABLE            00879
EINIT1   TM    STREINDC,ETXSTPLB STEP HAVE STEPLIB DD??                 00880
         BNO   EINIT2            NO, BRANCH                             00881
         OI    ELIBIND,ESTEPLIB  SET INDICATOR IN TABLE                 00882
EINIT2   TM    JOBIND2,JOBLIB    DOES JOB HAVE JOBLIB??                 00883
         BNO   EXECSTAR          NO, BRANCH                             00884
         OI    ELIBIND,EJOBLIB   SET INDICATOR IN TABLE                 00885
         SPACE 4                                                        00886
EXECSTAR MVC   ECARDNO,CARDNO   SAVE CARD NUMBER OF THIS STATEMENT      00887
         LA    R4,STREKEY       LOAD START OF TRUE TEXT                 00888*19
         ST    R4,PARMADDR      SAVE START OF PARAMETER ADDRESS         00889*19
EXECPARM CLI   0(R4),ENDK       END OF TEXT STRING?????                 00890*19
         BE    PROCSEAR         YES, GO SEE IF FROM A PROC              00891
         EJECT                                                          00892
*********************************************************************** 00893
*        EXEC STEPNAME                                                * 00894
*********************************************************************** 00895
ESTEPN   CLI   0(R4),EXECK    SEE IF STEPNAME KEY                       00896*19
         BNE   EPGM           NO, BRANCH                                00897
         SLR   R5,R5          CLEAR REG FOR ICM                         00898*19
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  00899*19
         BZ    EXELOOP        ZERO, NO STEP NAME                        00900
         SLR   R3,R3          CLEAR REG FOR ICM                         00901
         ICM   R3,1,2(R4)     LOAD LENGTH OF 1ST POS SUBPARAM           00902*19
         BZ    EXELOOP        ZERO, NO STEP NAME, BRANCH                00903
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00904
         BNH   ESTEPN0        NO, CONTINUE                              00905
         LA    R15,P@11       SET ERROR NUMBER                          00906
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00907**7
         B     EXELOOP        GET OUT                                   00908
ESTEPN0  DS    0H                                                       00909
         BCTR  R3,0           MAKE MACHINE LENGTH                       00910
         TM    STREINDC,ETXPROC STATEMENT FROM A PROC                   00911
         BO    ESTEPN1        YES, THEN NAME IS PROC STEP NAME          00912
         EX    R3,MOVE5       MOVE NAME TO JOBSTEP NAME                 00913
         EX    R3,MOVE18      MOVE NAME TO JOBSTEP NAME                 00914
         B     EXELOOP        BRANCH                                    00915
ESTEPN1  EX    R3,MOVE6       MOVE NAME TO PROCSTEP NAME                00916
         EX    R3,MOVE19      MOVE NAME TO PROCSTEP NAME                00917
         B     EXELOOP        BRANCH                                    00918
         SPACE 3                                                        00919
*********************************************************************** 00920
*        EXEC PGM                                                     * 00921
*********************************************************************** 00922
EPGM     CLI   0(R4),PGMEK    SEE IF PGM= KEY                           00923*19
         BNE   EREGN          NO, BRANCH                                00924
         SLR   R3,R3          CLEAR REG FOR ICM                         00925
         ICM   R3,1,2(R4)     LOAD LENGTH OF PGM NAME                   00926*19
         BZ    EXELOOP        ZERO, NULL, BRANCH                        00927
         BM    EXELOOP        HIGH BIT ON, REFERBACK, IGNORE            00928
         CH    R3,H#8         SEE IF LENGTH > 8                         00929
         BNH   EPGM1          NO, CONTINUE                              00930
         LA    R15,P@12       SET ERROR NUMBER                          00931
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00932**7
         B     EXELOOP        GET OUT                                   00933
EPGM1    DS    0H                                                       00934
         BCTR  R3,0           MAKE MACHINE LENGTH                       00935
         EX    R3,MOVE7       MOVE PGM NAME TO TABLE                    00936
         SPACE                                                          00937
         AGO   .NOPGMS                                                  00938
         CLC   PGMCICS,3(R4)  Q. CICS PGM NAME ?                        00939*19
         BNE   CHK7074        NO, TRY 7074                              00940
         OI    RESOURCE+1,PCICS YES, ATTACH 'CICS' RESOURCE             00941
         B     EXELOOP        & GET NEXT EXEC PARM                      00942
CHK7074  CLC   PGM7074,3(R4)  Q. PGM NAME 7074 ?                        00943*19
         BNE   CHK1401        NO, TRY 1401                              00944
         OI    RESOURCE+1,P7074 YES,ATTACH '7074' RESOURCE              00945
         B     EXELOOP        & GET NEXT EXEC PARM                      00946
CHK1401  CLC   PGM1401,3(R4)  Q. PGM NAME 1401 ?                        00947*19
         BNE   CHKXMIT        NO, TRY XMISSIONS                         00948
         OI    RESOURCE,P1401 YES, ATTACH '1401' RESOURCE               00949
         B     EXELOOP        & GET NEXT EXEC PARM                      00950
CHKXMIT  CLC   PGMXMIT,3(R4)  Q. PGM NAME XMISSIONS ?                   00951*19
         BNE   EXELOOP        NO, GET NEXT EXEC PARM                    00952
         OI    RESOURCE+1,PXMIT YES, ATTACH 'XMIT' RESOURCE             00953
.NOPGMS  ANOP                                                           00954
         B     EXELOOP        BRANCH                                    00955
         SPACE 3                                                        00956
*********************************************************************** 00957
*        EXEC REGION                                                  * 00958
*********************************************************************** 00959
EREGN    CLI   0(R4),REGINEEK SEE IF REGION= KEY                        00960*19
         BNE   EREGN@         NO, BRANCH                                00961
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00962*19
         SLR   R3,R3          CLEAR REG FOR ICM                         00963
         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT                   00964*19
         BZ    EXELOOP        NO SUBPARAMETERS, BRANCH                  00965
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS           00966*19
         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM               00967*19
         BZ    EXELOOP        ZERO, NULL, BRANCH                        00968
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00969
         BNH   EREGN0         NO, CONTINUE                              00970
         LA    R15,P@13       SET ERROR NUMBER                          00971
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00972**7
         B     EXELOOP        GET OUT                                   00973
EREGN0   DS    0H                                                       00974
*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              00975
*        BL    EXELOOP        NO, MAX IS 99K, IGNORE                    00976
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         00977*19
         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND     00978
         CLI   0(R15),C'K'    END IN 'K'                                00979
         BNE   EREGN1         NO, BRANCH                                00980
         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 00981
         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'             00982
EREGN1   DS    0H                                                       00983**5
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00984**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00985**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00986**6
         BNZ   EREGN4         NOT NUMERIC                           WEJ 00987**5
         EX    R3,PACK1       PACK REGION SIZE                          00988
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             00989
         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'             00990
         BO    EREGN3         YES, BRANCH                               00991
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              00992
EREGN3   STH   R15,EREGION    STORE REGION SIZE IN TABLE                00993
         B     EXELOOP        BRANCH                                    00994
EREGN4   LA    R15,P@14       SET ERROR NUMBER                          00995
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00996**7
         B     EXELOOP        GET OUT                                   00997
         EJECT                                                          00998
*********************************************************************** 00999
*        EXEC REGION.                                                 * 01000
*********************************************************************** 01001
EREGN@   CLI   0(R4),REGINPEK SEE IF REGION. KEY                        01002*19
         BNE   ETIME          NO, BRANCH                                01003
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01004*19
         SLR   R5,R5          ZERO REGISTER                             01005*19
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS                  01006*19
         BNZ   EREGN@01       NOT ZERO, BRANCH                          01007
         LA    R15,P@13       SET ERROR NUMBER                          01008
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01009**7
         B     EXELOOP        GET OUT                                   01010
EREGN@01 DS    0H                                                       01011
         CH    R5,H#2         CHECK NUMBER OF SUBPARAMS                 01012*19
         BNH   EREGN@02       NOT > 2, OK                               01013
         LA    R15,P@13       SET ERROR NUMBER                          01014
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01015**7
         B     EXELOOP        GET OUT                                   01016
EREGN@02 DS    0H                                                       01017
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS    01018*19
         SLR   R3,R3          ZERO REGISTER                             01019
         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME                   01020*19
         BNZ   EREGN@03       NOT ZERO, BRANCH                          01021
         LA    R15,P@13       SET ERROR NUMBER                          01022
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01023**7
         B     EXELOOP        GET OUT                                   01024
EREGN@03 DS    0H                                                       01025
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01026
         BNH   EREGN@04       NO, CONTINUE                              01027
         LA    R15,P@13       SET ERROR NUMBER                          01028
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01029**7
         B     EXELOOP        GET OUT                                   01030
EREGN@04 DS    0H                                                       01031
         BCTR  R3,0           MAKE MACHINE LENGTH                       01032
         EX    R3,COMPARE3    SEE IF OVERRIDE FOR CURRENT STEP          01033
         BNE   EXELOOP        NO, GET OUT                               01034
         LA    R4,2(R4,R3)    SET REG TO START OF 2ND PARAM             01035*19
         ICM   R3,1,0(R4)     LOAD LENGTH OF 2ND PARAM                  01036*19
         BZ    EXELOOP        ZERO, NULL, BRANCH                        01037
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01038
         BNH   EREGN@05       NO, CONTINUE                              01039
         LA    R15,P@13       SET ERROR NUMBER                          01040
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01041**7
         B     EXELOOP        GET OUT                                   01042
EREGN@05 DS    0H                                                       01043
*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              01044
*        BL    EXELOOP        NO, MAX IS 99K, IGNORE                    01045
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         01046*19
         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND     01047
         CLI   0(R15),C'K'    END IN 'K'                                01048
         BNE   EREGN@1        NO, BRANCH                                01049
         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 01050
         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'             01051
EREGN@1  DS    0H                                                       01052**5
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01053**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01054**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01055**6
         BNZ   EREGN@4        NOT NUMERIC                           WEJ 01056**5
         EX    R3,PACK1       PACK REGION SIZE                          01057
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             01058
         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'             01059
         BO    EREGN@3        YES, BRANCH                               01060
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              01061
EREGN@3  STH   R15,EREGION    STORE REGION SIZE IN TABLE                01062
         B     EXELOOP        BRANCH                                    01063
EREGN@4  LA    R15,P@14       SET ERROR NUMBER                          01064
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01065**7
         B     EXELOOP        GET OUT                                   01066
         EJECT                                                          01067
*********************************************************************** 01068
*        EXEC TIME                                                    * 01069
*********************************************************************** 01070
ETIME    CLI   0(R4),TIMEEEK  SEE IF TIME= KEY                          01071*19
         BNE   ETIME@         NO, BRANCH                                01072
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01073*19
         SLR   R5,R5          CLEAR REGISTER FOR ICM                    01074*19
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              01075*19
         BZ    EXELOOP        ZERO, IGNORE                              01076
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01077*19
ETIME1   SLR   R3,R3          CLEAR REGISTER FOR ICM                    01078
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD           01079*19
         CH    R3,H#4         COMPARE LENGTH TO 4                       01080
         BL    EXELOOP        LT 4, GET OUT                             01081
         BE    ETIME1A        EQ 4, COMPARE                             01082
         LA    R15,P@15       SET ERROR NUMBER                          01083
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01084**7
         B     EXELOOP        GET OUT                                   01085
ETIME1A  DS    0H                                                       01086
         CLC   C#1440,1(R4)     SEE IF TIME = 1440                      01087*19
         BNE   EXELOOP        NO, BRANCH                                01088
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440? WEJ  01089
         BM    EXELOOP        YES, TIME=1440 OK ON JOB CARD             01090
         LA    R15,P@16       SET ERROR NUMBER                          01091
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01092**7
         B     EXELOOP        GET OUT                                   01093
         EJECT                                                          01094
*********************************************************************** 01095
*        EXEC TIME.                                                   * 01096
*********************************************************************** 01097
ETIME@   CLI   0(R4),TIMEPEK  SEE IF TIME. KEY                          01098*19
         BNE   EPERF          NO, BRANCH                                01099
         SLR   R3,R3          ZERO WORK REG                             01100
         SLR   R5,R5          ZERO WORK REG                             01101*19
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01102*19
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS                  01103*19
         BZ    EXELOOP        NO SUBPARAMS, BRANCH                      01104
         CH    R5,H#3         SEE IF MORE THAN 3 SUBPARAMS              01105*19
         BNH   ETIME@0A       NO, BRANCH                                01106
         LA    R15,P@15       SET ERROR NUMBER                          01107
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01108**7
         B     EXELOOP        GET OUT                                   01109
ETIME@0A DS    0H                                                       01110
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS    01111*19
         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMS               01112*19
         BL    EXELOOP        ONLY ONE, IGNORE STEPNAME                 01113
         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME                   01114*19
         BZ    EXELOOP        NO STEPNAME, BRANCH                       01115
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01116
         BNH   ETIME@0B       NO, BRANCH                                01117
         LA    R15,P@15       SET ERROR NUMBER                          01118
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01119**7
         B     EXELOOP        GET OUT                                   01120
ETIME@0B DS    0H                                                       01121
         BCTR  R3,0           MAKE MACHINE LENGTH                       01122
         EX    R3,COMPARE3    SEE IF CORRECT STEPNAME                   01123
         BNE   EXELOOP        NO, GET OUT                               01124
         LA    R4,2(R4,R3)    LOAD ADDR OF 2ND SUBPARAM                 01125*19
*              PRIOR USE OF R3 WAS AS A LENGTH REGISTER                 01126
         IC    R3,0(R4)       LOAD LENGTH OF MINUTES PORTION            01127*19
         CH    R3,H#4         COMPARE LENGTH TO 4                       01128
         BL    EXELOOP        LT 4, GET OUT                             01129
         BE    ETIME@0C       EQ 4, COMPARE                             01130
         LA    R15,P@15       SET ERROR NUMBER                          01131
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01132**7
         B     EXELOOP        GET OUT                                   01133
ETIME@0C DS    0H                                                       01134
         CLC   C#1440,1(R4)     SEE IF TIME = 1440                      01135*19
         BNE   EXELOOP        NO, BRANCH                                01136
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ 01137
         BM    EXELOOP        YES, TIME=1440 OK ON EXEC CARD        WEJ 01138
         LA    R15,P@16       SET ERROR NUMBER                          01139
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01140**7
         B     EXELOOP        GET OUT                                   01141
         SPACE 4                                                        01142
*********************************************************************** 01143
*        EXEC PERFORM                                                 * 01144
*********************************************************************** 01145
EPERF    CLI   0(R4),PRFMEEK  SEE IF PERFORM= KEY                       01146*19
         BNE   EPERF@         NO, BRANCH                                01147
         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM     01148
         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD              01149
         LA    R15,P@17       SET ERROR NUMBER                          01150
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01151**7
         B     EXELOOP        GET OUT                                   01152
         SPACE 4                                                        01153
*********************************************************************** 01154
*        EXEC PERFORM.                                                * 01155
*********************************************************************** 01156
EPERF@   CLI   0(R4),PRFMPEK  SEE IF PERFORM. KEY                       01157*19
         BNE   EADDR          NO, BRANCH                                01158
         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBCOMM ALLOW IT    01159
         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD              01160
         LA    R15,P@17       SET ERROR NUMBER                          01161
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01162**7
         B     EXELOOP        GET OUT                                   01163
         SPACE 4                                                        01164
*********************************************************************** 01165
*        EXEC ADDRSPC                                                 * 01166
*********************************************************************** 01167
EADDR    CLI   0(R4),ADRSPEEK SEE IF ADDRSPC= KEY                       01168*19
         BNE   EADDR@         NO, BRANCH                                01169
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01170
         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD              01171
         LA    R15,P@18       SET ERROR NUMBER                          01172
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01173**7
         B     EXELOOP        GET OUT                                   01174
         SPACE 4                                                        01175
*********************************************************************** 01176
*        EXEC ADDRSPC.                                                * 01177
*********************************************************************** 01178
EADDR@   CLI   0(R4),ADRSPPEK SEE IF ADDRSPC. KEY                       01179*19
         BNE   EDPRTY         NO, BRANCH                                01180
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01181
         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD              01182
         LA    R15,P@18       SET ERROR NUMBER                          01183
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01184**7
         B     EXELOOP        GET OUT                                   01185
         EJECT                                                          01186
*********************************************************************** 01187
*        EXEC DPRTY                                                   * 01188
*********************************************************************** 01189
EDPRTY   CLI   0(R4),SDPEEK   SEE IF  DPRTY= KEY                        01190*19
         BNE   EDPRTY@        NO, BRANCH                                01191
         TM    JOBIND,JOBSTC  SEE IF ALLOWED                            01192
         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD                01193
         LA    R15,P@19       SET ERROR NUMBER                          01194
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01195**7
         B     EXELOOP        GET OUT                                   01196
         SPACE 4                                                        01197
*********************************************************************** 01198
*        EXEC DPRTY.                                                  * 01199
*********************************************************************** 01200
EDPRTY@  CLI   0(R4),SDPPEK   SEE IF  DPRTY. KEY                        01201*19
         BNE   EXELOOP        NO, BRANCH                                01202
         TM    JOBIND,JOBSTC  SEE IF ALLOWED                            01203
         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD                01204
         LA    R15,P@19       SET ERROR NUMBER                          01205
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01206**7
         B     EXELOOP        GET OUT                                   01207
         EJECT                                                          01208
*********************************************************************** 01209
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 01210
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 01211
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 01212
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 01213
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 01214
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 01215
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 01216
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 01217
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 01218
*        SINGLE SUBPARAMETER.                                         * 01219
*********************************************************************** 01220
EXELOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        01221*19
         SLR   R2,R2          CLEAR REGISTER FOR ICM                    01222**4
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01223*19
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   01224*19
         BNZ   EXELOOP1       OK, BRANCH INTO ROUTINE                   01225
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                01226*19
         B     EXELOOP5       AND GET OUT OF ROUTINE                    01227
EXELOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01228*19
EXELOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    01229*19
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     01230*19
         BNM   EXELOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         01231
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              01232*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01233*19
         B     EXELOOP4       BRANCH                                    01234
EXELOOP3 LA    R5,1           SET PARAM COUNT TO 1                      01235*19
EXELOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    01236
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     01237*19
         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       01238*19
         BCT   R5,EXELOOP4    LOOP UNTIL PROCESSED ALL PARMS            01239*19
         BCT   R2,EXELOOP2    LOOP UNTIL PROCESSED ALL PARMS            01240**4
EXELOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           01241*19
         B     EXECPARM       CONTINUE                                  01242
         EJECT                                                          01243
*********************************************************************** 01244
*        THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS                   * 01245
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 01246
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 01247
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 01248
*            4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION * 01249
*            5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS            * 01250
*                THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT       * 01251
*                ALL OTHER POS PARAMETERS WILL BE IGNORED             * 01252
*            6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS            * 01253
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 01254
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 01255
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 01256
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 01257
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 01258
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 01259
*                POSITIONAL PARAMETER.                                * 01260
*********************************************************************** 01261
DDCARD   TM    STRDINDC,DTXDDNM  SEE IF DD DDNAME= STATEMENT            01262
         BO    GETNEXT        YES, BYPASS                               01263
         TM    STRDINDC,DTXDYNAM SEE IF DD DYNAM STATEMENT              01264
         BO    GETNEXT        YES, BYPASS                               01265
         TM    STRDINDC,DTXSYSIN SEE IF DD INPUT SPOOL FILE             01266
         BO    GETNEXT        YES, BYPASS                               01267
         EJECT                                                          01268
*********************************************************************** 01269
*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED                * 01270
*        IF PRIV OR TAPE UNIT                                         * 01271
*********************************************************************** 01272
         MVI   UNITIND,X'00'   ZERO UNIT TYPE IND                       01273*12
         MVI   UNITIND2,X'00'   ZERO UNIT PROCESSED INDICATOR           01274*12
         MVI   DISPIND,X'00'   ZERO DISP IND                            01275*12
         MVI   UNITCOUN,X'01'  SET DEFAULT UNIT COUNT TO 1              01276
         MVI   TENTRY,C' '     BLANK OUT ENTIRE TEMP ENTRY              01277
         MVC   TENTRY+1(L'TENTRY-1),TENTRY                              01278
         XC    TTYPE,TTYPE     ZERO TEMPORARY UNIT TYPE                 01279
         XC    TVOLSER,TVOLSER ZERO TEMP 1ST VOLSER                     01280
         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH  01281
         MVC   FCBFLAG,C'N'    SET FCB FOUND FLAG TO NO                 01282
DDSTART  LA    R4,STRDKEY      LOAD START OF TRUE TEXT                  01283*19
         ST    R4,PARMADDR     SAVE START OF PARAMETER ADDRESS          01284*19
DDPARM   CLI   0(R4),ENDK      END OF TEXT STRING??                     01285*19
         BE    DDEND           YES, GO CHECK FOR UPDATE                 01286
         SPACE 4                                                        01287
*********************************************************************** 01288
*        DD DDNAME                                                    * 01289
*********************************************************************** 01290
DDDNAME  CLI   0(R4),DDK      SEE IF DDNAME KEY                         01291*19
         BNE   DDDUMMY        NO, BRANCH                                01292
         SLR   R5,R5          CLEAR REG FOR ICM                         01293*19
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  01294*19
         BZ    DDLOOP         ZERO, NO SUBPARAMS                        01295
         SLR   R3,R3          CLEAR REG FOR ICM                         01296
         ICM   R3,1,2(R4)     LOAD LENGTH OF DDNAME                     01297*19
         BZ    DDLOOP         YES, CONCATINATED DD, LOOP                01298
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01299
         BNH   DDDNAMEA       NO, CONTINUE                              01300
         LA    R15,P@20       SET ERROR NUMBER                          01301
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01302**7
         B     DDLOOP         GET OUT                                   01303
DDDNAMEA DS    0H                                                       01304
         BCTR  R3,0           MAKE MACHINE LENGTH                       01305
         EX    R3,MOVE8       MOVE DDNAME TO TEMP ENTRY                 01306
         B     DDLOOP         GO GET NEXT PARAM                         01307
         SPACE 4                                                        01308
*********************************************************************** 01309
*        DD DUMMY                                                     * 01310
*********************************************************************** 01311
DDDUMMY  CLI   0(R4),DUMMK    SEE IF DUMMY KEY                          01312*19
         BE    GETNEXT        DUMMY STATEMENTS ARE IGNORED              01313
         EJECT                                                          01314
*********************************************************************** 01315
*        DD DSNAME                                                    * 01316
*********************************************************************** 01317
DDSNAME  CLI   0(R4),DSNAMEK  SEE IF DSNAME KEY                         01318*19
         BNE   DDISP          NO, BRANCH                                01319
         SLR   R3,R3          CLEAR REG FOR ICM                         01320
         ICM   R3,1,2(R4)     LOAD LENGTH OF DSN                        01321*19
         BZ    DDLOOP         ZERO, NULL, BRANCH                        01322
         BNM   DSNSTD         HIGH BIT NOT ON, STANDARD DSN             01323
         CLI   4(R4),C'*'     SEE IF 1ST PARAM = * (REFERBACK)          01324*19
         BE    DSNREFBK       YES, REFERBACK                            01325
*********************************************************************** 01326
*        DSNAME PROBABLY A GDG                                        * 01327
*********************************************************************** 01328
DSNGDG   N     R3,F#127       TURN OFF HIGH ORDER BIT                   01329
         CH    R3,H#2         SEE IF TWO SUBPARAMS                      01330
         BE    DSNGDGA        YES, BRANCH                               01331
         LA    R15,P@21       SET ERROR NUMBER                          01332
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01333**7
         B     DDLOOP         GET OUT                                   01334
DSNGDGA  DS    0H                                                       01335
         LA    R5,3(,R4)      LOAD ADDR OF START OF 1ST ENTRY           01336*19
*              PRIOR USE OF R3 GUARENTEES HIGH ORDER ZEROS              01337
         IC    R3,0(R5)       LOAD LENGTH OF 1ST ENTRY                  01338*19
         CH    R3,H#35        SEE IF MAX LENGTH EXCEEDED                01339
         BNH   DSNGDGB        NOT EXCEEDED, BRANCH                      01340
         LA    R15,P@22       SET ERROR NUMBER                          01341
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01342**7
         B     DDLOOP         GET OUT                                   01343
DSNGDGB  DS    0H                                                       01344
         BCTR  R3,0           MAKE MACHINE LENGTH                       01345
         EX    R3,MOVE14      MOVE 1ST PART DSN TO TEMP ENTRY           01346
         LA    R3,1(,R3)      MAKE TRUE LENGTH AGAIN                    01347
         LA    R5,1(R3,R5)    INCREMENT TO 2ND ENTRY                    01348*19
         LA    R2,TDSN        LOAD ADDR OF TEMPORARY DSN                01349**4
         AR    R2,R3          LOAD ADDR WITHIN TDSN FOR GEN #           01350**4
         LR    R15,R3         SAVE LENGTH OF 1ST PART DSN               01351
         ICM   R3,1,0(R5)     LOAD LENGTH OF 2ND PART DSN               01352*19
         BNZ   DSNGDGC        NOT ZERO, BRANCH                          01353
         LA    R15,P@21       SET ERROR NUMBER                          01354
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01355**7
         B     DDLOOP         GET OUT                                   01356
DSNGDGC  DS    0H                                                       01357
         AR    R15,R3         ADD NEW LENGTH OF 2ND PART TO 1ST         01358
         CH    R15,H#42       SEE IF TOTAL LENGTH EXCEEDS MAX           01359
         BNH   DSNGDGD        NO, BRANCH                                01360
         LA    R15,P@22       SET ERROR NUMBER                          01361
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01362**7
         B     DDLOOP         GET OUT                                   01363
DSNGDGD  DS    0H                                                       01364
         MVI   0(R2),C'('     PUT PARENS FOR GEN #                      01365**4
         LA    R2,1(,R2)      INCREMENT TO START TRUE GEN #             01366**4
         BCTR  R3,0           MAKE MACHINE LENGTH                       01367
         EX    R3,MOVE15      MOVE GEN # TO TDSN                        01368
         LA    R2,1(R3,R2)    INCREMENT TO END OF TDSN FIELD            01369**4
         MVI   0(R2),C')'     FINISH PARENS FOR GEN #                   01370**4
         B     DDLOOP         GO GET NEXT ENTRY                         01371
         SPACE 4                                                        01372
*********************************************************************** 01373
*        DSNAME PROBABLY A REFERBACK                                  * 01374
*********************************************************************** 01375
DSNREFBK BAL   R14,REFBACK    GO TO REFERBACK RTN                       01376
         MVC   TDSN,REFDSN    SAVE REFERBACK DSNAME                     01377
         B     DDLOOP         GO GET NEXT ENTRY                         01378
*********************************************************************** 01379
*        DSNAME PROBABLY STANDARD                                     * 01380
*********************************************************************** 01381
DSNSTD   CH    R3,H#44        SEE IF > MAX LENGTH                       01382
         BNH   DSNSTDA        NO, BRANCH                                01383
         LA    R15,P@22       SET ERROR NUMBER                          01384
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01385**7
         B     DDLOOP         GET OUT                                   01386
DSNSTDA  DS    0H                                                       01387
         CLC   3(8,R4),NULLFILE SEE IF DSN=NULLFILE                     01388*19
         BE    GETNEXT        YES, DUMMY, IGNORE STATEMENT              01389
         BCTR  R3,0           MAKE MACHINE LENGTH                       01390
         EX    R3,MOVE9       MOVE DSN TO TEMP ENTRY                    01391
         B     DDLOOP         GO GET NEXT ENTRY                         01392
         EJECT                                                          01393
*********************************************************************** 01394
*        DD DISP                                                      * 01395
*********************************************************************** 01396
DDISP    CLI   0(R4),DISPK    SEE IF DISP= KEYWORD                      01397*19
         BNE   DUNIT          NO, BRANCH                                01398
         SLR   R5,R5          CLEAR REG FOR ICM                         01399*19
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01400*19
         BZ    DDLOOP         ZERO, NULL, BRANCH                        01401
         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS              01402*19
         CH    R5,H#3         SEE IF NUMBER > 3                         01403*19
         BNH   DDISPA         NO, CONTINUE                              01404
         LA    R15,P@23       SET ERROR NUMBER                          01405
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01406**7
         B     DDLOOP         GET OUT                                   01407
DDISPA   DS    0H                                                       01408
         SLR   R2,R2          ZERO WORK REG                             01409**4
DSPLOO1  LA    R2,1(,R2)      ADD 1 TO COUNTER                          01410**4
         CR    R2,R5          SEE IF ALL PROCESSED                      01411*19
         BH    DISPCHK        YES, GO CHECK RESULTS                     01412
         SLR   R3,R3          ZERO WORK REG                             01413
         IC    R3,0(,R4)      LOAD LEN OF PARAM                         01414*19
         CH    R2,H#1         SEE IF 1ST PARAM                          01415**4
         BE    DSPLOO2        YES, BRANCH TO PROCESS                    01416
         CH    R2,H#2         SEE IF 2ND PARAM                          01417**4
         BE    DSPLOO7        YES, BRANCH TO PROCESS                    01418
         B     DSPLOO9        BRANCH TO PROCESS                         01419
*********************************************************************** 01420
*         FIRST DISP PARAMETER                                        * 01421
*********************************************************************** 01422
DSPLOO2  LTR   R3,R3          SEE IF LENGTH = 0                         01423
         BZ    DSPLOO3        YES, GO SET TO NEW                        01424
         CLC   C#NEW,1(R4)  SEE IF NEW                                  01425*19
         BNE   DSPLOO4        NO, BRANCH                                01426
DSPLOO3  OI    DISPIND,NEW    SET TO NEW                                01427
         B     DSPLOO14       GO GET NEXT                               01428
DSPLOO4  DS    0H                                                       01429
         CLC   C#SHR,1(R4)    SEE IF SHR                                01430*19
         BE    DSPLOO4A       NO, BRANCH                                01431
         CLC   C#SHARE,1(R4)  SEE IF SHR                                01432*19
         BNE   DSPLOO5        NO, BRANCH                                01433
DSPLOO4A DS    0H                                                       01434
         OI    DISPIND,SHR    SET TO SHR                                01435
         B     DSPLOO14       GO GET NEXT                               01436
DSPLOO5  CLC   =C'OLD',1(R4) SEE IF OLD                                 01437*19
         BNE   DSPLOO6        NO, MUST BE "MOD", BRANCH                 01438
         OI    DISPIND,OLD    SET TO OLD                                01439
         B     DSPLOO14       GO GET NEXT                               01440
DSPLOO6  OI    DISPIND,MOD    SET TO MOD                                01441
         B     DSPLOO14       GO GET NEXT                               01442
*********************************************************************** 01443
*         SECOND DISP PARAMETER                                       * 01444
*********************************************************************** 01445
DSPLOO7  LTR   R3,R3          SEE IF LENGTH = 0                         01446
         BNZ   DSPLOO9        NOT ZERO, NO DEFAULT                      01447
         TM    DISPIND,NEW    SEE IF NEW                                01448**5
         BO    DSPLOO8        NO, GO SET DEFAULT TO KEEP                01449**5
         OI    DISPIND,DELETE SET DEFAULT TO DELETE FOR "NEW"           01450
         B     DSPLOO14       GO GET NEXT                               01451
DSPLOO8  OI    DISPIND,KEEP   SET TO KEEP                               01452
         B     DSPLOO14       GO GET NEXT                               01453
*********************************************************************** 01454
*         THIRD DISP PARAMETER                                        * 01455
*********************************************************************** 01456
DSPLOO9  LTR   R3,R3          SEE IF LENGTH = 0                         01457
         BZ    DSPLOO14       YES, USE DEFAULT OF PREVIOUS PARAMETER    01458
         CLC   C#KEEP,1(R4)      SEE IF KEEP                            01459*19
         BNE   DSPLOO10       NO, BRANCH                                01460
         OI    DISPIND,KEEP   SET TO KEEP                               01461
         B     DSPLOO14       GO GET NEXT                               01462
DSPLOO10 DS    0H                                                       01463**3
         CLC   C#PASS,1(R4)   SEE IF PASS                               01464*19
         BNE   DSPLOO11       NO, BRANCH                                01465
         OI    DISPIND,PASS   SET TO PASS                               01466
         B     DSPLOO14       GO GET NEXT                               01467
DSPLOO11 DS    0H                                                       01468**3
         CLC   C#CATLG,1(R4)     SEE IF CATLG                           01469*19
         BNE   DSPLOO12       NO, BRANCH                                01470
         OI    DISPIND,CATLG  SET TO CATLG                              01471
         B     DSPLOO14       GO GET NEXT                               01472
DSPLOO12 DS    0H                                                       01473**3
         CLC   C#DELETE,1(R4)  SEE IF DELETE                            01474*19
         BNE   DSPLOO13       NO, GO SET TO "UNCATLG"                   01475
         OI    DISPIND,DELETE SET TO DELETE                             01476
         B     DSPLOO14       GO GET NEXT                               01477
DSPLOO13 OI    DISPIND1,UNCATLG SET TO UNCATLG                          01478
DSPLOO14 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY                   01479*19
         B     DSPLOO1        LOOP                                      01480
*********************************************************************** 01481
*         CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS             * 01482
*         IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT           * 01483
*         FOR THE SECOND PARAMETER MUST BE DETERMINED.                * 01484
*********************************************************************** 01485
DISPCHK  CH    R5,H#1         SEE IF ONLY 1 ENTRY                       01486*19
         BNE   DDLOOP         NO, DO NOT SET DEFAULT                    01487
         TM    DISPIND,NEW    SEE IF NEW                                01488**5
         BZ    DISPCHK2       NO, BRANCH                                01489**5
*********************************************************************** 01490
*        DISP=NEW  DEFAULT TO DELETE                                  * 01491
*********************************************************************** 01492
DISPCHK1 OI    DISPIND,DELETE SET TO DELETE                             01493
         B     DDLOOP         GET OUT                                   01494
*********************************************************************** 01495
*        DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP                       * 01496
*********************************************************************** 01497
DISPCHK2 OI    DISPIND,KEEP   SET TO KEEP                               01498
         B     DDLOOP         GO GET NEXT PARAM                         01499
         EJECT                                                          01500
*********************************************************************** 01501
*        DD UNIT                                                      * 01502
*********************************************************************** 01503
DUNIT    CLI   0(R4),UNITK    SEE IF UNIT= PARAM                        01504*19
         BNE   DAFF           NO, BRANCH                                01505
*        TM    UNITIND2,UNITPRC  UNIT ALREADY PROCESSED                 01506*33
*        BO    DDLOOP                                               WEJ 01507*33
         SLR   R5,R5          CLEAR REGISTER                            01508*19
         MVI   UNITIND2,UNITPRC                                         01509*12
         ICM   R5,1,1(R4)     GET NUMBER OF POS SUBPARAMS               01510*19
         BZ    DDLOOP         ZERO, NO POS SUBPARAMS                    01511
         CH    R5,H#3         SEE IF NUMBER > 3                         01512*19
         BNH   DUNITA         NO, CONTINUE                              01513
         LA    R15,P@24       SET ERROR NUMBER                          01514
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01515**7
         B     DDLOOP         GET OUT                                   01516
DUNITA   DS    0H                                                       01517
         LA    R4,2(,R4)      LOAD START OF POS PARAMS                  01518*19
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAM                   01519*19
         BZ    UNITCTCK       ZERO, GO GET NEXT SUBPARAM                01520*19
         CH    R3,H#8         SEE IF LENGTH > 8                         01521
         BNH   UNITNM1        NO, CONTINUE                              01522*21
DUNITER  DS    0H                                                   WEJ 01523*19
         LA    R15,P@24       SET ERROR NUMBER                          01524
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01525**7
         B     DDLOOP         GET OUT                                   01526
*********************************************************************** 01527
*        PROCESS UNIT NAME                                            * 01528
*********************************************************************** 01529
UNITNM1  SLR   R2,R2          CLEAR REG 2                               01530*19
         LR    R15,R3         GET ADJUSTED VALUE OF SIZE            WEJ 01531*31
         BCTR  R15,R0                                               WEJ 01532*31
         LA    R1,DEVTABLE    LOAD ADDR OF DEV TABLE                    01533
*********************************************************************** 01534
*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO          * 01535
*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.                   * 01536
*********************************************************************** 01537
UNITNM2  CLI   1(R1),X'00'    SEE IF END OF TABLE                       01538
         BE    UNITNM3        YES, BRANCH                               01539
         IC    R2,1(,R1)      GET TBL ENTRY LENGTH                  WEJ 01540*19
         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH     01541*31
         BL    UNITNM2A       NOT A MATCH                           WEJ 01542*33
         EX    R2,COMPARE2    SEE IF UNIT NAME OR SUBSET MATCH      WEJ 01543*27
         BE    UNITNM3        YES, BRANCH                               01544
UNITNM2A DS    0H                                                   WEJ 01545**8
         LA    R1,10(,R1)     INCREMENT TO NEXT ENTRY                   01546
         B     UNITNM2        LOOP                                      01547
UNITNM3  DS    0H                                                       01548*19
         CLI   0(R1),X'F0'    IS THIS A STORAGE DISK TYPE           WEJ 01549*27
         BNL   UNITNM4        YES,CHECK IF PRODUCTION               WEJ 01550*27
         OC    UNITIND,0(R1)  'OR' IN THE UNIT TYPE BITS                01551
         B     UNITCTCK       GO RESET UNIT NAME SIZE                   01552*19
UNITNM4  DS    0H                                                   WEJ 01553**2
         CH    R5,H#1         IS THERE MORE THAN ONE SUBPARAMETER   WEJ 01554*19
         BH    UNITCTCK       YES, DO NOT CHANGE                    WEJ 01555*19
         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH     01556*35
         BNE   DDLOOP         NOT A MATCH                           WEJ 01557*35
         B     DDLOOP         ALWAYS BRANCH BYPASSING COUNT CHANGE  WEJ 01558*38
*        TM    JOBIND,JOBPROD PRODUCTION JOB?                       WEJ 01559*28
*        BZ    DDLOOP         NO DO NOT CHANGE                      WEJ 01560*28
         CLC   C#SORTWK,TDDN  IS DDNAME IS SORTWKXX                 WEJ 01561*14
         BE    DDLOOP         YES, LOOP                             WEJ 01562*19
         LR    R3,R1          SAVE TABLE POINTER IN R3              WEJ 01563*33
         L     R4,PARMADDR    POINT TO BEGINNING AGAIN              WEJ 01564*19
         LA    R14,4(R2,R4)   POINT TO NEXT PARM (CURR + 1 BYTE TXT WEJ 01565*33
*                             LENGTH + TEXT LENGTH + 1 BYTE KEY +   WEJ 01566*32
*                             1 BYTE COUNT FIELD)                   WEJ 01567*32
         LH    R5,STRLTH      GET LENGTH OF TEXT                    WEJ 01568*30
         LA    R15,2(,R5)     GET TEXT LENGTH PLUS 2 AND SAVE       WEJ 01569*24
         STH   R15,STRLTH       RESULT                              WEJ 01570*30
         LA    R5,STRDKEY(R5) SIZE OF MOVE = (CURR SIZE + START OF  WEJ 01571*28
         SLR   R5,R14                         DD POINTER - NEXT     WEJ 01572*26
         BCTR  R5,R0                          PARM POINTER -1)      WEJ 01573*35
         LR    R15,R5         PUT SIZE OF MOVE IN BOTH R5 AND R15   WEJ 01574*24
         MVCL  R4,R14         MOVE THE FIELD USING MVCL, NOTE THAT  WEJ 01575*19
*                             R4 WILL POINT TO THE END OF TEXT      WEJ 01576*19
         MVC   0(L'C#UNITC,R4),C#UNITC  MOVE KEY AND 1ST PARMS      WEJ 01577*19
         EX    R2,MOVE23      MOVE THE UNIT NAME FROM TABLE         WEJ 01578*19
         LA    R2,1(,R2)      GET TRUE SIZE                         WEJ 01579*33
         STC   R2,2(,R4)      SAVE THE SIZE IN THE TEXT             WEJ 01580*33
         LA    R4,L'C#UNITC+1(R2,R4) POINT TO COUNT SUB PARM        WEJ 01581*33
         MVC   0(L'C#UNITCC,R4),C#UNITCC  MOVE SIZE AND END KEY     WEJ 01582*19
         MVC   1(1,R4),0(R3)  MOVE IN UNIT COUNT                    WEJ 01583*33
         L     R4,PARMADDR    RESTORE PTR TO START OF SHIFTED DD    WEJ 01584*19
         B     DDPARM         GO TO REUSE SAME PARM POSITION        WEJ 01585*24
UNITCTCK DS    0H                                                       01586*19
         LA    R4,1(R3,R4)    INCREMENT TO THE COUNT POSITION       WEJ 01587*25
         CH    R5,H#2         CHECK IF UNIT COUNT POSSIBLE          WEJ 01588*19
         BL    DDLOOP                                               WEJ 01589*19
         ICM   R3,1,0(R4)     GET LENGTH OF SECOND PARM             WEJ 01590*19
         BZ    UNITLOO2                                             WEJ 01591*19
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01592**8
         CLI   1(R4),C'P'     PARALLEL MOUNTING?                        01593*19
         BNE   UNITCT1        NO, BRANCH                                01594
         MVI   UNITCOUN,C'P'  SET UNIT COUNT TO 'P'                     01595
         B     UNITLOO2                                                 01596*19
*********************************************************************** 01597
*        PROCESS UNIT COUNT                                           * 01598
*********************************************************************** 01599
UNITCT1  DS    0H                                                       01600*19
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01601**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01602**6
         BNZ   UNITLOO3       NOT NUMERIC                           WEJ 01603**5
         EX    R3,PACK1       PACK UNIT COUNT                           01604
         LA    R3,1(,R3)      MAKE ORIG LENGTH                          01605
         CVB   R15,DOUBLE     CONVERT UNIT COUNT TO BIN                 01606
         STC   R15,UNITCOUN   SAVE UNIT COUNT                           01607
UNITLOO2 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY                   01608*19
         CH    R5,H#3         CHECK IF 3RD PARAM                        01609*19
         BNE   DDLOOP         IF NOT BYPASS                         WEJ 01610*19
         ICM   R3,1,0(R4)     GET SIZE OF 3RD PARAM                 WEJ 01611*19
         BZ    DDLOOP         IF ZERO BYPASS                        WEJ 01612*19
         CH    R3,H#8         IS IT GREATER THAN 8                  WEJ 01613*19
         BH    DUNITER        YES, GO TO PRINT SIZE MESSAGE         WEJ 01614*19
         B     DDLOOP         GET NEXT PARAM                        WEJ 01615*19
UNITLOO3 LA    R15,P@25       SET ERROR NUMBER                          01616
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01617**7
         B     DDLOOP         GET OUT                                   01618
         EJECT                                                          01619
*********************************************************************** 01620
*        DD UNIT=AFF                                                  * 01621
*********************************************************************** 01622
DAFF     CLI   0(R4),AFFMK    SEE IF UNIT=AFF= KEY                      01623*19
         BNE   DVOL           NO, BRANCH                                01624
         MVC   REFERBCK,BLANKS   BLANK ENTIRE FIELD                     01625
         LA    R4,2(,R4)      LOAD ADDR OF AFF FIELD                    01626*19
         SLR   R3,R3          CLEAR REG FOR ICM                         01627
         ICM   R3,1,0(R4)     LOAD LENGTH OF DDNAME                     01628*19
         BZ    DDLOOP         ZERO, NO AFF, GET NEXT PARAM              01629
         CH    R3,H#8         SEE IF LENGTH > 8                         01630
         BNH   DAFF01         NO, CONTINUE                              01631
         LA    R15,P@24       SET ERROR NUMBER                          01632
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01633**7
         B     DDLOOP         GET OUT                                   01634
DAFF01   DS    0H                                                       01635
         BCTR  R3,0           MAKE MACHINE LENGTH                       01636
         EX    R3,MOVE10      MOVE DDNAME TO REFERBACK FIELD            01637
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY                 01638
         MVI   UNITIND,UNITFND SET UNIT FOUND IND                       01639
AFFLOOP  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                01640
         CLI   ENTRYTYP,TYPEND END OF TABLE?                            01641
         BE    DDLOOP          YES, BRANCH                              01642
         CLC   REFDDN,DDDN     MATCH DDNAME?                            01643
         BE    AFFOUND         YES, BRANCH                              01644
         B     AFFLOOP         LOOP                                     01645
AFFOUND  OC    UNITIND,DTYPE   SET UNIT TYPE FROM PREV                  01646
         OI    UNITIND,AFF     TURN ON FOUND BY AFF IND                 01647
         B     DDLOOP          GO PROCESS NEXT ENTRY                    01648
         SPACE 4                                                        01649
*********************************************************************** 01650
*        DD VOL                                                       * 01651
*********************************************************************** 01652
DVOL     CLI   0(R4),VOLUMEK  SEE IF VOL= KEYWORD                       01653*19
         BNE   DSER           NO, BRANCH                                01654
         SLR   R5,R5                                                    01655*19
         ICM   R5,1,1(R4)     LOAD NUM OF SUBPARAMS                     01656*19
         BZ    DDLOOP         YES, GO GET NEXT PARAM                    01657
         CH    R5,H#4         SEE IF AT LEAST 4 PARAMS                  01658*19
         BL    DDLOOP         LESS THAN 4, NONE NEEDED                  01659
         BNH   DVOL01         NO, CONTINUE                              01660
         LA    R15,P@26       SET ERROR NUMBER                          01661
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01662**7
         B     DDLOOP         GET OUT                                   01663
*********************************************************************** 01664
*        WE NEED ONLY THE 4TH PARAM (VOL COUNT)                       * 01665
*********************************************************************** 01666
DVOL01   DS    0H                                                       01667
         SLR   R2,R2          ZERO WORK REG                             01668*24
         LA    R4,2(,R4)      LOAD START OF SUBPARAMS                   01669*19
VOLOOP1  LA    R2,1(,R2)      ADD 1 TO COUNTER                          01670**4
         SLR   R3,R3          CLEAR REG FOR IC                          01671
         IC    R3,0(,R4)      LOAD LENGTH OF SUBPARAM                   01672*19
         CH    R2,H#4         SEE IF 4TH PARAM                          01673**4
         BL    VOLOOP3        LESS THAN 4, GO GET NEXT                  01674
         BH    DDLOOP         GREATER THAN 4, GET OUT                   01675
         LTR   R3,R3          TEST LENGTH                               01676
         BZ    DDLOOP         ZERO, GET OUT                             01677
         CH    R3,H#8         SEE IF LENGTH > 8                         01678
         BNH   VOLOOP1A       NO, CONTINUE                              01679
         LA    R15,P@26       SET ERROR NUMBER                          01680
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01681**7
         B     DDLOOP         GET OUT                                   01682
VOLOOP1A DS    0H                                                       01683
         LR    R15,R2         SAVE SUBPARAM COUNT                   WEJ 01684**5
*********************************************************************** 01685
*        CHECK VOLUME COUNT FOR NUMERIC                               * 01686
*********************************************************************** 01687
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01688**5
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01689**5
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01690**6
         BNZ   VOLOOP4        NOT NUMERIC                           WEJ 01691*13
         EX    R3,PACK1       PACK VOLUME COUNT                         01692
         LR    R2,R15         RESTORE SUBPARAM COUNT                WEJ 01693**5
         LA    R3,1(,R3)      RESTORE LENGTH                            01694
         CVB   R15,DOUBLE     CONVERT VOL COUNT TO BIN                  01695
         STC   R15,VOLCNT     SAVE VOL CNT                              01696
VOLOOP3  LA    R4,1(R3,R4)    INCRMENT TO NEXT POS SUBPARAM             01697*19
         B     VOLOOP1        LOOP                                      01698
VOLOOP4  LA    R15,P@27       SET ERROR NUMBER                          01699
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01700**7
         B     DDLOOP         GO GET NEXT PARM                          01701
         EJECT                                                          01702
*********************************************************************** 01703
*        DD VOL=SER                                                   * 01704
*********************************************************************** 01705
DSER     CLI   0(R4),SERMK    SEE IF VOL=SER= KEYWORD                   01706*19
         BNE   DREF           NO, BRANCH                                01707
*********************************************************************** 01708
*        ALL WE NEED IS THE NUMBER OF VOL/SER'S                       * 01709
*        AND THE 1ST VOLSER IN THE LIST IF PRESENT                    * 01710
*********************************************************************** 01711
         SLR   R5,R5          CLEAR REGISTER 5                          01712*19
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  01713*19
         STC   R5,SERCNT      SAVE NUMBER OF VOL/SER'S                  01714*19
         BZ    DDLOOP         ZERO SUBPARAMS, GET OUT                   01715
         SLR   R3,R3          CLEAR REGISTER 3                          01716
         ICM   R3,1,2(R4)     LOAD LEN OF 1ST VOLSER                    01717*19
         BZ    DDLOOP         NULL VOLSER, GET OUT                      01718
         CH    R3,H#6         SEE IF MAX LEN EXCEEDED                   01719
         BNH   DSER01         NO, BRANCH                                01720
         LA    R15,P@28       SET ERROR NUMBER                          01721
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01722**7
         B     DDLOOP         GET OUT                                   01723
DSER01   DS    0H                                                       01724
         BCTR  R3,0           MAKE MACHINE LENGTH                       01725
         EX    R3,MOVE13      MOVE 1ST VOLSER TO SAVE                   01726
         B     DDLOOP         GO GET NEXT PARAM                         01727
         SPACE 4                                                        01728
*********************************************************************** 01729
*        DD VOL=REF                                                   * 01730
*********************************************************************** 01731
DREF     CLI   0(R4),REFMK    SEE IF VOL=REF= KEYWORD                   01732*19
         BNE   DLABEL         NO, BRANCH                                01733
         SLR   R5,R5          CLEAR REG FOR ICM                         01734*19
         ICM   R5,1,2(R4)     LOAD 'LENGTH' OF REFERBACK                01735*19
         BZ    DDLOOP         ZERO LENGTH, NULL, BRANCH                 01736
         BP    DREF00         HIGH BIT NOT ON, NOT A REFERBACK          01737
         BAL   R14,REFBACK    GO TO REFERBACK ROUTINE                   01738
         OI    UNITIND,UNITFND SET UNIT FOUND IND                       01739*12
         OC    UNITIND,REFUNIT SAVE UNIT OF PREV DD                     01740
         MVC   TVOLSER,REFVOL SAVE REFERBACK VOLSER                     01741
         B     DDLOOP         GO GET NEXT PARAM                         01742
*********************************************************************** 01743
*        AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED      * 01744
*        DATA SET.                                                    * 01745
*********************************************************************** 01746
DREF00   CH    R5,H#44        SEE IF LENGTH OF DSNAME EXCEEDS MAX       01747*19
         BNH   DREF00A        NO, BRANCH                                01748
         LA    R15,P@34       SET ERROR NUMBER                          01749
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01750**7
         B     DDLOOP         GET OUT                                   01751
DREF00A  DS    0H                                                       01752
         MVC   LDSN,BLANKS    BLANK DSNAME                              01753
         BCTR  R5,0           MAKE MACHINE LENGTH                       01754*19
         EX    R5,MOVE17      MOVE DSNAME TO SAVE                       01755*19
         L     R7,FIRSTENT    LOAD START OF TABLE                       01756
         LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY                  01757
DREF01   CLI   ENTRYTYP,TYPEDD  SEE IF DD ENTRY                         01758
         BE    DREF02         YES, GO SEE IF MATCH                      01759
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE                     01760
         BE    DREF05         NOT FOUND, GO CHECK CATALOG               01761
         B     DREF03         LOOP                                      01762
DREF02   CLC   DDSN,3(R4)     SEE IF SAME DSNAME                        01763*19
         BE    DREF04         YES, CHARGE FOR THE DSNAME                01764
DREF03   LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                01765
         B     DREF01         LOOP UNTIL DONE                           01766
DREF04   DS    0H                                                       01767*12
*        OI    UNITIND,UNITFND SET UNIT FOUND IND                       01768*12
         OC    UNITIND,DTYPE  SAVE UNIT TYPE FROM TABLE                 01769
         MVC   TVOLSER,DVOLSER SAVE VOLSER FROM TABLE                   01770
         B     DDLOOP         GO GET NEXT PARAM                         01771
DREF05   BAL   R2,LOCATE      GO READ CATALOG                           01772**4
         LTR   R15,R15        TEST RETURN CODE                          01773
         BNZ   DDLOOP         NOT CATALOGED, IGNORE IT                  01774
         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES?                WEJ 01775
         BE    DDLOOP         NO, IGNORE IT                             01776
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          01777
         BE    DDLOOP         NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    01778
         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT                         01779
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  01780
         TM    UCBTYP3,X'80'  TAPE UNIT?                                01781
         BO    DREF06         YES, BRANCH                               01782
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         01783**4
         B     DDLOOP         GO GET NEXT PARAM                         01784
DREF06   OI    UNITIND,TAPE   TURN ON TAPE IND                          01785
         B     DDLOOP         GO GET NEXT PARAM                         01786
         SPACE 6                                                        01787
*********************************************************************** 01788
*        DD LABEL                                                     * 01789
*********************************************************************** 01790
DLABEL   CLI   0(R4),LABELK   SEE IF LABEL= KEYWORD                     01791*19
         BNE   DEXPDT         NO, BRANCH                                01792
         SLR   R5,R5          CLEAR REG FOR ICM                         01793*19
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01794*19
         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMETERS           01795*19
         BL    DDLOOP         NO, BRANCH                                01796
         SLR   R3,R3          CLEAR REG FOR ICM                         01797
         ICM   R3,1,2(R4)     LOAD LENGTH OF FIRST SUBPARAM             01798*19
         LA    R4,3(R3,R4)    LOAD START ADDR OF SECOND SUBPARAMETER    01799*19
         ICM   R3,1,0(R4)     LOAD LENGTH OF SECOND SUBPARAM            01800*19
         CLC   C#BLP,1(R4)  SEE IF BLP PROCESSING                       01801*19
         BNE   DDLOOP         NO, GET OUT                               01802
*********************************************************************** 01803
*        DO NOT ALLOW BLP                                             * 01804
*********************************************************************** 01805
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM  ALLOWED?  01806
         BM    DDLOOP         YES, GET OUT                              01807
         B     DDLOOP         ALLOW EVERYONE TO USE BLP      OVERRIDE   01808
         LA    R15,P@44       SET ERROR NUMBER                          01809
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01810**7
         B     DDLOOP         GET OUT                                   01811
         EJECT                                                          01812
*********************************************************************** 01813
*        DD LABEL=EXPDT                                               * 01814
*********************************************************************** 01815
DEXPDT   CLI   0(R4),EXPDTMK  SEE IF LABEL=EXPDT KEYWORD                01816*19
         BNE   DINTRDR        NO, BRANCH                                01817
         SLR   R5,R5          CLEAR REG FOR ICM                         01818*19
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01819*19
         BZ    DDLOOP         ZERO, NULL, BRANCH                        01820
         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS              01821*19
         SLR   R3,R3          CLEAR REG FOR ICM                         01822
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST SUBPARAM             01823*19
         CH    R3,H#5         SEE IF LENGTH = 5                         01824
         BNE   DDLOOP         NO, GET OUT                               01825
         CLC   C#98000,1(R4)  SEE IF EXPDT=98000                        01826*19
         BNE   DDLOOP         NO, GET OUT                               01827
*********************************************************************** 01828
*        DO NOT ALLOW EXPDT=98000 UNLESS AUTHORIZED                   * 01829
*********************************************************************** 01830
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01831
         BM    DDLOOP         YES, GO TO DDLOOP                     WEJ 01832
         LA    R15,P@45       SET ERROR NUMBER                          01833
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01834**7
         B     DDLOOP         GO TO DDLOOP                          WEJ 01835
DDSMF1   DS    0H                                                   WEJ 01836
         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       01837
         B     DDLOOP         GET OUT                                   01838
         SPACE 4                                                        01839
*********************************************************************** 01840
*        DD SYSOUT                                                    * 01841
*********************************************************************** 01842
DINTRDR  CLI   0(R4),SYSOUTK  SEE IF SYSOUT= KEYWORD                    01843*19
         BNE   DDQNAME        NO, CHECK FOR QNAME                   WEJ 01844
         SLR   R5,R5          ZERO OUT R5                           WEJ 01845*19
         ICM   R5,1,1(R4)     GET NUMBER OF POSITIONAL SUB PARAMS.      01846*19
         BZ    DDLOOP         IF NONE, GET NEXT PARAM.                  01847
         CH    R5,H#3         ARE THERE 3 PARAMETERS                    01848*19
         BNE   DDLOOP         NO, THERE IS NO FORM, GET NEXT PARAM      01849
         SLR   R3,R3          ZERO OUT REGISTER 3                       01850
         ICM   R3,1,2(R4)     GET LENGTH OF FIRST PARAMETER             01851*19
         LA    R4,3(R3,R4)    POINT TO LENGTH OF NEXT PARAM             01852*19
         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM                  01853*19
         LA    R4,1(R3,R4)    POINT TO LENGTH OF NEXT PARM (FORM-ID)    01854*19
         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM                  01855*19
         BZ    DDLOOP         IF ZERO, GO TO GET NEXT PARAM             01856
         CH    R3,H#8         IS LENGTH GREATER THAN 8                  01857
         BNH   DDMVFORM       NO, GO TO MOVE FORM                       01858
         LA    R15,P@38       SET ERROR POSITION                        01859
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     01860**7
         B     DDLOOP         GET NEXT PARAMETER                        01861
DDMVFORM DS    0H                                                       01862
         EX    R3,DDMVFRM     MOVE FORM-ID AND LENGTH TO SAVE AREA      01863
         B     DDLOOP         GET NEXT PARAMETER                        01864
DDMVFRM  MVC   SAVEFORM(0),0(R4)  EXECUTED MOVE OF FORM AND ITS LENGTH  01865*19
*********************************************************************** 01866
*        DD QNAME                                                     * 01867
*********************************************************************** 01868
DDQNAME  DS    0H                                                       01869
         CLI   0(R4),QNAMEK   SEE IF QNAME= PARAMETER               WEJ 01870*19
         BNE   DDFCB          IF NOT, CHECK FOR FCB=                WEJ 01871
         SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ 01872*19
         ICM   R5,1,1(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ 01873*19
         BZ    DDLOOP         NONE, GET NEXT PARAMETER              WEJ 01874
         MVI   SMFRTYPE,X'F7' SET RECORD TYPE FOR QNAME USE REC.    WEJ 01875
         SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ 01876
         IC    R3,2(,R4)      GET LENGTH                                01877*19
         MVC   SAVEQNM,BLANKS BLANK OUT SAVE QNAME                  WEJ 01878
         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ 01879*19
         BH    QERRORL        GO TO FLAG QNAME GREATER THAN 8       WEJ 01880
         CLI   2(R4),X'00'    IS FIELD LENGTH 0                     WEJ 01881*19
         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ 01882
         BCTR  R3,R0          ADJUST FOR EXECUTED MOVE              WEJ 01883
         EX    R3,QNMMOVE     MOVE QNAME                            WEJ 01884
         CLI   2(R4),X'02'    IS FIELD LENGTH 2                     WEJ 01885*19
         BE    QCHECK1        YES, CHECK FOR QUEUES PH AND PQ       WEJ 01886
         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ 01887*19
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ 01888
         CLC   C#ADMMSG,3(R4)     IS QUEUE ADMINMSG                 WEJ 01889*19
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ 01890
         CLI   TCMCLASS,C'L'  IS CLASS FORCE ALREADY = 'L'          WEJ 01891
         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ 01892
         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ 01893
         BNE   QERROR         NO, GO TO ERROR                       WEJ 01894
         MVI   TCMCLASS,C'L'  MOVE 'L' TO TCMCLASS                  WEJ 01895
         B     DDSMF1         GET NEXT PARAMETER                    WEJ 01896
QNMMOVE  MVC   SAVEQNM(0),3(R4)  EXECUTED MOVE OF QNAME             WEJ 01897*19
QCHECK1  DS    0H                                                   WEJ 01898
         CLC   C#PH,3(R4)     IS QUEUE PH                           WEJ 01899*19
         BE    QCHECK1A       YES, BYPASS NEXT COMPARE              WEJ 01900
         CLC   C#PQ,3(R4)     IS QUEUE PQ                           WEJ 01901*19
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE         WEJ 01902
QCHECK1A DS    0H                                                       01903
         CLI   TCMCLASS,C'J'  IS CLASS FORCE ALREADY = 'J'          WEJ 01904
         BE    DDSMF1         YES, GO LOG                           WEJ 01905
         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ 01906
         BNE   QERROR         NO, GO TO ERROR                       WEJ 01907
         MVI   TCMCLASS,C'J'  MOVE 'J' TO TCMCLASS                  WEJ 01908
         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01909
QERROR   DS    0H                                                   WEJ 01910
         LA    R15,P@50       SET ERROR NUMBER                      WEJ 01911
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 01912**7
         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01913
QERRORL  DS    0H                                                   WEJ 01914
         LA    R15,P@49       SET ERROR NUMBER                      WEJ 01915
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 01916**7
         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01917
* * *    B     DDSMF1         GO LOG                                WEJ 01918
* * *    B     DDLOOP         GET NEXT PARAMETER                    WEJ 01919
DDFCB    DS    0H                                                       01920
         CLI   0(R4),FCBK     IS THIS FCB=                              01921*19
         BNE   DDLOOP         NO, GET NEXT PARAMETER                    01922
         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO YES                 01923
         B     DDLOOP                                                   01924
         SPACE 4                                                        01925
*********************************************************************** 01926
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 01927
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 01928
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 01929
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 01930
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 01931
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 01932
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 01933
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 01934
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 01935
*        SINGLE SUBPARAMETER.                                         * 01936
*********************************************************************** 01937
DDLOOP   L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        01938*19
         SLR   R2,R2          CLEAR REGISTER FOR ICM                    01939**4
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01940*19
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   01941*19
         BNZ   DDLOOP1        OK, BRANCH INTO ROUTINE                   01942
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                01943*19
         B     DDLOOP5        AND GET OUT OF ROUTINE                    01944
DDLOOP1  LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01945*19
DDLOOP2  SLR   R5,R5          CLEAR REGISTER FOR ICM                    01946*19
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     01947*19
         BNM   DDLOOP3        HIGH BIT NOT ON, ONLY 1 PARAMETER         01948
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              01949*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01950*19
         B     DDLOOP4        BRANCH                                    01951
DDLOOP3  LA    R5,1           SET PARAM COUNT TO 1                      01952*19
DDLOOP4  SLR   R3,R3          CLEAR REGISTER FOR ICM                    01953
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     01954*19
         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       01955*19
         BCT   R5,DDLOOP4     LOOP UNTIL PROCESSED ALL PARMS            01956*19
         BCT   R2,DDLOOP2     LOOP UNTIL PROCESSED ALL PARMS            01957**4
DDLOOP5  ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           01958*19
         B     DDPARM         CONTINUE                                  01959
         EJECT                                                          01960
*********************************************************************** 01961
*        THIS IS WHERE WE LOOK AT WHAT WE HAVE FOUND OUT ABOUT THE    * 01962
*        DD STATEMENT WE HAVE JUST FINISHED PROCESSING.               * 01963
*        THE FOLLOWING ARE LOOKED AT                                  * 01964
*          1)  THE DISPOSITION FOR SOME DATA SETS                     * 01965
*              MUST BE AUTHORIZED FOR OTHER THAT SHR                  * 01966
*          2)  THE TEMPORARY ENTRY MUST BE SAVED IF UNIT IS A TAPE    * 01967
*              OR A PRIV UNIT.                                        * 01968
*          3)  IF THE ENTRY IS A TAPE OR PRIV, THE UNIT COUNT MUST BE * 01969
*              ADDED TO THE RUNNING COUNT FOR THE STEP.               * 01970
*********************************************************************** 01971
*                                                                       01972
*********************************************************************** 01973
*        FORCE FCB, IF FCB NOT PRESENT AND SYSOUT=(CLASS,,FORM)       * 01974
*********************************************************************** 01975
DDEND    DS    0H                                                       01976
         CLI   FCBFLAG,C'Y'       WAS FCB= FOUND                        01977
         BE    DDEND10            YES                                   01978
         CLI   SAVEFMLN,X'04'     IS SAVE FORM LENGTH > 4               01979
         BNH   DDEND01            NO, DO NOT FORCE LENGTH               01980
         MVI   SAVEFMLN,X'04'     FORCE LENGTH OF 4                     01981
DDEND01  DS    0H                                                       01982
         SLR   R3,R3              ZERO OUT REGISTER 3                   01983
         ICM   R3,1,SAVEFMLN      LOAD LENGTH                           01984
         BZ    DDEND10            BYPASS IF LENGTH ZERO                 01985
         MVI   0(R4),FCBK         OVERLAY END KEY WITH FCB KEY          01986*19
         MVI   1(R4),1            SET NUMBER OF SUB PARAMETERS TO 1     01987*19
         EX    R3,MVDDFCB         MOVE SAVED FORM (FCB)                 01988
         LA    R3,3(,R3)          GET SIZE OF ADDITION                  01989
         LA    R4,0(R3,R4)        POINT TO NEW LOCATION OF ENDKEY       01990*19
         MVI   0(R4),ENDK         MOVE END KEY TO NEW POSITION          01991*19
         SLR   R0,R0              ZERO OUT REGISTER 1                   01992
         ICM   R0,B'0011',STRLTH  GET STRING LENGTH FOR INCREMENT       01993
         ALR   R0,R3              INCREMENT LENGTH                      01994
         STCM  R0,B'0011',STRLTH  SAVE INCREMENTED LENGTH               01995
         B     DDEND10                                                  01996
MVDDFCB  MVC   2(0,R4),SAVEFORM   MOVE SAVED FORM                       01997*19
*********************************************************************** 01998
*        DO NOT ALLOW A DISP OF "DELETE" FOR SYSTEM DATA SETS.        * 01999
*********************************************************************** 02000
DDEND10  DS    0H                                                       02001
         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET                     02002
         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ 02003
         CLC   TDSN(5),C#SYS2 SEE IF SYS2. DATA SET                     02004
         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ 02005
         CLC   TDSN(3),C#LD    SEE IF LD. DATA SET                  WEJ 02006
         BNE   DDEND40        NO, BRANCH TO NEXT CHECK              WEJ 02007
DDEND20  TM    DISPIND,DELETE SEE IF DISP=DELETE                        02008
         BNO   DDEND30        NO, BRANCH                                02009
         TM    JOBIND,JOBTECH                 IS JOB AUTHORIZED     WEJ 02010
         BZ    DDEND35        NO, GO TO ERROR MESSAGE                   02011
*********************************************************************** 02012
*        DO NOT ALLOW A DISP OF MOD FOR SYSTEM DATA SETS           WEJ* 02013
*                                                                  WEJ* 02014
*********************************************************************** 02015
DDEND30  TM    DISPIND,MOD    SEE IF DISP=MOD                       WEJ 02016
         BZ    DDEND40        NO   BRANCH                           WEJ 02017
*        IF DISP = MOD, JOB MUST BE AUTHORIZED                      WEJ 02018
         TM    JOBIND,JOBTECH                IS JOB AUTHORIZED      WEJ 02019
         BO    DDEND40        YES, BRANCH                               02020
DDEND35  LA    R15,P@29       SET ERROR NUMBER                          02021
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02022**7
*********************************************************************** 02023
*        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST          * 02024
*        BE SEARCHED FOR IN THE FOLLOWING ORDER:                      * 02025
*                                                                     * 02026
*        1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE       * 02027
*            DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A           * 02028
*            PREVIOUS DD STATEMENT.                                   * 02029
*        2)  THE SYSTEM CATALOG                                       * 02030
*                                                                     * 02031
*********************************************************************** 02032
DDEND40  CLI   UNITIND,X'00'  SEE IF UNIT HAS BEEN DETERMINED           02033
         BNE   DDEND150       YES, BRANCH                               02034
         CLI   TDSN,C' '      SEE IF DSN SPECIFIED                      02035
         BE    DDEND150       NOT SPECIFIED, GET OUT                    02036
         CLI   TVOLSER,X'00'  SEE IF VOLSER SPECIFIED                   02037
         BE    DDEND45        NO, GO SEARCH TABLE AND/OR CATALOG        02038
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         02039**4
         B     DDEND150       GET OUT                                   02040
DDEND45  TM    DISPIND,NEW    SEE IF THIS IS A NEW DATASET              02041
         BO    DDEND150       YES, VOLSER WILL BE A WORK PACK           02042
         L     R7,FIRSTENT    LOAD ADDR OF START OF TABLE               02043
*********************************************************************** 02044
*        SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT              * 02045
*********************************************************************** 02046
DDEND50  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02047
         CLI   ENTRYTYP,TYPEND END OF TABLE?                            02048
         BE    DDEND60        YES, GO CHECK CATALOG                     02049
         TM    ENTRYTYP,TYPEDD DD ENTRY?                                02050
         BNO   DDEND50        NO, LOOP                                  02051
         CLC   DDSN,TDSN      DSN MATCH?                                02052
         BNE   DDEND50        NO, LOOP                                  02053
         OC    UNITIND,DTYPE  SAVE UNIT INFO                            02054
         MVC   TVOLSER,DVOLSER SAVE VOLSER INFO                         02055
         B     DDEND150       GET OUT                                   02056
*********************************************************************** 02057
*        SEARCH CATALOG FOR UNIT INFO                                 * 02058
*********************************************************************** 02059
DDEND60  DS    0H                                                       02060
         AIF   ('&CAMLST' EQ 'YES').CAML1                               02061
         B     DDEND150       BYPASS CAMLST NOP                         02062
.CAML1   ANOP                                                           02063
         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET                     02064
         BE    DDEND150       YES, NO NEED TO CAMLST                    02065
         TM    STRDINDC,DTXSYOUT SEE IF DD OUTPUT SPOOL FILE            02066
         BO    DDEND150       YES, NO NEED TO CAMLST                    02067
         TM    JOBIND,JOBSTC                   IS LOCATE NEEDED?    WEJ 02068
         BO    DDEND150       YES, NO NEED TO CAMLST                WEJ 02069
         MVC   LDSN,TDSN      SAVE DSNAME                               02070
         BAL   R2,LOCATE      GO READ CATALOG                           02071**4
         LTR   R15,R15        TEST RETURN CODE                          02072
         BZ    DDEND70        ZERO, BRANCH                              02073
         CH    R15,H#8        DSNAME NOT FOUND OR GDG LEVEL?            02074
         BE    DDEND90        YES, BRANCH                               02075
DDEND70  CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ 02076
         BE    DDEND150       NO, BRANCH                                02077
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          02078
         BE    DDEND150       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    02079
         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT                         02080
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  02081
         TM    UCBTYP3,X'80'  TAPE UNIT?                                02082
         BZ    DDEND150       NO, GET OUT                               02083
DDEND80  OI    UNITIND,TAPE   TURN ON TAPE IND                          02084
         B     DDEND150       BYPASS ROUTINES                           02085
         EJECT                                                          02086
*********************************************************************** 02087
*        DATA SET NOT FOUND, MAY BE GDG LEVEL                         * 02088
*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               * 02089
*********************************************************************** 02090
DDEND90  MVC   SVC26DS,LDSN   MOVE DSNAME TO SVC26 AREA                 02091
         LA    R1,43          LOAD MAXIMUM LENGTH OF DSN                02092
         LA    R14,SVC26DS+42 LOAD ADDRESS OF END OF DSN                02093
DDEND100 CLI   0(R14),C' '    SEE IF LAST CHAR DSN                      02094
         BNE   DDEND110       YES, BRANCH                               02095
         BCTR  R14,0          BACK UP DSN POINTER 1 POSITION            02096
         BCT   R1,DDEND100    LOOP UNTIL FOUND                          02097
DDEND110 LTR   R1,R1          TEST LENGTH                               02098
         BZ    DDEND150       ZERO, NO DSN, BRANCH                      02099
         STC   R1,SVC26DSL    SAVE LENGTH OF DSN                        02100
         XC    CTGPL,CTGPL    ZERO PARM LIST                            02101
         MVI   CTGPL,B'00000111' SET CTGOPTN1                           02102
         MVI   CTGPL+2,B'00010001' SET CTGOPTN3                         02103
         LA    R1,SVC26DSN    LOAD ADDRESS OF DSNAME                    02104
         ST    R1,CTGPL+4     SET CTGENT                                02105
         XC    CTGPL+8(4),CTGPL+8 ZERO CTGCAT                           02106
         XC    CTGPL+18(4),CTGPL+18 ZERO CTGPSWD                        02107
         LH    R1,H#5000      LOAD LENGTH OF WORK AREA                  02108
         STH   R1,SVC26WRK    AND SAVE IT WORK AREA                     02109
         LA    R1,SVC26WRK    LOAD ADDRESS OF WORK AREA                 02110
         ST    R1,CTGPL+12    SET CTGWKA                                02111
         LA    R1,CTGPL       LOAD ADDRESS OF WORK AREA                 02112
         SVC   26             CALL CATALOG GENERIC SEARCH               02113
         LTR   R15,R15        TEST RETURN CODE                          02114
         BNZ   DDEND150       NOT ZERO, BRANCH                          02115
*********************************************************************** 02116
*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.  CHECK TO SEE      * 02117
*        IF GDG LEVEL.                                                * 02118
*********************************************************************** 02119
         LH    R14,SVC26WRK+2 LOAD LENGTH OF AREA+4                     02120
         SH    R14,H#4        SUBTRACT LENGTH OF PREFIX                 02121
         SRDA  R14,32         SHIFT TO ODD REGISTER OF PAIR             02122
         D     R14,F#45       DIVIDE BY LENGTH OF EACH ENTRY            02123
         LTR   R5,15          TEST NUMBER OF DSNAMES RETURNED           02124*19
         BZ    DDEND150       ZERO, NONE                                02125
         BM    DDEND150       NEGATIVE, ERROR                           02126
         LA    R4,SVC26WRK+4  POINT TO FIRST DSN                        02127*19
         CLI   0(R4),C'B'     IS THIS A GDG BASE (VSAM CATALOG ONLY)    02128*19
         BE    DDEND140       YES, BRANCH                               02129
         CLI   0(R4),C'A'     IS THIS A NONVSAM ENTRY                   02130*19
         BNE   DDEND150       NO, BRANCH                                02131
         SLR   R15,R15        ZERO, REGISTER FOR IC                     02132
         IC    R15,SVC26DSL   LOAD BASE DSN LENGTH                      02133
         LA    R15,2(R15,R4)  POINT PAST TYPE, BASE, AND '.'            02134*19
         CLI   0(R15),C'G'    POSSIBLE GDG                              02135
         BNE   DDEND150       NO, BRANCH                                02136
         CLI   5(R15),C'V'    POSSIBLE GDG                              02137
         BNE   DDEND150       NO, BRANCH                                02138
         CLI   8(R15),C' '    POSSIBLE GDG                              02139
         BNE   DDEND150       NO, BRANCH                                02140
         MVC   DOUBLE,0(R15)  SAVE DSN SUFFIX                           02141
         OC    DOUBLE,GDGMASK TEST NUMERIC POSITIONS                    02142
         CLC   DOUBLE,0(R15)  SEE IF CHANGED                            02143
         BNE   DDEND150       YES, NOT GDG, BRANCH                      02144
         OI    UNITIND,UNITGDG UNIT INFORMATION FROM GDG PROCESSING     02145
*********************************************************************** 02146
*        LOCATE INDIVIDUAL DATA SETS RETURNED FROM THE GENERIC        * 02147
*        LOCATE FROM SVC26.  ALL ENTRIES ARE LOCATED TO GET THE       * 02148
*        VOLUME COUNT IF 'PARALLEL' MOUNTING IS REQUESTED.            * 02149
*********************************************************************** 02150
DDEND120 MVC   LDSN,1(R4)     SAVE DSNAME                               02151*19
         BAL   R2,LOCATE      GO READ CATALOG                           02152**4
         LTR   R15,R15        TEST RETURN CODE                          02153
         BNZ   DDEND140       NOT ZERO, SOMETHINGS WRONG, LOOP          02154
         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ 02155
         BE    DDEND140       NO, BYPASS ENTRY                          02156
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          02157
         BE    DDEND140       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    02158
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  02159
         SLR   R15,R15        CLEAR REG FOR IC                          02160
         IC    R15,VOLCNT     LOAD VOLUME COUNT                         02161
         AH    R15,CAMLCNT    ADD CAMLST VOLUME COUNT                   02162
         STC   R15,VOLCNT     SAVE NEW VOLUME COUNT                     02163
         TM    UCBTYP3,X'80'  TAPE UNIT?                                02164
         BO    DDEND130       YES, BRANCH                               02165
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         02166**4
         B     DDEND140       GET OUT                                   02167
DDEND130 OI    UNITIND,TAPE   TURN ON TAPE IND                          02168
DDEND140 LA    R4,45(,R4)     INCREMENT TO NEXT ENTRY                   02169*19
         BCT   R5,DDEND120    LOOP UNTIL DONE                           02170*19
*********************************************************************** 02171
*        PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE           * 02172
*        DEVICES.                                                     * 02173
*********************************************************************** 02174
DDEND150 TM    UNITIND,TAPE   IS THIS A TAPE DD?                        02175
         BO    DDEND160       YES, BRANCH                               02176
         TM    UNITIND,PRIV   IS THIS A PRIV DD?                        02177
         BNO   DDEND240       NO, DO NOT SAVE                           02178
*********************************************************************** 02179
*        IF THIS STATEMENT REQUIRES A MOUNTABLE DISK PACK, WRITE      * 02180
*        AN ERROR MESSAGE SINCE WE NO LONGER HAVE ANY MOUNTABLE       * 02181
*        DISK PACKS.                                                  * 02182
*********************************************************************** 02183
*        LA    R15,P@48       SET ERROR NUMBER                          02184
*        BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02185**7
*********************************************************************** 02186
*        IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE        * 02187
*        FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE         * 02188
*        REFERBACKS BY SUBSEQUENT STATEMENTS.                         * 02189
*********************************************************************** 02190
DDEND160 TM    UNITIND,AFF    UNIT=AFF DD STATEMENT                     02191
         BO    DDEND230       YES, DO NOT ADD TO UNIT COUNTS            02192
         CLI   TVOLSER,X'00'  VOLSER SPECIFIED??                        02193
         BE    DDEND180       NO, BRANCH                                02194
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY                 02195
         EJECT                                                          02196
*********************************************************************** 02197
*        SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.          * 02198
*        IF SO, DO NOT CHARGE FOR THE DEVICE BUT AGAIN SAVE THE       * 02199
*        TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING             * 02200
*        STATEMENTS.                                                  * 02201
*********************************************************************** 02202
DDEND170 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02203
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE                      02204
         BE    DDEND180       YES, NO MATCH, BRANCH                     02205
         CLC   TVOLSER,DVOLSER SEE IF VOLSER ALREADY REFERENCED         02206
         BE    DDEND230       YES, DO NOT CHARGE FOR IT                 02207
         B     DDEND170       LOOP                                      02208
*********************************************************************** 02209
*        IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER       * 02210
*        OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE       * 02211
*        NUMBER OF VOLUMES.                                           * 02212
*********************************************************************** 02213
DDEND180 CLI   UNITCOUN,C'P'  SEE IF PARALLEL MOUNTING                  02214
         BE    DDEND190       YES, BRANCH                               02215
         MVC   ADDCOUNT,UNITCOUN MOVE UNIT COUNT TO COMMON              02216
         B     DDEND210       BRANCH                                    02217
DDEND190 CLC   VOLCNT,SERCNT COMPARE VOL COUNT & SERIAL CNT             02218
         BL    DDEND200       SERIAL COUNT GREATER                      02219
         MVC   ADDCOUNT,VOLCNT MOVE VOLUME COUNT TO COMMON              02220
         B     DDEND210       BRANCH                                    02221
DDEND200 MVC   ADDCOUNT,SERCNT MOVE SERIAL COUNT TO COMMON              02222
*********************************************************************** 02223
*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.         * 02224
*********************************************************************** 02225
DDEND210 SLR   R15,R15        ZERO WORK REG                             02226
         IC    R15,ADDCOUNT   MOVE UNIT COUNT TO REG                    02227
         TM    UNITIND,TAPE   IS THIS A TAPE DD?                        02228
         BO    DDEND220       YES, BRANCH                               02229
         AH    R15,PRIVCNT    ADD RUNNING COUNT TO THIS ONE             02230
         STH   R15,PRIVCNT    SAVE NEW RUNNING COUNT                    02231
         B     DDEND230       BRANCH                                    02232
DDEND220 AH    R15,TAPECNT    ADD RUNNING COUNT TO THIS ONE             02233
         STH   R15,TAPECNT    SAVE NEW RUNNING COUNT                    02234
*********************************************************************** 02235
*        SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A        * 02236
*        MOUNTABLE DEVICE TYPE.                                       * 02237
*********************************************************************** 02238
DDEND230 OC    TTYPE,UNITIND  SAVE UNIT INFO                            02239
         LH    R14,ENTCOUNT   LOAD TABLE ENTRY COUNT                    02240
         LA    R14,1(,R14)    ADD 1 TO COUNT                            02241
         CH    R14,MAXENTS    SEE IF MAXIMUM REACHED                    02242
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT         02243
         STH   R14,ENTCOUNT   STORE NEW ENTRY COUNT                     02244
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY                   02245
         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02246
         MVI   ENTRYTYP,TYPEDD SET ENTRY TO DD                          02247
         MVC   DENTRY,TENTRY  MOVE TEMPORARY ENTRY TO TABLE             02248
         MVC   DVOLSER,TVOLSER MOVE TEMP VOLSER TO TABLE                02249
         MVC   DTYPE,UNITIND  SAVE UNIT INDICATOR                       02250
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY                   02251
*********************************************************************** 02252
*        IF THE DD STATEMENT IS FOR A JOBLIB, STEPLIB, JOBCAT,        * 02253
*        OR A STEPCAT, THE DISPOSITION MUST BE "SHR".                 * 02254
*********************************************************************** 02255
DDEND240 CLC   TDDN,C#JOBLIB  SEE IF JOBLIB DD                          02256
         BE    DDEND250       YES, BRANCH                               02257
         CLC   TDDN,C#STEPLI  SEE IF STEPLIB DD                         02258
         BE    DDEND260       YES, BRANCH                               02259
         CLC   TDDN,C#JOBCAT  SEE IF JOBCAT DD                          02260
         BE    DDEND270       YES, BRANCH                               02261
         CLC   TDDN,C#STEPCA  SEE IF STEPCAT DD                         02262
         BE    DDEND270       YES, BRANCH                               02263
         B     GETNEXT        NO, GET OUT                               02264
DDEND250 DS    0H                                                       02265
DDEND260 TM    DISPIND,SHR    SEE IF DISP=SHR                           02266
         BO    GETNEXT        YES, BRANCH                               02267
         CLI   TDSN,C'&&'     IS THIS A TEMP DATASET                    02268
         BE    GETNEXT        YES DISP IS OK                            02269
         LA    R15,P@33       SET ERROR NUMBER                          02270
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02271**7
         B     GETNEXT        GET OUT                                   02272
*********************************************************************** 02273
*        IF THE DD STATEMENT IS FOR A JOBCAT OR A STEPCAT, THE        * 02274
*        JOB MUST BE AUTHORIZED.                                      * 02275
*********************************************************************** 02276
DDEND270 TM    JOBIND,JOBSTC+JOBTECH+JOBCOMM  JOBCAT/STEPCAT ALLOWED    02277
         BM    DDEND280       YES, BRANCH                               02278
         LA    R15,P@43       SET ERROR NUMBER                          02279
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02280**7
DDEND280 TM    DISPIND,SHR    SEE IF DISP=SHR                           02281
         BO    GETNEXT        YES, BRANCH                               02282
         LA    R15,P@33       SET ERROR NUMBER                          02283
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02284**7
         B     GETNEXT        GO GET NEXT TEXT RECORD                   02285
         EJECT                                                          02286
*********************************************************************** 02287
*        THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS   * 02288
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02289
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02290
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 02291
*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN * 02292
*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          * 02293
*                THE 1ST POS PARAMETER IS THE JOB STEP NAME           * 02294
*                THE 2ND POS PARAMETER IS THE PROC NAME               * 02295
*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          * 02296
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 02297
*            7)  THE REST OF THE RECORD WILL BE IGNORED               * 02298
*********************************************************************** 02299
         EJECT                                                          02300
*                                                                       02301
*********************************************************************** 02302
*        THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT       * 02303
*        EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM      * 02304
*        THE PROC CARD AND AND A POINTER SAVED TO THE START OF        * 02305
*        THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS      * 02306
*        BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED         * 02307
*        WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS      * 02308
*        ON THE EXEC CARD.                                            * 02309
*********************************************************************** 02310
         SPACE 4                                                        02311
*********************************************************************** 02312
*        SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH          * 02313
*        CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE          * 02314
*        PROCESSED.                                                   * 02315
*********************************************************************** 02316
PROCARD  EQU   *                                                        02317
PROCSTAR LR    R14,R6         SAVE ADDRESS OF CURRENT RECORD            02318
         LH    R15,STRLTH     LOAD LENGTH OF TEXT RECORD                02319
         CH    R15,H#512      SEE IF LENGTH EXCEEDS 512 BYTES           02320
         BNH   PROCSTAS       NO, BRANCH                                02321
         LA    R15,P@30       SET ERROR NUMBER                          02322
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02323**7
         B     GETNEXT        GET OUT                                   02324
PROCSTAS DS    0H                                                       02325
         LA    R0,PROCTXT     LOAD ADDR OF TEXT SAVE AREA               02326
         LR    R1,R15         LET REG 1 ALSO CONTAIN THE LENGTH         02327
         MVCL  R0,R14         MOVE TEXT STRING TO SAVE                  02328
         LA    R6,PROCTXT     POINT TO START OF COPIED TEXT             02329
         LA    R4,STREKEY     LOAD START OF TRUE TEXT                   02330*19
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02331*19
         LA    R4,1(,R4)      INCR PAST EXEC POS IND                    02332*19
         SLR   R5,R5          CLEAR REG FOR ICM                         02333*19
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              02334*19
         BNZ   PROCEND1       NOT ZERO, BRANCH                          02335
         LA    R4,1(,R4)      ZERO, INCREMENT PAST COUNT                02336*19
         B     PROCEND3       GET OUT                                   02337
*********************************************************************** 02338
*        SAVE THE PROC STEP NAME                                      * 02339
*********************************************************************** 02340
PROCEND1 LA    R4,1(,R4)      INCREMENT PAST COUNT                      02341*19
         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE            02342
         SLR   R3,R3          CLEAR REG FOR ICM                         02343
         ICM   R3,1,0(R4)     LOAD LENGTH OF JOB STEP NAME              02344*19
         BZ    PROCENDB       IF ZERO, NO JOB STEP NAME                 02345
         CH    R3,H#8         SEE IF LENGTH > 8                         02346
         BNH   PROCENDA       NO, CONTINUE                              02347
         LA    R15,P@31       SET ERROR NUMBER                          02348
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02349**7
         B     GETNEXT        GET OUT                                   02350
PROCENDA DS    0H                                                       02351
         BCTR  R3,0           MAKE MACHINE LENGTH                       02352
         EX    R3,MOVE4       MOVE STEP NAME TO SAVE AREA               02353
         LA    R3,1(,R3)      RESET R3                                  02354
PROCENDB DS    0H                                                       02355
         LA    R4,1(R3,R4)    INCREMENT PAST CTL BYTES AND STEP NM      02356*19
         BCT   R5,PROCENDC    DECREMENT BY ONE                          02357*19
         B     PROCEND3       IF NO POSITIONAL PROC-NAME GO TO KYWD     02358
PROCENDC DS    0H                                                       02359
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02360*19
         BZ    PROCENDD       IF LENGTH ZERO, ERROR                     02361*22
         CH    R3,H#8         SEE IF LENGTH > 8                         02362
         BNH   PROCENDE       NO, CONTINUE                              02363*22
PROCENDD DS    0H                                                   WEJ 02364*22
         LA    R15,P@36       SET ERROR NUMBER                          02365
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02366**7
         B     GETNEXT        GET OUT                                   02367
PROCENDE DS    0H                                                       02368*22
         BCTR  R3,0           MAKE MACHINE LENGTH                       02369
         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE         02370
         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02371
PROCEND2 ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02372*19
         LA    R4,1(R3,R4)    INCREMENT TO NEXT SUBPARAMETER            02373*19
         BCT   R5,PROCEND2    LOOP UNTIL DONE                           02374*19
*********************************************************************** 02375
*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT           * 02376
*********************************************************************** 02377
PROCEND3 DS    0H                                                       02378
         CLI   0(R4),PROCEK   IS FIRST KEYWORD KEY FOR PROC=            02379*19
         BNE   PROCEND5       NO, SAVE ADDR OF 1ST NON-PROC KEYWD       02380
         LA    R4,2(,R4)      POINT TO SIZE (NO OF SUBS ASSUMED 1)      02381*19
*              PRIOR USE WAS 1 BYTE FIELD SIZE                          02382
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02383*19
         CH    R3,H#8         SEE IF LENGTH > 8                         02384
         BNH   PROCEND4       NO, CONTINUE                              02385
         LA    R15,P@36       SET ERROR NUMBER                          02386
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02387**7
         B     GETNEXT        GET OUT                                   02388
PROCEND4 DS    0H                                                       02389
         BCTR  R3,0           MAKE MACHINE LENGTH                       02390
         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE         02391
         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02392
         LA    R4,2(R3,R4)    POINT TO NEXT KEYWORD PARAMETER           02393*19
PROCEND5 DS    0H                                                       02394
         ST    R4,PROCTEXT    SAVE ADDRESS OF FIRST KEYWORD PARM        02395*19
         B     GETNEXT        GET OUT                                   02396
         SPACE 4                                                        02397
*********************************************************************** 02398
*        IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,        * 02399
*        LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED      * 02400
*        THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR       * 02401
*        TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED         * 02402
*        ON THAT STATEMENT.                                           * 02403
*********************************************************************** 02404
PROCSEAR TM    STREINDC,ETXPROC STATEMENT FROM A PROCEDURE?             02405
         BNO   GETNEXT        NO, GET OUT                               02406
         XI    PROCIND,X'01'  FLIP-FLOP SWITCH                          02407
         BZ    GETNEXT        NOW ZERO, ALREADY PROCESSED PROC TEXT     02408
         L     R4,PROCTEXT    LOAD ADDR OF PROC TEXT                    02409*19
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02410*19
         B     EXECPARM       GO PROCESS ADDITIONAL TEXT                02411
         EJECT                                                          02412
*********************************************************************** 02413
*        THE TEXT OF THE INSTREAM PROC CARD IS AS FOLLOWS             * 02414
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02415
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02416
*********************************************************************** 02417
         SPACE 4                                                        02418
PROCINST DS    0H                                                       02419
*********************************************************************** 02420
*        CURRENTLY BYPASS ALL INTREAM PROC'S, LATER LOG THEM          * 02421
*********************************************************************** 02422
         B     GETNEXT        BYPASS CODE BECAUSE PICKING UP BAD DATA   02423
         LA    R4,STREKEY+1   POINT TO 1ST POSITIONAL PARM CNT.         02424*19
         SLR   R5,R5          CLEAR REG FOR ICM                         02425*19
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              02426*19
         BZ    GETNEXT        ZERO, ILLOGICAL SO EXIT                   02427
*********************************************************************** 02428
*        SAVE THE PROC NAME                                           * 02429
*********************************************************************** 02430
PROCINS1 LA    R4,1(,R4)      INCREMENT PAST COUNT                      02431*19
         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE            02432
         SLR   R3,R3          CLEAR REG FOR ICM                         02433
         ICM   R3,1,0(R4)     LOAD LENGTH OF PROC NAME                  02434*19
         BZ    GETNEXT        IF ZERO, NO PROC NAME SO BYPASS           02435
         CH    R3,H#8         SEE IF LENGTH > 8                         02436
         BNH   PROCINS2       NO, CONTINUE                              02437
         LA    R15,P@37       SET ERROR NUMBER                          02438
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02439**7
         B     GETNEXT        GET OUT                                   02440
PROCINS2 DS    0H                                                       02441
         BCTR  R3,0           MAKE MACHINE LENGTH                       02442
         MVI   SMFRTYPE,X'F9' SET RECORD TYPE FOR INSTREAM PROC USE     02443
         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02444
         B     GETNEXT                                                  02445
*********************************************************************** 02446
*        THE TEXT OF THE JDT VERB CARD IS AS FOLLOWS                  * 02447
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02448
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02449
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 02450
*            4)  1 BYTE INDICATOR X'BE' INDICATING JDVT DEFINED VERB  * 02451
*            5)  1 BYTE NUMBER OF JDT POSITIONAL PARAMETERS           * 02452
*            6)  VARIABLE LENGTH LIST OF JDT POS PARAMETERS           * 02453
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 02454
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 02455
*                EACH IS PRECEDED BY A 1 BYTE NUMBER OF               * 02456
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 02457
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 02458
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 02459
*                POSITIONAL PARAMETER.                                * 02460
*********************************************************************** 02461
*                                                                       02462
*********************************************************************** 02463
*        THE TEXT OF THE JDT VERB CARD 'OUTPUT' WILL BE SAVED TO BE   * 02464
*        USED WITH SYSOUT PROCESSING.  THE STEP NAME WILL BE SAVED    * 02465
*        ALONG WITH THE VERB NAME, THE LABEL, AND THE SYSOUT CLASS    * 02466
*        SPECIFIED.                                                   * 02467
*********************************************************************** 02468
         SPACE 4                                                        02469
JDTCARD  EQU   *                                                        02470
*********************************************************************** 02471
*        SCAN THE JDT VERB CARD TO VERIFY IF IT IS A 'OUTPUT' CARD.   * 02472
*********************************************************************** 02473
         LA    R4,STRSKEY     LOAD START OF TRUE TEXT                   02474*19
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02475*19
         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH  02476
         MVI   FCBFLAG,C'N'   SET FCB FOUND FLAG TO NO                  02477
         CLI   0(R4),JDTVERBK  IS THIS A JDT VERB?                      02478*19
         BE    JDTLOOP        YES, LOOP PAST IT BECAUSE OUTPUT ASSUMED  02479
         SPACE 4                                                        02480
JDTPARM  CLI   0(R4),ENDK     END OF TEXT STRING                        02481*19
         BE    JDTCKFMV       YES, GO TO CHECK FCB MOVE                 02482
*********************************************************************** 02483
*        JDT DEFINED KEYWORD                                          * 02484
*********************************************************************** 02485
         CLI   0(R4),JDTKWDK  SEE IF JDT DEFINED KEYWORD                02486*19
         BNE   JDTLOOP        NO, BRANCH                                02487
         CLI   1(R4),X'02'    IS THIS A KEYWORD + 1 PARAMETER           02488*19
         BNE   JDTLOOP        NO, THUS NOT CLASS OR FCB                 02489
         CLI   2(R4),L'C#FORMS COULD THIS BE THE FORMS PARAMETER        02490*19
         BNE   JDTCK3KY       NO CHECK FOR FCB                          02491
         CLC   C#FORMS,3(R4)  IS THIS THE FORMS= KEYWORD                02492*19
         BNE   JDTCK3KY       NO GO TO CHECK FOR 3 CHR KEYWORD          02493
         SLR   R3,R3          ZERO OUT R3                               02494
         ICM   R3,1,3+L'C#FORMS(R4) GET SIZE OF SECOND PARAM        WEJ 02495*19
         BZ    JDTLOOP        IF ZERO IGNORE IT                         02496
         CH    R3,H#8         IS IT GREATER THAN 8                      02497
         BNH   JDTMVFM        NO, GO TO MOVE FORM TO HOLD               02498
         LA    R15,P@39       POINT TO ERROR MESSAGE                    02499
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     02500**7
         B     JDTLOOP                                                  02501
JDTMVFM  DS    0H                                                       02502
         EX    R3,MOVEJDFM    EXECUTE MOVE OF FORM-ID INCLUING LEN      02503
         B     JDTLOOP                                                  02504
MOVEJDFM MVC   SAVEFORM(0),3+L'C#FORMS(R4)  EXECUTED MOVE               02505*19
JDTCK3KY DS    0H                                                       02506
         CLI   2(R4),X'03'    IS THIS A 3 CHARACTER KEYWORD             02507*19
         BNE   JDTLOOP        NO, WE ARE NOT INTERESTED                 02508
         CLC   C#FCB,3(R4)    IS THE KEYWORD FCB                        02509*19
         BNE   JDTLOOP        NO, GO TO GET NEXT PARAM                  02510
         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO Y                   02511
         B     JDTLOOP        GO TO GET NEXT PARAM                      02512
         EJECT                                                          02513
*********************************************************************** 02514
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 02515
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 02516
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 02517
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 02518
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 02519
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 02520
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 02521
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 02522
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 02523
*        SINGLE SUBPARAMETER.                                         * 02524
*********************************************************************** 02525
JDTLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        02526*19
         SLR   R2,R2          CLEAR REGISTER FOR ICM                    02527**4
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    02528*19
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   02529*19
         BNZ   JDTLOOP1       OK, BRANCH INTO ROUTINE                   02530
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                02531*19
         B     JDTLOOP5       AND GET OUT OF ROUTINE                    02532
JDTLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              02533*19
JDTLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    02534*19
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     02535*19
         BNM   JDTLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         02536
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              02537*19
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               02538*19
         B     JDTLOOP4       BRANCH                                    02539
JDTLOOP3 LA    R5,1           SET PARAM COUNT TO 1                      02540*19
JDTLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    02541
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     02542*19
         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       02543*19
         BCT   R5,JDTLOOP4    LOOP UNTIL PROCESSED ALL PARMS            02544*19
         BCT   R2,JDTLOOP2    LOOP UNTIL PROCESSED ALL PARMS            02545**4
JDTLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02546*19
         B     JDTPARM        CONTINUE                                  02547
JDTCKFMV DS    0H                                                       02548
         CLI   FCBFLAG,C'Y'   WAS FCB FOUND                             02549
         BE    GETNEXT        YES, GET NEXT PARAM                       02550
         CLI   SAVEFMLN,X'04' IS FORM LENGTH GREATER THAN 4             02551
         BNH   JDTGETLN       NO, GO TO LOAD FORM LENGTH                02552
         MVI   SAVEFMLN,X'04' SET LENGTH TO 4 SO ONLY 1ST 4 BYTES USED  02553
JDTGETLN DS    0H                                                       02554
         SLR   R3,R3          ZERO OUT R3                               02555
         ICM   R3,1,SAVEFMLN LOAD FORM LENGTH                           02556
         BZ    GETNEXT        IF ZERO, GET NEXT PARAMETER               02557
         MVC   0(L'C#FCBKYJ,R4),C#FCBKYJ                                02558*19
         EX    R3,MVJDTFCB                                              02559
         LA    R3,L'C#FCBKYJ+1(,R3)                                     02560
         SLR   R0,R0                                                    02561
         ICM   R0,B'0011',STRLTH                                        02562
         ALR   R0,R3                                                    02563
         STCM  R0,B'0011',STRLTH                                        02564
         LA    R4,0(R3,R4)                                              02565*19
         MVI   0(R4),ENDK                                               02566*19
         B     GETNEXT                                                  02567
MVJDTFCB MVC   L'C#FCBKYJ(0,R4),SAVEFORM                                02568*19
         SPACE 4                                                        02569
*********************************************************************** 02570
*        THIS ROUTINE WILL OBTAIN THE NEXT PARAMETER.                 * 02571
*        ON OUTPUT REG 3 WILL CONTAIN LENGTH-1                        * 02572
*          IF REG 3 IS ZERO EITHER THERE WAS AN ERROR OR NO PARM      * 02573
*        THE LENGTH IS CHECKED TO BE NOT GREATER THAN 8               * 02574
*          IF SO, AN ERROR MESSAGE IS RETURNED.                       * 02575
*********************************************************************** 02576
JDTGET   EQU   *                                                        02577
         ST    R14,JDTRTN     SAVE RETURN ADDRESS                       02578
         SLR   R3,R3          CLEAR REG FOR ICM                         02579
         ICM   R3,1,1(R4)     LOAD LENGTH                               02580*19
         BZR   R14            IF ZERO RETURN TO CALLER                  02581
         CH    R3,H#8         SEE IF LENGTH > 8                         02582
         BNH   JDTGETEX       NO, CONTINUE                              02583
         LA    R15,P@1        INDICATE ERROR NUMBER                     02584
         BAL   R14,MSGRTN     GO ISSUE ERROR MESSAGE                    02585**7
         LA    R3,1           SIMULATE NO PARM FOUND                    02586
JDTGETEX DS    0H                                                       02587
         BCTR  R3,0           REDUCE TO MACHINE LENGTH                  02588
         L     R14,JDTRTN     LOAD RETURN ADDRESS                       02589
         BR    R14             AND RETURN TO CALLER                     02590
         EJECT                                                          02591
*********************************************************************** 02592
*                                                                     * 02593
*                         L O C A T E                                 * 02594
*                                                                     * 02595
*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE     * 02596
*        AND VOLSER INFORMATION.                                      * 02597
*                                                                     * 02598
*********************************************************************** 02599
LOCATE   LA    R15,68         LOAD OPTION VALUE                         02600
         SLL   R15,24         SHIFT OPTION TO HIGH BYTE                 02601
         ST    R15,CAMLST     STORE INTO CAMLST AREA                    02602
         LA    R15,LDSN       LOAD ADDR OF DSN                          02603
         ST    R15,CAMLST+4   STORE INTO CAMLST AREA                    02604
         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA          02605
         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA    02606
         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA             02607
         ST    R15,CAMLST+12  STORE INTO CAMLST AREA                    02608
         LOCATE CAMLST        READ CATALOG                              02609
         BR    R2             RETURN TO CALLER                          02610**4
         SPACE 4                                                        02611
*********************************************************************** 02612
*                                                                     * 02613
*                         U C B S E A R                               * 02614
*                                                                     * 02615
*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED DASD VOLUME   * 02616
*        IS MOUNTED OR ONLY MOUNTED PRIVATE IN WHICH CASE IT WILL     * 02617
*        BE DISMOUNTED AT END OF JOB.  IF NOT FOUND OR PRIVATE, IT    * 02618
*        IS A 'PRIV' UNIT.                                            * 02619
*                                                                     * 02620
*********************************************************************** 02621
UCBSEAR  DS    0H                                                       02622
         AIF   ('&UCBSEAR' EQ 'YES').UCBS1                              02623
         BR    R2             RETURN TO CALLER                          02624**4
         AGO   .UCBS2                                                   02625
.UCBS1   ANOP                                                           02626
         STM   R14,R12,SAVEREGS SAVE REGISTERS                          02627
         XC    LASTUCB,LASTUCB ZERO LAST EBCDIC UCB ADDR                02628
         SLR   R5,R5          CLEAR REGISTER FOR ICM INSTR              02629*19
         L     R4,16          LOAD CVT ADDR                             02630*19
         L     R4,40(,R4)     LOAD ADDR OF UCB LOOKUP TABLE             02631*19
UCBSEAR1 DS    0H                                                       02632
         SLR   R5,R5          CLEAR REGISTER 5                          02633*19
         ICM   R5,3,0(R4)     LOAD ADDR OF NEXT UCB                     02634*19
         LA    R4,2(,R4)      INCREMENT TO NEXT LOOKUP ENTRY            02635*19
         BZ    UCBSEAR1       ZERO, NULL ENTRY, LOOP                    02636
         C     R5,LASTUCB     SEE IF ADDR > LAST UCB ADDR               02637*19
         BL    UCBSEAR1       NO, OPCHAN DEVICE,LOOP                    02638
         ST    R5,LASTUCB     SAVE LAST UCB ADDR                        02639*19
         C     R5,X#FFFF      SEE IF END OF TABLE                       02640*19
         BE    UCBSEAR2       YES, VOLSER NOT FOUND                     02641
         TM    18(R5),32      DASD DEVICE?                              02642*19
         BNO   UCBSEAR1       NO, LOOP                                  02643
         TM    3(R5),128      ONLINE?                                   02644*19
         BNO   UCBSEAR1       NO, LOOP                                  02645
         CLC   TVOLSER,28(R5) SEE IF CAT. VOLSER IN UCB                 02646*19
         BNE   UCBSEAR1       NO, LOOP                                  02647
         TM    3(R5),X'24'    SEE IF PERM RES OR RESERVED               02648*19
         BZ    UCBSEAR2       NOT EITHER, THEN MUST BE PRIV             02649
         B     UCBSEAR3       GET OUT, NO CHARGE                        02650
UCBSEAR2 OI    UNITIND,PRIV   SINCE VOLUME NOT MOUNTED, PRIV            02651
UCBSEAR3 LM    R14,R12,SAVEREGS RESTORE REGISTERS                       02652
         BR    R2             RETURN TO CALLER                          02653**4
.UCBS2   ANOP                                                           02654
         SPACE 4                                                        02655
*********************************************************************** 02656
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            * 02657
*********************************************************************** 02658
EOF      TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?                  02659
         BO    JOBERROR       YES, BRANCH                               02660
         L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY              02661
         LTR   R7,R7          SEE IF ADDR = 0                           02662
         BZ    EOF1           IF ZERO, NO UPDATE, BRANCH                02663
         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE          02664
         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE          02665
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT                       02666
         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT                       02667
         EJECT                                                          02668
*********************************************************************** 02669
*        THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD   * 02670
*        ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB   * 02671
*        THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS     * 02672
*        TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.* 02673
*********************************************************************** 02674
EOF1     MVC   STEPMSG,MSG0CON    INITIALIZE STEP MESSAGE               02675*10
         MVC   JOBMSG,MSG1CON     INITIALIZE JOB CLASS MESSAGE          02676*10
         XC    MAXTAPE,MAXTAPE ZERO MAX FIELD                           02677
         XC    MAXPRIV,MAXPRIV ZERO MAX FIELD                           02678
         XC    MAXTOTAL,MAXTOTAL ZERO MAX FIELD                         02679
         XC    MAXREGN,MAXREGN ZERO MAX FIELD                           02680
         L     R7,FIRSTENT    LOAD START OF TABLE                       02681
         CLC   ENTLEN(2,R7),H#0 SEE IF ONLY JOB ENTRY                   02682
         BE    JOBERROR       ZEROS, NO OTHER ENTRIES, FLUSH JOB        02683
EOFLOOP1 CLI   ENTRYTYP,TYPJOB SEE IF JOB ENTRY                         02684
         BE    EOFJOB         YES, BRANCH                               02685
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY                       02686
         BE    EOFEXEC        YES, BRANCH                               02687
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE                      02688
         BE    EOFSCAN        YES, BRANCH                               02689
         B     EOFLOOP2       LOOP                                      02690
*********************************************************************** 02691
*        PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP     * 02692
*        TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.                  * 02693
*********************************************************************** 02694
EOFEXEC  DS    0H             LOAD CARD NUMBER                          02695**7
         MVC   CARDNO,ECARDNO MOVE EXEC CARDNO TO CARDNO                02696**7
         MVC   STEPMSTP,EJSTEP   MOVE JOB STEP TO MESSAGE               02697*10
         MVC   STEPMPST,EPSTEP  MOVE PROC STEP TO MESSAGE               02698*10
         LH    R5,ETAPES      LOAD NUMBER OF TAPES FOR STEP             02699*19
         CVD   R5,DOUBLE      CONVERT TO PACKED                         02700*19
         MVC   STEPMTAP,EDMASK  SET MESSAGE EDIT MASK                   02701*10
         ED    STEPMTAP,DOUBLE+5 EDIT NUMBER OF TAPES TO MESSAGE        02702*10
         L     R5,MAXTIME     LOAD MAXIMUM CPU JOB CPU TIME             02703*19
         CVD   R5,DOUBLE      CONVERT TO PACKED                         02704*19
         MVC   STEPM+61(6),EDMASK  SET MESSAGE EDIT MASK                02705
         ED    STEPM+61(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE         02706
         LA    R15,STEPMSG    LOAD ADDRESS OF STEP MESSAGE              02707
         BAL   R14,MSGRTN     GO PUT MESSAGE TO JES MESSAGE DATA SET    02708**7
         SPACE 4                                                        02709
*********************************************************************** 02710
*        COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM       * 02711
*        RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER        * 02712
*        OF THE NUMBER OF RESOURCES.                                  * 02713
*********************************************************************** 02714
EOFCONT1 CLC   ETAPES,MAXTAPE COMPARE STEP TAPES TO PREV MAX            02715
         BNH   EOFEXEC1       NOT GREATER, BRANCH                       02716
         MVC   MAXTAPE,ETAPES MAKE CURR COUNT NEW COUNT                 02717
EOFEXEC1 CLC   EPRIVS,MAXPRIV COMPARE STEP PRIVS TO PREV MAX            02718
         BNH   EOFEXEC2       NOT GREATER, BRANCH                       02719
         MVC   MAXPRIV,EPRIVS MAKE CURR COUNT NEW COUNT                 02720
EOFEXEC2 LH    R5,EPRIVS      LOAD NUMBER OF PRIVS IN STEP              02721*19
         AH    R5,ETAPES      ADD NUMBER OF TAPES                       02722*19
         CH    R5,MAXTOTAL    COMPARE STEP TOT CNT TO PREV MAX          02723*19
         BNH   EOFEXEC3       NOT GREATER, BRANCH                       02724
         STH   R5,MAXTOTAL    MADE CURR TOTAL CNT NEW MAX               02725*19
EOFEXEC3 CLC   EREGION,MAXREGN COMPARE STEP REGION TO PREV MAX          02726
         BNH   EOFLOOP2       NOT GREATER, BRANCH                       02727
         MVC   MAXREGN,EREGION MAKE CURR REGION NEW MAX                 02728
EOFLOOP2 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02729
         B     EOFLOOP1       LOOP                                      02730
EOFJOB   CLC   JREGION,MAXREGN COMPARE STEP REGION TO PREV MAX          02731
         BNH   EOFLOOP2       NOT GREATER, BRANCH                       02732
         MVC   MAXREGN,JREGION MAKE CURR REGION NEW MAX                 02733
         B     EOFLOOP2       GO GET NEXT ENTRY                         02734
EOFSCAN  CLC   MAXTAPE,$ZEROS    SEE IF ANY TAPES                   WEJ 02735
         BE    EOFPACK        NO TAPES, GO CHECK FOR PRIV               02736
         OI    RESOURCE,TAPES TURN ON TAPES RESOURCE                    02737
EOFPACK  CLC   MAXPRIV,$ZEROS    SEE IF ANY PRIV                        02738
         BE    EOFLJOB        NO, BRANCH                                02739
         OI    RESOURCE,USERPACK TURN ON USERPACK RESOURCE              02740
EOFLJOB  CLC   MAXTIME,F#15   SEE IF CPU TIME > 15                      02741
         BNH   CLASSEAR       NO, BRANCH                                02742
         OI    RESOURCE+1,LONGJOB TURN ON LONGJOB RESOURCE              02743
         EJECT                                                          02744
*********************************************************************** 02745
*        THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR       * 02746
*        MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS     * 02747
*        FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,          * 02748
*        OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE       * 02749
*        SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE    * 02750
*        THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE       * 02751
*        INITIATOR SET TO THAT CLASS.                                 * 02752
*********************************************************************** 02753
CLASSEAR TM    JOBIND,JOBSTC+JOBTSO STC OR TSO                          02754
         BM    NOCHANGE       YES, NO CHANGE OF CLASS                   02755
         L     R14,JCTADDR    LOAD JCT ADDRESS                          02756*40
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02757*40
         MVC   CLASSFLD,INCLASS  SET NEW JOBCLASS TO CURRENT JOBCLS WEJ 02758
         CLI   TCMCLASS,X'00' IS TCMCLASS NULL                      WEJ 02759
         BE    CLASSCK1       YES, BYPASS SETTING OF TCAM CLASS     WEJ 02760
         MVC   CLASSFLD,TCMCLASS  SET NEW JOBCLASS TO TCAM JOBCLASS WEJ 02761
CLASSCK1 DS    0H                                                   WEJ 02762
         XC    CARDNO,CARDNO     ZERO OUT CARD NO                   WEJ 02763**7
         CLI   CLASSFLD,C'I'  CLASS 'I' OR GREATER                  WEJ 02764*20
         BH    CLASSCKA       YES, BYPASS CLASS SET                 WEJ 02765*20
         CLI   CLASSFLD,C'F'  CLASS = 'F' OR GREATER                WEJ 02766*20
         BNL   SETCLASA       YES, SET A                            WEJ 02767*22
         CLI   CLASSFLD,C'B'  CLASS = B?                            WEJ 02768**5
         BNE   CLASSCKA       NO, BYPASS SETTING OF CLASS TO A      WEJ 02769**5
SETCLASA DS   0H                                                    WEJ 02770**5
         MVI   CLASSFLD,C'A'  SET CLASS TO A                        WEJ 02771**5
CLASSCKA DS    0H                                                   WEJ 02772
         TM    JOBIND,JOBPROD SEE IF PRODUCTION JOB                 WEJ 02773
         BO    SETCLASS       YES, BRANCH                           WEJ 02774
         CLI   CLASSFLD,C'A'  IS JOBCLASS = 'A'                     WEJ 02775*23
         BNE   CLASSCK4       NO, CHECK AUTHORITY                   WEJ 02776*23
         CLC   MAXTAPE,$ZEROS     IS MAX-TAPE  EQUAL 0              WEJ 02777
         BE    SETCLASS       YES, GO SET CLASS                     WEJ 02778*23
         CLC   MAXTAPE,H#1    IS NUMBER OF TAPES = 1                WEJ 02779
         BNE   CLASSETH       NO, GO TO SET CLASS H                 WEJ 02780
         MVI   CLASSFLD,C'I'  SET CLASS TO I                            02781
         B     SETCLASS                                                 02782
CLASSETH DS    0H                                                       02783
         MVI   CLASSFLD,C'H'  FORCE JOBCLASS 'H'                    WEJ 02784
         B     CLASSCK8       GO CHECK IF OVER 3 TAPES              WEJ 02785*40
CLASSCK4 DS    0H                                                   WEJ 02786
         CLI   CLASSFLD,C'J'  CLASS 'J' (TCAM CLASS)                WEJ 02787*24
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02788*40
         CLI   CLASSFLD,C'L'  CLASS 'L' (TCAM CLASS)                WEJ 02789*32
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02790*40
         CLI   CLASSFLD,C'S'  CLASS 'S' (SINGLE STREAM)             WEJ 02791*40
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02792*40
         CLI   CLASSFLD,C'N'  CLASS 'N' (CICS CLASS)                WEJ 02793*40
         BE    CLASSCK5       NO, GO CHECK IF CICS SUBMIT           WEJ 02794*40
         CLI   CLASSFLD,C'Q'  CLASS 'Q' (ADABAS CLASS)              WEJ 02795*40
         BNE   CLASSCK5       NO, GO CHECK IF AUTHORIZED SUBMIT     WEJ 02796*44
CLASSCK5 DS    0H                                                   WEJ 02797*40
         CLC   JCTINDEV,C#JLCICS   IS SOURCE PRODUCTION CICS        WEJ 02798*37
         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ 02799*40
         CLC   JCTINDEV,C#JLCICT   IS SOURCE TEST OR SIML. CICS     WEJ 02800*37
         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ 02801*40
CLASSCK6 DS    0H                                                   WEJ 02802*40
         TM    JOBIND,JOBTECH+JOBOPER+JOBCOMM TECH/COMM/OPER?       WEJ 02803
         BZ    CLASSERR       NO, GO TO CLASS ERROR                 WEJ 02804
         CLI   CLASSFLD,C'Z'  DEDICATED BACKUPS                     WEJ 02805*40
         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ 02806*40
         CLI   CLASSFLD,C'X'  TECH SRV/COMM SINGLE STREAM           WEJ 02807*44
         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ 02808*44
         CLI   CLASSFLD,C'T'  IS CLASS T THRU Y                     WEJ 02809*40
         BL    CLASSCK8       NO, GO CHECK MAX TAPES                WEJ 02810*40
         CLC   MAXTAPE,H#1    IS MAXTAPE =, <, OR > 1               WEJ 02811*40
         BL    SETCLASW       LESS, GO SET CLASS W OR Y             WEJ 02812*40
         BH    SETCLASU       GREATER, GO SET CLASS U               WEJ 02813*40
         MVI   CLASSFLD,C'V'  SET JOB CLASS TO V                    WEJ 02814*40
         B     SETCLASS                                             WEJ 02815*40
SETCLASW DS    0H                                                       02816*40
         MVI   CLASSFLD,C'W'  SET JOB CLASS TO V                    WEJ 02817*40
         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ 02818*43
         BL    SETCLASS       YES, GO TO COMMON SET CLASS           WEJ 02819*40
         MVI   CLASSFLD,C'Y'  SET CLASS TO Y (TECH SERV EQUIVALENT  WEJ 02820*40
         B     SETCLASS           OF F) AND GO TO COMMON SETCLASS   WEJ 02821*40
         DROP  R14                                                  WEJ 02822*40
SETCLASU DS    0H                                                       02823*40
         MVI   CLASSFLD,C'U'  SET JOB CLASS TO U (2-TAPES TECH SRV) WEJ 02824*40
         B     SETCLASS       GO TO COMMON SET CLASS                WEJ 02825*40
CLASSCK8 DS    0H                                                       02826*40
         CLC   MAXTAPE,H#3    IS MAX TAPES GREATER THAN 3           WEJ 02827
         BNH   SETCLASS       NO, TREAT AS PRODUCTION               WEJ 02828
         TM    JOBIND,JOBOPER SEE IF OPERATIONS JOB                 WEJ 02829
         BO    SETCLASS       YES, TREAT AS PRODUCTION              WEJ 02830
*********************************************************************** 02831*23
*         TOO MANY TAPES                                              * 02832*23
*********************************************************************** 02833*23
         LA    R15,P@47       POINT TO ERROR MESSAGE                    02834
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     02835**7
         B     SETCLASS       GO TO SET CLASS                       WEJ 02836
CLASSERR DS    0H                                                       02837
         CLI   CLASSFLD,C'X'  IS CLASS SINGLE STREAM BATCH TECH SRV WEJ 02838*42
         BNE   CLASSCKZ       NO, GO SET CLASS TO A AND RECHECK     WEJ 02839*42
         MVI   CLASSFLD,C'S'  SET TO S, NORMAL SINGLE STREAM        WEJ 02840*42
         B     CLASSCK8       GO CHECK FOR OVER 3 TAPE DRIVES       WEJ 02841*42
CLASSCKZ DS    0H                                                       02842*42
         CLI   CLASSFLD,C'Z'  IS CLASS DEDICATED SYSTEM BATCH       WEJ 02843*42
         BNE   SETCLASA       NO, GO SET CLASS TO A AND RECHECK     WEJ 02844*42
         LA    R15,P@46       LOAD ADDRESS OF MESSAGE                   02845
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02846**7
         B     SETCLASS       GO SET DEFAULT CLASS                 WEJ  02847
SETCLASS DS    0H                                                       02848
         L     R14,JCTADDR    LOAD JCT ADDRESS                      WEJ 02849
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02850
         CLI   CLASSFLD,C'B'  IS DERIVED CLASS > B                  WEJ 02851
         BH    SETCLAS1       YES, DO NOT CHECK FOR FAST CLASS      WEJ 02852
         CLC   MAXTAPE,$ZEROS IS MAX TAPES ZERO                     WEJ 02853
         BNE   SETCLAS1       NO, DO NOT CHECK FOR FAST CLASS       WEJ 02854
         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ 02855*43
         BL    SETCLAS0       YES, SET CLASS TO B                   WEJ 02856**5
         MVI   CLASSFLD,C'F'  SET CLASS TO F                        WEJ 02857*23
         B     SETCLAS1                                             WEJ 02858**5
SETCLAS0 DS    0H                                                   WEJ 02859**5
         MVI   CLASSFLD,C'B'  SET CLASS TO B (NO TAPE)              WEJ 02860*23
SETCLAS1 DS    0H                                                   WEJ 02861**5
         CLC   INCLASS,CLASSFLD  WAS THE CLASS CHANGED                  02862
         BE    NOCHANGE       NO, NO NEED TO CHANGE CLASS               02863
         TM    JCTJOBFL,JCTTSCAN  WAS TYPRUN=SCAN SPECIFIED             02864
         BO    NOCHANGE           YES  NO NEED TO CHANGE CLASS          02865
         DROP  R14            DROP ADDRESSABILITY TO JCT                02866
         MVC   JOBMCLAS,CLASSFLD MOVE NEW CLASS TO MESSAGE              02867*10
         LA    R15,JOBMSG     LOAD ADDRESS OF JOB CLASS MESSAGE         02868*10
         BAL   R14,MSGRTN     GO WRITE MESSAGE TO JES MESSAGE DATA SET  02869**7
         EJECT                                                          02870
CLEAR    DS    0H                                                       02871
         CLI   CLASSFLD,C'A'  TEST NEW CLASS                            02872
         BNL   CHGCLASS       NEW, GO RESET TO NEW CLASS                02873
DEFAULT  MVI   CLASSFLD,C'A'  SET NEW CLASS TO 'A'                      02874
*********************************************************************** 02875
*                                                                     * 02876
*              S E T     T H E    N E W    C L A S S                  * 02877
*                                                                     * 02878
*********************************************************************** 02879
CHGCLASS DS    0H             CHANGE THE JOB CLASS                      02880
         AIF   ('&MODIFY' NE 'YES').MODIFY1                             02881
         L     R14,JCTADDR    LOAD JCT ADDRESS                          02882
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02883
         MVC   JCTJCLAS,CLASSFLD CHANGE CLASS IN JCT                    02884
         MVC   JCTCLASS,CLASSFLD CHANGE CLASS IN JCT                    02885
         DROP  R14            DROP ADDRESSABILITY TO JCT                02886
.MODIFY1 ANOP                                                           02887
NOCHANGE XC    RETCODE,RETCODE SET RETURN CODE TO ZERO                  02888
         TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?                  02889
         BNO   ENDOFIT        BRANCH                                    02890
JOBERROR DS    0H                                                       02891
         AIF   ('&ERRMSG' NE 'YES').ERRMSGN                             02892
         MVC   WTOLIST(LWTO2),WTO2 SET WTO LIST FORM                    02893
         AIF   ('&TSO' NE 'YES').TSO1                                   02894
         WTO   MF=(E,WTOLIST)                                           02895
         AGO   .TSO2                                                    02896
.TSO1    ANOP                                                           02897
         $$WTO WTOLIST        WRITE ERROR MESSAGE                       02898
.TSO2    ANOP                                                           02899
         B     JOBERR1        BYPASS WTO LIST FORM                      02900
         $MID  902                                                      02901
         SPACE                                                          02902
WTO2     WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X02903
               ROUTCDE=(2),DESC=(4),MF=L                                02904
LWTO2    EQU   *-WTO2                                                   02905
.ERRMSGN ANOP                                                           02906
JOBERR1  DS    0H                                                       02907
         AIF   ('&FLUSH' NE 'YES').FLUSHN                               02908
         LA    R15,8          SET JOB FAIL RETURN CODE                  02909
         ST    R15,RETCODE    AND SAVE IT                               02910
*********************************************************************** 02911
*        AT THIS POINT WE MUST CHANGE TO OUTPUT CLASS SO THE JCL      * 02912
*        ERROR WILL PRINT.  THE PDDB CLASS WAS SET AT CONVERSION TIME * 02913
*        AND IF THE MSGCLASS WAS FOR A DUMMY CLASS, I.E. ERROR ON     * 02914
*        JOB CARD, THE JOB WILL FLUSH AND THE USER WOULD NOT SEE THE  * 02915
*        ERROR MESSAGE(S).  THE PDDBS IN QUESTION ARE THOSE FOR THE   * 02916
*        JOB LOG, JCL IMAGES, AND THE SYSTEM MESSAGES.  IF THE CLASS  * 02917
*        WAS ALREADY A HELD CLASS IT WILL NOT BE CHANGED.             * 02918
*********************************************************************** 02919
         ICM   R4,B'1111',DCNVIOT GET ADDR OF THE IOT FOR TASK      WEJ 02920*19
         BZ    ENDCHK              BYPASS CLASS RESET IF ZERO       WEJ 02921
         USING IOT,R4             SET IOT  ADDRESSABILITY           WEJ 02922*19
         L     R3,IOTPDDB         1ST PDDB OFFSET                       02923
         ALR   R3,R4              CALCULATE ADDRESS                     02924*19
         USING PDB,R3             SET PDDB ADDRESSABILITY           WEJ 02925
         LA    R3,PDBLENG(,R3)    POINT PAST FIRST PDDB                 02926
         CLC   C#$JLOG,PDBDDNAM   CHECK DDNAME                          02927
         BNE   CHK$JCL                                                  02928
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02929**5
         BNE   CHK$JCL             NO, CHECK NEXT                       02930
         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02931
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02932
         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB                    02933
CHK$JCL  DS    0H                                                       02934
         CLC   C#$JCL,PDBDDNAM    CHECK DDNAME                          02935
         BNE   CHK$SYS                                                  02936
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02937**5
         BNE   CHK$SYS             NO, CHECK NEXT                       02938
         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02939
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02940
         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB                    02941
CHK$SYS  DS    0H                                                       02942
         CLC   C#$SYSM,PDBDDNAM   CHECK DDNAME                          02943
         BNE   ENDCHK                                                   02944
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02945**5
         BNE   ENDCHK              NO, END OF CHECK                     02946
         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02947
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02948
ENDCHK   DS    0H                                                       02949
         DROP  R4,R3          DROP ADDRESSABILITY                       02950*19
.FLUSHN  ANOP                                                           02951
         EJECT                                                          02952
*********************************************************************** 02953
*                        C L E A N    U P                             * 02954
*********************************************************************** 02955
ENDOFIT  DS    0H             END OF EXIT                               02956
         AIF   ('&TSO' EQ 'YES').TSO10                                  02957
***                           CANCEL ESTAE ENVIRONMENT                  02958
         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)        02959
         L     R13,DCNVUWA    LOAD SAVED WORK AREA                      02960
.TSO10   ANOP                                                           02961
         L     R0,F#8192      LOAD FREEMAIN LENGTH                      02962
         L     R1,SUBTABLE    LOAD JCL SUB TABLE AREA ADDRESS           02963
         FREEMAIN R,LV=(0),A=(1)                                        02964
         L     R4,RETCODE     SAVE RETURN CODE                          02965*19
         LH    R0,GETLEN      LOAD FREEMAIN SIZE                        02966
         LR    R1,R13         SAVE WORKAREA ADDRESS                     02967
         L     R13,4(,R13)    RESTORE ORIG REG 13                       02968
         FREEMAIN R,LV=(0),A=(1)                                        02969
         XC    DCNVUWA(4),DCNVUWA CLEAR WORKAREA POINTER IN DTE         02970
         LR    R15,R4         SET RETURN CODE                           02971*19
         RETURN (14,12),RC=(15) GO BACK TO JES2                         02972
         SPACE 4                                                        02973
*********************************************************************** 02974
*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT    * 02975
*********************************************************************** 02976
GETNEXT  L     R5,CARDNO      LOAD CARD NUMBER FIELD                    02977*19
         LA    R5,1(,R5)      ADD 1 TO CARD NUMBER                      02978*19
         ST    R5,CARDNO      STORE NEW CARD NUMBER                     02979*19
         XC    RETCODE,RETCODE SET RETURN CODE TO ZERO                  02980
         AIF   ('&TSO' EQ 'YES').TSO11                                  02981
***                           CANCEL ESTAE ENVIRONMENT                  02982
         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)        02983
         L     R13,DCNVUWA       SAME AS EXWKPTR1                   WEJ 02984
.TSO11   ANOP                                                           02985
         L     R13,4(,R13)    RESTORE ORIG REG 13                       02986
         SLR   R15,R15        SET RETURN CODE TO ZERO                   02987
         RETURN (14,12),RC=(15) GO BACK TO JES2                         02988
         EJECT                                                          02989
*********************************************************************** 02990
*                                                                     * 02991
*                        M S G R T N                                  * 02992**7
*                                                                     * 02993
*        THIS ROUTINE WILL WRITE A MESSGE TO THE JES MESSAGE DATA     * 02994
*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY         * 02995
*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE        * 02996
*        STATEMENT NUMBER IN THE MESSAGE PREFIX.                      * 02997
*                                                                     * 02998
*********************************************************************** 02999
         PUSH  USING                                                    03000
MSGRTN   STM   R14,R12,SAVEREGS SAVE REGISTERS                          03001**7
         L     R6,OUTRPL      GET BASE FOR RPL                          03002
         USING IFGRPL,R6      SET ADDRESSABILITY                        03003
         LR    R4,R15         SAVE ERROR POSITION                   WEJ 03004*19
         L     R3,CARDNO      LOAD CARD NUMBER                          03005
         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED             03006
         L     R5,MSGCOUNT    LOAD MESSAGE COUNTER                      03007*19
         LTR   R5,R5          SEE IF FIRST MESSAGE                      03008*19
         BNZ   MSGOUT         NO, DO NOT PUT HEADERS                    03009
         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ 03010**8
         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ 03011**8
         MVC   BUFFER(L'HEADER1),HEADER1 MOVE HEADER LINE1 TO BUFF  WEJ 03012**8
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03013**4
         MVI   BUFFER,C'-'    SET UP HEADER LINE 2                  WEJ 03014**8
         MVI   BUFFER+1,C' '  SET UP HEADER LINE 2                  WEJ 03015**8
         MVC   BUFFER+2(L'BUFFER-2),BUFFER+1                        WEJ 03016*26
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03017**4
MSGOUT   LA    R5,1(,R5)      ADD 1 TO MESSAGE COUNT                    03018*19
         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ 03019*32
         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ 03020*32
         ST    R5,MSGCOUNT    SAVE MESSAGE COUNTER                      03021*19
         CL    R4,F#8192      IS THIS A DISPLACEMENT OR AN ADDRESS      03022*19
         BH    MSGOUT2        OVER 8192 IS AN ADDRESS                   03023*10
MSGOUT1  DS    0H                                                       03024
         MVC   MSGPREF,PREFIX MOVE MSG PREFIX TO JES2 BUFFER            03025
         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX           03026
         MVI   MSGTEXT,C' '   BLANK OUT MSGTEXT                         03027
         MVC   MSGTEXT+1(L'MSGTEXT-1),MSGTEXT                           03028
         AL    R4,A#MSSG      ADD ADDR OF MESSAGE TABLE TO MSG POS  WEJ 03029*19
MSGOUT2  DS    0H                                                       03030*10
         SLR   R3,R3          CLEAR REGISTER 3 FOR SIZE INSERT          03031
         IC    R3,0(,R4)      GET SIZE OF MESSAGE                       03032*19
         EX    R3,MOVEMSG     MOVE THE MESSAGE                          03033
MSGOUT3  DS    0H                                                       03034
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03035**4
         CLI   7(R4),C'I'     IS THIS AN INFO MSSG (POS 7 = I)      WEJ 03036*19
         BE    MSGOUT5        YES  DO NOT FAIL JOB                      03037
         OI    JOBIND2,JOBFAIL TURN ON JOB FAILED IND                   03038
MSGOUT5  LM    R14,R12,SAVEREGS RESTORE REGISTERS                       03039
         BR    R14            RETURN TO CALLER                          03040
MOVEMSG  MVC   MSGTEXT(0),1(R4)  MOVE PROPER MSG TO JES2 BUFFER     WEJ 03041*19
         EJECT                                                          03042
*********************************************************************** 03043
*                                                                     * 03044
*                          P U T M S G                                * 03045
*                                                                     * 03046
*        WRITE MESSAGE TO JES MESSAGE DATA SET                        * 03047
*                                                                     * 03048
*********************************************************************** 03049
PUTMSG   DS    0H                                                       03050
         MVI   RPLREQ,RPLPUT  OPERATION TO BE A PUT                     03051
         L     R0,OUTACB      LOAD OUTPUT ACB ADDRESS                   03052
         ST    R0,RPLDACB     SET IN ACB POINTER IN RPL                 03053
         LA    R0,BUFFER      LOAD ADDR OF BUFFER                       03054
         ST    R0,RPLAREA     POINT TO BUFFER                           03055
         XC    RPLARG(4),RPLARG ZERO FIELD                              03056
         MVI   RPLOPT1,RPLSEQ OPERATION TO BE SEQUENTIAL                03057
         MVI   RPLOPT2,X'00'  ZERO FIELD                                03058
         LA    R0,100         LOAD MESSAGE LENGTH                       03059
         ST    R0,RPLRLEN     STORE MESSAGE LENGTH                      03060
         XC    RPLBUFL(4),RPLBUFL ZERO FIELD                            03061
         XC    RPLDDDD(4),RPLDDDD ZERO FIELD                            03062
         ST    R13,PUTSAVE+72 SAVE SAVE AREA POINTER                    03063
         LA    R13,PUTSAVE    SAVE AREA FOR ACCESS METHOD               03064
         LA    R1,IFGRPL      LOAD ADDR OF RPL                          03065
         PUT   RPL=(1)        WRITE TO MESSAGE DATA SET                 03066
         L     R13,72(R13)    RESTORE SAVE AREA POINTER                 03067
         LTR   R15,R15        TEST RETURN CODE                          03068
         BZR   R2             BAD, GO BAG JOB                           03069**4
         SPACE 2                                                        03070
         MVC   WTOLIST(LWTO1),WTO1 SET WTO LIST FORM                    03071
         AIF   ('&TSO' NE 'YES').TSO3                                   03072
         WTO   MF=(E,WTOLIST)                                           03073
         AGO   .TSO4                                                    03074
.TSO3    ANOP                                                           03075
         $$WTO WTOLIST        WRITE ERROR MESSAGE                       03076
.TSO4    ANOP                                                           03077
         B     JOBERROR       GET OUT                                   03078
         SPACE                                                          03079
         $MID  901                                                      03080
WTO1     WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X03081
               ROUTCDE=(2),DESC=(4),MF=L                                03082
LWTO1    EQU   *-WTO1                                                   03083
         DROP  R6                                                       03084
         POP   USING                                                    03085
         EJECT                                                          03086
*********************************************************************** 03087
*                                                                     * 03088
*                          R E F B A C K                              * 03089
*                                                                     * 03090
*        THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE    * 03091
*        TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR * 03092
*        PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP. * 03093
*        IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL  * 03094
*        BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.       * 03095
*                                                                     * 03096
*********************************************************************** 03097
*                                                                       03098
REFBACK  SLR   R3,R3          CLEAR WORK REGISTER                       03099
         SLR   R5,R5          CLEAR WORK REGISTER                       03100*19
         SLR   R2,R2          CLEAR WORK REGISTER                       03101**4
         IC    R2,2(,R4)      LOAD NUMBER OF DSN SUBPARAMETERS          03102*19
         N     R2,F#127       'AND' OUT THE HIGH ORDER BIT              03103**4
         LA    R4,3(,R4)      LOAD START OF REFBK ENTRIES               03104*19
         CLI   0(R4),X'01'    SEE IF LEN OF 1ST POS = 1                 03105*19
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE     03106
         CLI   1(R4),C'*'     SEE IF REFERBACK                          03107*19
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE     03108
         CH    R2,H#4         SEE IF NUMBER PARAMS > 4                  03109**4
         BNH   REFBACKA       NO, CONTINUE                              03110
         LA    R15,P@32       SET ERROR NUMBER                          03111
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        03112**7
         B     DDLOOP         GET OUT                                   03113
REFBACKA DS    0H                                                       03114
         MVC   REFERBCK,BLANKS   BLANK ENTIRE WORK AREA                 03115
         XC    REFUNIT,REFUNIT ZERO REFERBACK UNIT FEEDBACK             03116
         XC    REFVOL,REFVOL  ZERO REFERBACK VOLSER FIELD               03117
         MVC   REFDSN,BLANKS  BLANK ENTIRE REFERBACK DSNAME FIELD       03118
REFLOOP1 LA    R5,1(,R5)      ADD 1 TO COUNT                            03119*19
         CR    R5,R2          SEE IF COUNT EXCEEDED                     03120*19
         BH    REFSEAR        YES, GO SEARCH BACK                       03121
         ICM   R3,1,0(R4)     LOAD LENGTH OF ENTRY                      03122*19
         BZ    ERROR32        ZERO, GO TO ERROR 32                      03123
         CH    R3,H#8         SEE IF LENGTH > 8                         03124
         BH    ERROR32        NO, CONTINUE                              03125
         BCTR  R3,0           MAKE MACHINE LENGTH                       03126
         CH    R5,H#1         SEE IF 1ST ENTRY                          03127*19
         BE    REFLOOP2       YES, IGNORE                               03128
         CH    R5,H#2         SEE IF 2ND ENTRY                          03129*19
         BE    REF#2          YES, GO PROCESS IT                        03130
         CH    R5,H#3         SEE IF 3RD ENTRY                          03131*19
         BE    REF#3          YES, GO PROCESS IT                        03132
*        THIS MUST BE THE 4TH ENTRY                                     03133
REF#4    EX    R3,MOVE10      MOVE DDN TO SEARCH FIELD                  03134
         B     REFLOOP2       BRANCH                                    03135
ERROR32  DS    0H                                                       03136
         LA    R15,P@32       SET ERROR NUMBER                          03137
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        03138**7
         B     DDLOOP         GET OUT                                   03139
REF#3    CH    R2,H#3         SEE IF ONLY 3 ENTRIES                     03140**4
         BE    REF#3B         YES, MUST BE DDNAME                       03141
*        IF NOT DDNAME, MUST BE PROCSTEP NAME                           03142
REF#3A   EX    R3,MOVE11      MOVE ENTRY TO PSTEP ENTRY                 03143
         B     REFLOOP2       BRANCH                                    03144
REF#3B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME                      03145
         B     REFLOOP2       BRANCH                                    03146
REF#2    CH    R2,H#2         SEE IF ONLY 2 ENTRIES                     03147**4
         BE    REF#2B         ONLY 2, MUST BE DDNAME                    03148
*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP              03149
REF#2A   EX    R3,MOVE12      MOVE ENTRY TO JSTEP                       03150
         B     REFLOOP2       BRANCH                                    03151
REF#2B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME                      03152
REFLOOP2 LA    R4,2(R3,R4)    INCREMENT TO NEXT ENTRY                   03153*19
         B     REFLOOP1       LOOP                                      03154
REFSEAR  L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC CARD               03155
*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE            03156
*        USED FOR START OF SEARCH                                       03157
         MVI   REFFLAG,AFF    SET UNIT AFFINITY TO YES                  03158
         CLI   REFJSTEP,C' '  SEE IF JSTEP PART OF SEARCH               03159
         BE    REFSEAR5       NO, SAME STEP WE ARE IN                   03160
         MVI   REFFLAG,X'00'  SET UNIT AFFINITY TO NO                   03161
         CLI   REFPSTEP,C' '  SEE IF PROCSTEP PART OF SEARCH            03162
         BE    REFSEAR1       BLANK, NO PROCSTEP                        03163
         LA    R3,15          SET COMPARE LENGTH FOR JS & PS            03164
         B     REFSEAR2       BRANCH                                    03165
REFSEAR1 LA    R3,7           SET COMPARE LENGTH FOR JS ONLY            03166
REFSEAR2 L     R7,FIRSTENT    LOAD START OF TABLE                       03167
REFSEAR3 LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY                  03168
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY                       03169
         BE    REFSEAR4       YES, GO COMPARE                           03170
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE                     03171
         BE    REFNO          NOT FOUND, PROBABLE JCL ERROR, EXIT       03172
         B     REFSEAR3       LOOP                                      03173
REFSEAR4 EX    R3,COMPARE1    SEE IF RIGHT STEP                         03174
         BE    REFSEAR5       YES, GO SEARCH FOR DDNAME                 03175
         B     REFSEAR3       LOOP FOR NEXT ENTRY                       03176
REFSEAR5 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                03177
         TM    ENTRYTYP,TYPEDD SEE IF DD ENTRY                          03178
         BNO   REFNO          DDNAME NOT FOUND, EXIT                    03179
REFSEAR6 CLC   REFDDN,DDDN    MATCH DDNAME????                          03180
         BNE   REFSEAR5       NO, LOOP FOR NEXT DD                      03181
REFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME                          03182
         MVC   REFUNIT,DTYPE  SAVE UNIT INFO                            03183
         OC    REFUNIT,REFFLAG SET AFFINITY BIT                         03184
         MVC   REFVOL,DVOLSER SAVE VOLSER INFO                          03185
REFNO    BR    R14            RETURN                                    03186
         EJECT                                                          03187
*********************************************************************** 03188
*                                                                     * 03189
*                          T B L F U L L                              * 03190
*                                                                     * 03191
*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE        * 03192
*        MESSAGE AND EXIT WITH A JCL ERROR.                           * 03193
*                                                                     * 03194
*********************************************************************** 03195
TBLFULL  MVC   WTOLIST(LWTO3),WTO3 SET WTO LIST FORM                    03196
         AIF   ('&TSO' NE 'YES').TSO5                                   03197
         WTO   MF=(E,WTOLIST)                                           03198
         AGO   .TSO6                                                    03199
.TSO5    ANOP                                                           03200
         $$WTO WTOLIST        WRITE ERROR MESSAGE                       03201
.TSO6    ANOP                                                           03202
         L     R14,JCTADDR    LOAD JCT ADDRESS                          03203
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 03204
         NI    JCTXMASK,X'FD' TURN OF EXIT6 FLAG                        03205
         DROP  R14            DROP ADDRESSABILITY                       03206
         B     JOBERROR       EXIT WITH A SEVERE ERROR AND NO RETURN    03207
         SPACE                                                          03208
         $MID  903                                                      03209
WTO3     WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X03210
               ROUTCDE=(2),DESC=(4),MF=L                                03211
LWTO3    EQU   *-WTO3                                                   03212
         EJECT                                                          03213
*********************************************************************** 03214
*                                                                     * 03215
*                          S M F W T M                                * 03216
*                                                                     * 03217
*        THIS ROUTINE GETS CONTROL FOR SOME OF THE ERRORS AND WILL    * 03218
*        WRITE AN SMF RECORD TO RECORD THE ERROR FOR FUTURE REPORTING * 03219
*                                                                     * 03220
*********************************************************************** 03221
SMFWTM   DS    0H                                                       03222
         USING TEXT,R6                    R6 POINTS TO THE TEXT OR A    03223
*                                         COPY OF IT                    03224
         STM   R14,R12,SAVEREGS           SAVE THE REGISTERS            03225
         GETMAIN R,LV=L'SMF248            GET SOME STORAGE          WEJ 03226
         LR    R8,R1                      SAVE ADDRESS                  03227
         USING SMFDSECT,R8                ESTABLISH ADDRESSABILITY      03228
         L     R14,JCTADDR                LOAD JCT ADDRESS              03229
         USING JCT,R14                    ESTABLISH ADDRESSABILITY  WEJ 03230
         MVC   SM248RST,JCTRDRON          STORE READER START TIME   WEJ 03231
         MVC   SM248RSD,JCTRDTON          STORE READER START DATE   WEJ 03232
         MVC   SM248JBN,JCTJMRJN          MOVE JOBNAME              WEJ 03233
         MVC   SM248UIF,JCTUSEID          MOVE USERID               WEJ 03234
         MVC   SM248DEV,JCTINDEV          MOVE INPUT DEVICE         WEJ 03235
         MVC   SM248IGP,JCTNONDE          MOVE NODE NAME TO ORIG GP WEJ 03236
         MVC   SM248PS3,JCTPROCN+4        MOVE LAST 2 BYTES OF PROC WEJ 03237
*                                              DDNAME               WEJ 03238
         DROP  R14                                                      03239
         MVC   SM248LEN,H#LSM248          MOVE IN LENGTH OF HEADER  WEJ 03240
         MVI   SM248FLG,X'02'             MOVE IN SMF FLAGS         WEJ 03241
         MVC   SM248RTY,SMFRTYPE          MOVE IN RECORD TYPE       WEJ 03242
         MVC   SM248PNM,BLANKS            BLANK OUT PROCNAME        WEJ 03243
         CLI   SMFRTYPE,X'F7'             IS THIS A QNAME RECORD    WEJ 03244
         BE    GETDDN                     YES, GO HANDLE IT         WEJ 03245
         EX    R3,MOVEPNM                 MOVE PROC NAME                03246
         MVC   SM248STM,SAVEPROC          MOVE PROC STEP NAME       WEJ 03247
         CLI   SMFRTYPE,X'F9'             IS IT INSTREAM?               03248
         BNE   GETSID                     NO GO TO GET SYS ID           03249
         MVC   SM248PS3,C#ASTRSK          MOVE ASTERISKS                03250
         B     GETSID                     GO TO GET SYSID           WEJ 03251
MOVEPNM  MVC   SM248PNM(0),1(R4) MOVE PROC NAME TO SAVE AREA        WEJ 03252*19
GETDDN   DS    0H                                                   WEJ 03253
         MVC   SM248PS3,BLANKS            MOVE BLANKS TO UNUSED FLD WEJ 03254
         MVC   SM247DDN,TDDN              MOVE IN DD NAME           WEJ 03255
         MVC   SM247QNM,SAVEQNM           MOVE IN QNAME IF ANY      WEJ 03256
GETSID   L     R1,16                      -> CVT                        03257
         L     R1,196(,R1)                -> SMCA                       03258
         MVC   SM248SID,16(R1)            MOVE SYSTEM ID            WEJ 03259
         TIME  BIN                        GET THE TIME              WEJ 03260
         STM   R0,R1,SM248TME             GET THE TIME              WEJ 03261
         SMFWTM (8)                       WRITE THE RECORD          WEJ 03262
         LR    R1,R8                                                    03263
         FREEMAIN R,LV=L'SMF248,A=(1)     FREE SOME STORAGE             03264
         LM    R14,R12,SAVEREGS           RESTORE REGISTERS             03265
         BR    R14                        RETURN TO CALLER              03266
         DROP  R8                                                   WEJ 03267
         USING J2XIT06E,R12,R9,R10                                      03268
* MOVE1  MVC   JNAME(0),1(R4) MOVE JOBNAME TO SAVE TABLE                03269*19
MOVE2    MVC   JACCTNO(0),1(R4) MOVE ACCOUNT NO TO SAVE TABLE           03270*19
MOVE3    MVC   JPGMRNM(0),1(R4) MOVE PROGRAMMER NAME TO SAVE TABLE      03271*19
MOVE4    MVC   SAVEPROC(0),1(R4) MOVE JOB STEP NAME TO SAVE AREA        03272*19
MOVE5    MVC   EJSTEP(0),3(R4) MOVE JOB STEP NAME TO TABLE              03273*19
MOVE6    MVC   EPSTEP(0),3(R4) MOVE PROC STEP NAME TO TABLE             03274*19
MOVE7    MVC   EPGMNM(0),3(R4) MOVE STEP PGM NAME TO TABLE              03275*19
MOVE8    MVC   TDDN(0),3(R4)   MOVE DDNAME TO TEMP DD ENTRY             03276*19
MOVE9    MVC   TDSN(0),3(R4)   MOVE DSN TO TEMP DD ENTRY                03277*19
MOVE10   MVC   REFDDN(0),1(R4) MOVE DDNAME TO REFERBACK                 03278*19
MOVE11   MVC   REFPSTEP(0),1(R4) MOVE PROCSTEP NAME TO REFERBACK        03279*19
MOVE12   MVC   REFJSTEP(0),1(R4) MOVE JOBSTEP NAME TO REFERBACK         03280*19
MOVE13   MVC   TVOLSER(0),3(R4) SAVE 1ST VOLSER FROM DD                 03281*19
MOVE14   MVC   TDSN(0),1(R5)  MOVE 1ST PART GDG DSN TO TEMP             03282*19
MOVE15   MVC   0(0,R2),1(R5)  MOVE 2ND PART GDG DSN TO TEMP             03283*19
MOVE16   MVC   JACCT(0),1(R4) MOVE ACCOUNT NO TO WORK AREA              03284*19
MOVE17   MVC   LDSN(0),3(R4)  MOVE VOL=SER DSNAME TO SAVE               03285*19
MOVE18   MVC   CURSTEP(0),3(R4) SAVE JOB  STEP NAME                     03286*19
MOVE19   MVC   CURSTEP(0),3(R4) SAVE PROC STEP NAME                     03287*19
MOVE20   MVC   JDVERB(0),2(R4)   MOVE JDT VERB  TO TABLE                03288*19
MOVE21   MVC   JDLABEL(0),2(R4)  MOVE JDT LABEL TO TABLE                03289*19
MOVE22   MVC   0(0,R4),0(R14)    SHIFT DD TEXT                          03290*19
MOVE23   MVC   3(0,R4),2(R3)     MOVE UNIT NAME FROM TABLE              03291*33
PACK1    PACK  DOUBLE,1(0,R4) GENERIC PACK INSTRUCTION              WEJ 03292*19
TRT1     TRT   1(0,R4),0(R2)  GENERIC TRT INSTRUCTION               WEJ 03293*19
COMPARE1 CLC   REFERBCK(0),EENTRY SEE IF REFERBACK STEPS MATCH          03294
COMPARE2 CLC   1(0,R4),2(R1)  SEE IF UNIT NAME IN TABLE                 03295*19
COMPARE3 CLC   1(0,R4),EPSTEP SEE IF PROC OVERRIDE STEPNAME MATCH       03296*19
COMPARE4 CLC   2(0,R4),C#OUTPUT  IS THIS VERB "OUTPUT"                  03297*19
COMPARE5 CLC   2(0,R4),C#CLASS   IS THIS KEYWORD "CLASS"                03298*19
         EJECT                                                          03299
*********************************************************************** 03300
*                                                                     * 03301
*                          S T A E R T R Y                            * 03302
*                                                                     * 03303
*        RESTORE ORIGINAL REGISTERS AND GET OUT                       * 03304
*                                                                     * 03305
*********************************************************************** 03306
STAERTRY LR    R13,R1         RESTORE GETMAINED AREA ADDRESS            03307
         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS                    03308
         CLI   RECURS,X'FF'   SEE IF RECURSIVE ABEND                    03309
         BE    JOBERR1        YES, GET OUT AS QUICKLY AS POSSIBLE       03310
         MVI   RECURS,X'FF'   SET RECURSIVE ABEND INDICATOR             03311
         B     CLEAR          GET OUT                                   03312
         EJECT                                                          03313
         LTORG                                                          03314
         SPACE 2                                                        03315
*********************************************************************** 03316
*        TABLES USED BY EXIT                                          * 03317
*********************************************************************** 03318
*                                                                       03319
*********************************************************************** 03320
*        FORMAT OF TABLE IS AS FOLLOWS                                * 03321
*        1)  A 1 BYTE PRODUCTION SYSOUT CLASS                         * 03322
*        2)  A 1 BYTE TEST SYSOUT CLASS IF USED IN TEST JOB           * 03323
*********************************************************************** 03324
PSYSOUT  EQU   *              PRODUCTION-ONLY SYSOUT CLASSES            03325
         DC    C'E',C'A'      PRODUCTION IMPACT PRINTER                 03326
         DC    C'N',C'S'      PRODUCTION XEROX SIMPLEX CLASS            03327
         DC    C'M',C'D'      PRODUCTION XEROX DUPLEX  CLASS            03328
         DC    X'FF'          END OF TABLE                              03329
*                                                                       03330
*********************************************************************** 03331
*        FORMAT OF TABLE IS AS FOLLOWS                                * 03332
*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE                             * 03333
*            X'00'  UNIMPORTANT DEVICE TYPE                           * 03334
*            X'02'  TAPE DEVICE                                       * 03335
*            X'04'  PRIVATE MOUNT DISK DEVICE                         * 03336
*            X'08'  VIO                                               * 03337
*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY                         * 03338
*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED* 03339
*********************************************************************** 03340
DEVTABLE EQU   *              DEVICE NAME TABLE                         03341
         DC    X'F4',X'04',CL8'SYSDA'    SYSDA                          03342*37
         DC    X'F4',X'04',CL8'SYSSQ'    SYSDA                          03343*37
         DC    X'F2',X'03',CL8'DISK'     SYSDA                          03344*37
         DC    X'F4',X'03',CL8'WORK'     SYSDA                          03345*37
         DC    X'00',X'03',CL8'SYSP'     SYSDA                          03346*29
         DC    X'00',X'03',CL8'TEST'     SYSDA                          03347*29
         DC    X'00',X'07',CL8'SYSALLDA' SYSDA                          03348*29
         DC    X'00',X'03',CL8'3375'     SYSDA                          03349*29
         DC    X'00',X'03',CL8'3380'     SYSDA                          03350*37
         DC    X'02',X'03',CL8'TAPE'     TAPE                           03351*29
         DC    X'02',X'03',CL8'3400'     TAPE                           03352*29
         DC    X'04',X'03',CL8'PRIV'     PRIV                           03353*29
         DC    X'08',X'03',CL8'VIO'      VIO                            03354*29
         DC    10X'00'         END OF TABLE                             03355
         EJECT                                                          03356
*********************************************************************** 03357
*        CONSTANTS USED BY EXIT                                       * 03358
*********************************************************************** 03359
*                                                                       03360
BLANKS   DC    44C' '         CONSTANT STRING OF BLANKS                 03361
* DEFTIME DC   X'A9',X'01',X'04',CL4'0120',X'FE' DFLT CPU TIME INTEXT   03362**5
* ZEROES DC    8C'0'          CHARACTER CONSTANT 8 ZEROES               03363**5
GDGMASK  DC    C'G0000V00'    GDG SUFFIX MASK                           03364
X#FFFF   DC    F'65535'       FULLWORD CONSTANT X'0000FFFF'             03365
MAXENTS  DC    Y(8192/ENTLEN) MAX ENTRIES IN 8K TABLE                   03366
GETLEN   DC    AL2(GETSIZE)   SIZE OF GETMAIN AREA                      03367
A#MSSG   DC    A(MESSAGES)    ADDRESS OF BEGINING OF MESSAGE TABLE  WEJ 03368
A#PTYPRF DC    A(PRTYTBL-L'PRTYENT) ADDRESS OF ENT BEFORE PRTY TBL  WEJ 03369
* F#1    DC    F'1'           FULLWORD CONSTANT '1'                     03370**6
F#15     DC    F'15'          FULLWORD CONSTANT '15'                    03371
F#45     DC    F'45'          FULLWORD CONSTANT '45'                    03372
* F#120  DC    F'120'         FULLWORD CONSTANT '120'                   03373**6
F#127    DC    F'127'         FULLWORD CONSTANT '127'                   03374
F#8192   DC    F'8192'        CONSTANT FULLWORD 8192                    03375
H#0      DC    H'0'           HALFWORD CONSTANT '0'                     03376
H#1      DC    H'1'           HALFWORD CONSTANT '1'                     03377
H#2      DC    H'2'           HALFWORD CONSTANT '2'                     03378
H#3      DC    H'3'           HALFWORD CONSTANT '3'                     03379
H#4      DC    H'4'           HALFWORD CONSTANT '4'                     03380
H#5      DC    H'5'           HALFWORD CONSTANT '5'                     03381
H#6      DC    H'6'           HALFWORD CONSTANT '6'                     03382
H#7      DC    H'7'           HALFWORD CONSTANT '7'                     03383
H#8      DC    H'8'           HALFWORD CONSTANT '8'                     03384
H#9      DC    H'9'           HALFWORD CONSTANT '9'                 WEJ 03385
H#10     DC    H'10'          HALFWORD CONSTANT '10'                    03386
H#12     DC    H'12'          HALFWORD CONSTANT '12'                    03387
H#13     DC    H'13'          HALFWORD CONSTANT '13'                    03388
H#20     DC    H'20'          HALFWORD CONSTANT '20'                    03389
H#35     DC    H'35'          HALFWORD CONSTANT '35'                    03390
H#42     DC    H'42'          HALFWORD CONSTANT '42'                    03391
H#44     DC    H'44'          HALFWORD CONSTANT '44'                    03392
H#45     DC    H'45'          HALFWORD CONSTANT '45'                    03393
H#50     DC    H'50'          HALFWORD CONSTANT '50'                    03394
H#60     DC    H'60'          HALFWORD CONSTANT '60'                    03395
H#90     DC    H'90'          HALFWORD CONSTANT '90'                    03396
H#120    DC    H'120'         HALFWORD CONSTANT '120'                   03397
H#512    DC    H'512'         HALFWORD CONSTANT '512'                   03398
H#1440   DC    H'1440'        HALFWORD CONSTANT '1440'                  03399
H#5000   DC    H'5000'        HALFWORD CONSTANT '5000'                  03400
H#LSM248 DC    AL2(L'SMF248)  LENGTH OF SMF248 RECORD               WEJ 03401
P#0      DC    P'0'           PACKED CONSTANT '0'                       03402
C#ASTRSK DC    CL2'**'        CHARACTER CONSTANT OF **              WEJ 03403
C#PH     DC    CL2'PH'        CHARACTER CONSTANT 'PH'               WEJ 03404
C#PQ     DC    CL2'PQ'        CHARACTER CONSTANT 'PQ'               WEJ 03405
C#LD     DC    CL3'LD.'       CHARACTER CONSTANT 'LD.'              WEJ 03406*27
C#SHR    DC    CL3'SHR'       CHARACTER CONSTANT 'SHR'                  03407
C#NEW    DC    CL3'NEW'       CHARACTER CONSTANT 'NEW'                  03408
C#MOD    DC    CL3'MOD'       CHARACTER CONSTANT 'MOD'                  03409
C#BLP    DC    CL3'BLP'       CHARACTER CONSTANT 'BLP'                  03410
C#FCC    DC    CL3'FCC'       CHARACTER CONSTANT 'FCC'              WEJ 03411
C#FCH    DC    CL3'FCH'       CHARACTER CONSTANT 'FCH'              WEJ 03412
C#HOLD   DC    CL4'HOLD'      CHARACTER CONSTANT 'HOLD'                 03413
C#KEEP   DC    CL4'KEEP'      CHARACTER CONSTANT 'KEEP'                 03414
C#PASS   DC    CL4'PASS'      CHARACTER CONSTANT 'PASS'                 03415
C#1440   DC    CL4'1440'      CHARACTER CONSTANT '1440'             WEJ 03416
C#SYS1   DC    CL5'SYS1.'     SYS1. PREFIX CONSTANT                 WEJ 03417
C#SYS2   DC    CL5'SYS2.'     SYS2. PREFIX CONSTANT                 WEJ 03418
C#CATLG  DC    CL5'CATLG'     CHARACTER CONSTANT 'CATLG'                03419
C#CLASS  DC    CL5'CLASS'     CHARACTER CONSTANT 'CLASS'                03420
C#FORMS  DC    CL5'FORMS'     CHARACTER CONSTANT 'FORMS'                03421
C#SHARE  DC    CL5'SHARE'     CHARACTER CONSTANT 'SHARE'                03422
C#98000  DC    CL5'98000'     CHARACTER CONSTANT '98000'                03423
C#DELETE DC    CL6'DELETE'    CHARACTER CONSTANT 'DELETE'               03424
C#LOCATE DC    CL6'LOCATE'    CHARACTER CONSTANT 'DELETE'               03425
C#SORTWK DC    CL6'SORTWK'    CHARACTER CONSTANT 'SORTWK'               03426*15
C#OUTPUT DC    CL6'OUTPUT'    CHARACTER CONSTANT 'OUTPUT'               03427
C#SYS106 DC    CL6'SYS106'    CHARACTER CONSTANT 'SYS106'               03428
C#UNCAT  DC    CL7'UNCATLG'   CHARACTER CONSTANT 'UNCATLG'              03429
NULLFILE DC    CL8'NULLFILE'  CHARACTER CONSTANT NULLFILE               03430
C#JOBLIB DC    CL8'JOBLIB'    CHARACTER CONSTANT 'JOBLIB'               03431
C#STEPLI DC    CL8'STEPLIB'   CHARACTER CONSTANT 'STEPLIB'              03432
C#JOBCAT DC    CL8'JOBCAT'    CHARACTER CONSTANT 'JOBCAT'               03433
C#STEPCA DC    CL8'STEPCAT'   CHARACTER CONSTANT 'STEPCAT'              03434
C#$JLOG  DC    CL8'$JES2LOG'  CHARACTER CONSTANT '$JES2LOG'             03435
C#$JCL   DC    CL8'$JCLIMG'   CHARACTER CONSTANT '$JCLIMG'              03436
C#$SYSM  DC    CL8'$SYSMSGS'  CHARACTER CONSTANT '$SYSMSGS'         WEJ 03437
C#JLCICS DC    CL8'JLCICSP+'  CHARACTER CONSTANT 'JLCICSP+'         WEJ 03438*37
C#JLCICT DC    CL8'JLCICST+'  CHARACTER CONSTANT 'JLCICST+'         WEJ 03439*37
C#UCC7   DC    CL8'UCC7   +'  CHARACTER CONSTANT 'UCC7   +'         WEJ 03440*36
C#ADMMSG DC    CL8'ADMINMSG'  CHARACTER CONSTANT 'ADMINMSG'         WEJ 03441
C#NOFORM DS    0CL(L'C#NOFML+L'C#NOFMID)                                03442
C#NOFML  DC    AL1(0)                                                   03443
C#NOFMID DC    CL8' '                                                   03444
C#FCBKYJ DS    0CL(L'C#FCBJDK+L'C#FCBJDN+L'C#FCBJDL+L'C#FCB)            03445
C#FCBJDK DC    AL1(JDTKWDK)                                             03446
C#FCBJDN DC    AL1(2)                                                   03447
C#FCBJDL DC    AL1(L'C#FCB)                                             03448
C#FCB    DC    C'FCB'         CHARACTER CONSTANT 'FCB'                  03449
C#UNITC  DS    0CL(L'C#UNITK+L'C#UNITPM)                            WEJ 03450**8
C#UNITK  DC    AL1(UNITK)                                               03451**8
C#UNITPM DC    AL1(2)                                                   03452**8
C#UNITCC DS    0CL(L'C#UNITCL+L'C#UNITCT+L'C#UNITND)                    03453*10
C#UNITCL DC    AL1(1)                                                   03454**8
C#UNITCT DC    C'0'                                                     03455*29
C#UNITND DC    AL1(ENDK)                                                03456*10
         SPACE                                                          03457
*              PGM NAME THAT ADD JES2 RESOURCES                         03458
*GMCICS  DC    C'DFHSIP'      CICS PGMNAME                              03459
*GM7074  DC    C'IIOEM74'     7074 PGMNAME                              03460
*GM1401  DC    C'IIQE14'      1401 PGMNAME                              03461
*GMXMIT  DC    C'BSCXMIT1'    XMISSION PGMNAME                          03462
         EJECT                                                          03463
HEADER1  DC    C' STMT NO. MESSAGE'                                     03464**8
PREFIX   DS    0CL11          NORMAL MESSAGE PREFIX                     03465
EDMASK   DC    X'402020202020' EDIT MASK FOR MESSAGES                   03466**8
         DC    CL5' '                                                   03467**5
ESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X03468
               TERM=NO,MF=L                                             03469
         EJECT                                                          03470
MSG0CON  DS    0CL78                                                    03471*13
         DC    AL1(L'MSG0-1)                                        WEJ 03472*10
MSG0     DC    C'J2U660I XXXXXXXX XXXXXXXX TAPES= XXXXX       JOB CARD *03473**8
               TIME = XXXXXX SECONDS'                               WEJ 03474**8
MSG1CON  DS    0CL23                                                    03475*13
         DC    AL1(L'MSG1-1)                                        WEJ 03476*10
MSG1     DC    C'J2U661I CLASS SET TO X'                                03477*13
PRTYTBL  DS    0F                                                       03478
PRTYENT  DS    0CL(L'PRTYTIME+L'PRTYPRIO)                               03479
PRTYTIME DC    FL4'9'                                                   03480
PRTYPRIO DC    X'70'                                                    03481
         DC    FL4'19'                                                  03482
         DC    X'60'                                                    03483
         DC    FL4'29'                                                  03484
         DC    X'50'                                                    03485
         DC    FL4'59'                                                  03486
         DC    X'40'                                                    03487
         DC    FL4'119'                                                 03488
         DC    X'30'                                                    03489
         DC    FL4'239'                                                 03490
         DC    X'20'                                                    03491
         DC    FL4'479'                                                 03492
         DC    X'10'                                                    03493
         DC    XL4'FFFFFFFF'    HIGH VALUE IS USED FOR COMPARE LOGICAL  03494
         DC    X'00'                                                    03495
MESSAGES DS    0CL90          MESSAGE TABLE                             03496
M1       DC    AL1(L'M1C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03497
M1C      DC    C'J2U601F LENGTH OF A PARAMETER EXCEEDS 8 CHARACTERS'    03498
M2       DC    AL1(L'M2C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03499
M2C      DC    C'J2U602F JOBNAME, ACCOUNTING INFORMATION, OR PROGRAMMERX03500
                NAME MISSING ON THE JOB CARD'                           03501
M3       DC    AL1(L'M3C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03502
M3C      DC    C'J2U603F LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARACTX03503
               ERS'                                '                    03504
M4       DC    AL1(L'M4C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03505
M4C      DC    C'J2U604E INVALID LENGTH OF THE ACCOUNTING FIELD'        03506
M5       DC    AL1(L'M5C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03507
M5C      DC    C'J2U605F LENGTH OF PROGRAMMER NAME FIELD ON THE JOB CARX03508
               D EXCEEDS MAXIMUM OF 20 CHARACTERS'                      03509*16
M6       DC    AL1(L'M6C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03510
M6C      DC    C'J2U606E UNAUTHORIZED USE OF THE PERFORM KEYWORD ON THEX03511
                JOB CARD'  OPEN MESSAGE, NOT USED                       03512
M7       DC    AL1(L'M7C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03513
M7C      DC    C'J2U607I UNAUTHORIZED USE OF THE ADDRSPC KEYWORD ON THEX03514
                JOB CARD'                                               03515
M8       DC    AL1(L'M8C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03516
M8C      DC    C'J2U608F TIME VALUE ON THE JOB CARD IS NOT NUMERIC'     03517
M9       DC    AL1(L'M9C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03518
M9C      DC    C'J2U609I UNAUTHORIZED USE OF TIME=1440 ON THE JOB CARD' 03519
M10      DC    AL1(L'M10C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03520
M10C     DC    C'J2U610E UNAUTHORIZED USE OF THE REGION KEYWORD ON THE X03521
               JOB CARD'                           '                    03522
M11      DC    AL1(L'M11C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03523
M11C     DC    C'J2U611F LENGTH OF THE STEP NAME ON THE EXECUTE CARD EXX03524
               CEEDS MAXIMUM OF 8 CHARACTERS'                           03525
M12      DC    AL1(L'M12C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03526
M12C     DC    C'J2U612F LENGTH OF THE PROGRAM NAME ON THE EXECUTE CARDX03527
                EXCEEDS MAXIMUM OF 8 CHARACTERS'                        03528
M13      DC    AL1(L'M13C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03529
M13C     DC    C'J2U613F INVALID FORMAT FOR THE REGION PARAMETER ON THEX03530
                EXECUTE CARD'                                           03531
M14      DC    AL1(L'M14C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03532
M14C     DC    C'J2U614F REGION SIZE ON THE EXECUTE CARD IS NOT NUMERICX03533
               '                                                        03534
M15      DC    AL1(L'M15C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03535
M15C     DC    C'J2U615F INVALID FORMAT FOR THE TIME PARAMETER ON THE EX03536
               XECUTE CARD'                        '                    03537
M16      DC    AL1(L'M16C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03538
M16C     DC    C'J2U616I UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTE CX03539
               ARD'                                                     03540
M17      DC    AL1(L'M17C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03541
M17C     DC    C'J2U617E  USE OF THE PERFORM KEYWORD ON THE EXECUTE CARX03542
                NOT ALLOWED, SECTION 3, PAGE 7'                         03543
M18      DC    AL1(L'M18C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03544
M18C     DC    C'J2U618E USE OF THE ADDRSPC KEYWORD ON THE EXECUTE CARDX03545
                NOT ALLOWED, SECTION 3, PAGE 7'                         03546
M19      DC    AL1(L'M19C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03547
M19C     DC    C'J2U619E  USE OF THE DPRTY KEYWORD ON THE EXECUTE CARD X03548
               NOT ALLOWED, SECTION  3, PAGE 7'                         03549
M20      DC    AL1(L'M20C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03550
M20C     DC    C'J2U620F LENGTH OF THE DDNAME ON THE DD CARD EXCEEDS THX03551
               E MAXIMUM OF 8 CHARACTERS'                               03552
M21      DC    AL1(L'M21C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03553
M21C     DC    C'J2U621F INVALID FORMAT FOR THE DSNAME PARAMETER ON THEX03554
                DD CARD'                                                03555
M22      DC    AL1(L'M22C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03556
M22C     DC    C'J2U622F LENGTH OF THE DSNAME ON THE DD CARD EXCEEDS THX03557
               E MAXIMUM OF 44 CHARACTERS'                              03558
M23      DC    AL1(L'M23C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03559
M23C     DC    C'J2U623F INVALID FORMAT FOR THE DISP PARAMETER ON THE DX03560
               D CARD'                                                  03561
M24      DC    AL1(L'M24C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03562
M24C     DC    C'J2U624F INVALID FORMAT FOR THE UNIT PARAMETER ON THE DX03563
               D CARD'                                                  03564
M25      DC    AL1(L'M25C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03565
M25C     DC    C'J2U625F UNIT COUNT WITHIN THE UNIT PARAMETER ON THE DDX03566
                CARD IS NOT NUMERIC'                                    03567
M26      DC    AL1(L'M26C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03568
M26C     DC    C'J2U626F INVALID FORMAT FOR THE VOLUME PARAMETER ON THEX03569
                DD CARD'                                                03570
M27      DC    AL1(L'M27C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03571
M27C     DC    C'J2U627F VOLUME COUNT WITHIN THE VOLUME PARAMETER ON THX03572
               E DD CARD IS NOT NUMERIC'                                03573
M28      DC    AL1(L'M28C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03574
M28C     DC    C'J2U628F LENGTH OF THE VOLSER PARAMETER(S) ON THE DD CAX03575
               RD EXCEEDS MAXIMUM OF 6 CHARACTERS' '                    03576
M29      DC    AL1(L'M29C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03577
M29C     DC    C'J2U629E UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYSTEX03578
               M DATA SET'                                              03579
M30      DC    AL1(L'M30C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03580
M30C     DC    C'J2U630E INTERNAL ERROR - LENGTH OF THE INTERNAL TEXT  X03581
               OF AN EXECUTE CARD EXCEEDS 512 CHARS'                    03582
M31      DC    AL1(L'M31C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03583
M31C     DC    C'J2U631F LENGTH OF THE PROC STEP NAME ON THE EXECUTE CAX03584
               RD EXCEEDS MAXIMUM OF 8 CHARACTERS'                      03585
M32      DC    AL1(L'M32C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03586
M32C     DC    C'J2U632F INVALID FORMAT FOR THE REFERBACK SUBPARAMETER *03587
                ON THE DD CARD'                                         03588
M33      DC    AL1(L'M33C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03589
M33C     DC    C'J2U633E INVALID DISPOSITION ON A JOBLIB, STEPLIB, JOBCX03590
               CAT, OR STEPCAT DD CARD'                                 03591
M34      DC    AL1(L'M34C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03592
M34C     DC    C'J2U634F THE LENGTH OF THE DSNAME ON A VOLUME REFERBACKX03593
                EXCEEDS A MAXIMUM OF 44 CHARACTERS'                     03594
M35      DC    AL1(L'M35C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03595
M35C     DC    C'J2U635E THE REQUIRED ACCOUNTING FIELD ON THE JOB CARD X03596
               WAS NOT SPECIFIED'                                       03597
M36      DC    AL1(L'M36C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03598
M36C     DC    C'J2U636E LENGTH OF PROC-NAME IN EXECUTE CARD EXCEEDS THX03599
               MAXIMUM OF 8 BYTES'                                      03600
M37      DC    AL1(L'M37C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03601
M37C     DC    C'J2U637E LENGTH OF PROC-NAME IN IN-STREAM PROC CARD EXCX03602
               EEDS THE MAXIMUM OF 8 BYTES'                             03603
M38      DC    AL1(L'M38C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03604
M38C     DC    C'J2U638E LENGTH OF FORM-ID IN SYSOUT= GREATER THAN 8 CHX03605
                ARACTERS'                                               03606
M39      DC    AL1(L'M39C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03607
M39C     DC    C'J2U639E LENGTH OF FORMS PARAMETER ON OUTPUT CARD GREATX03608
                ER THAN 8 CHARACTERS'                                   03609
M40      DC    AL1(L'M40C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03610
M40C     DC    C'J2U640E FIRST 2 DIGITS OF ACCOUNT FIELD ARE NOT ALPHABX03611
               ETIC, SECTION 3, PAGE 4'                                 03612
M41      DC    AL1(L'M41C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03613
M41C     DC    C'J2U641E POSITIONS 3 - 7 OF THE FIRST ACCOUNT FIELD AREX03614
                NOT NUMERIC, SECTION 3, PAGE 4'                         03615
M42      DC    AL1(L'M42C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03616
M42C     DC    C'J2U642I JOB WILL ISSUE LOCATE'  OPEN MESSAGE           03617
M43      DC    AL1(L'M43C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03618
M43C     DC    C'J2U643I UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STATEX03619
               MENT'                                                    03620
M44      DC    AL1(L'M44C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03621
M44C     DC    C'J2U644I UNAUTHORIZED USE OF BYPASS LABEL PROCESSING (B*03622
               LP)'                                                     03623
M45      DC    AL1(L'M45C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03624
M45C     DC    C'J2U645I UNAUTHORIZED ATTEMPT TO BYPASS TMS WITH LABEL=X03625
               EXPDT=98000'                         '                   03626
M46      DC    AL1(L'M46C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03627
M46C     DC    C'J2U646I JOB REQUIREMENTS EXCEED THOSE ALLOWED FOR THE X03628
               JOB CLASS REQUESTED'                                     03629
M47      DC    AL1(L'M47C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03630
M47C     DC    C'J2U647I MORE THAN 3 TAPES IN ANY ONE STEP IN A TEST JO*03631
               B'                                                       03632
M48      DC    AL1(L'M48C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03633
M48C     DC    C'J2U648I OPEN MESSAGE'                                  03634
M49      DC    AL1(L'M49C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03635
M49C     DC    C'J2U649F QNAME IS GREATER THAN 8 CHARACTERS'            03636
M50      DC    AL1(L'M50C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03637
M50C     DC    C'J2U650E QNAME=ADMINMSG IN SAME JOB AS EITHER QNAME=PH X03638
               OR QNAME=PQ, JOB NOT RUN'                            WEJ 03639
*          DATA SET J2XIT06CMA AT LEVEL 003 AS OF 09/05/88              03640
P@1      EQU   M1-MESSAGES                                              03641
P@2      EQU   M2-MESSAGES                                              03642
P@3      EQU   M3-MESSAGES                                              03643
P@4      EQU   M4-MESSAGES                                              03644
P@5      EQU   M5-MESSAGES                                              03645
P@6      EQU   M6-MESSAGES                                              03646
P@7      EQU   M7-MESSAGES                                              03647
P@8      EQU   M8-MESSAGES                                              03648
P@9      EQU   M9-MESSAGES                                              03649
P@10     EQU   M10-MESSAGES                                             03650
P@11     EQU   M11-MESSAGES                                             03651
P@12     EQU   M12-MESSAGES                                             03652
P@13     EQU   M13-MESSAGES                                             03653
P@14     EQU   M14-MESSAGES                                             03654
P@15     EQU   M15-MESSAGES                                             03655
P@16     EQU   M16-MESSAGES                                             03656
P@17     EQU   M17-MESSAGES                                             03657
P@18     EQU   M18-MESSAGES                                             03658
P@19     EQU   M19-MESSAGES                                             03659
P@20     EQU   M20-MESSAGES                                             03660
P@21     EQU   M21-MESSAGES                                             03661
P@22     EQU   M22-MESSAGES                                             03662
P@23     EQU   M23-MESSAGES                                             03663
P@24     EQU   M24-MESSAGES                                             03664
P@25     EQU   M25-MESSAGES                                             03665
P@26     EQU   M26-MESSAGES                                             03666
P@27     EQU   M27-MESSAGES                                             03667
P@28     EQU   M28-MESSAGES                                             03668
P@29     EQU   M29-MESSAGES                                             03669
P@30     EQU   M30-MESSAGES                                             03670
P@31     EQU   M31-MESSAGES                                             03671
P@32     EQU   M32-MESSAGES                                             03672
P@33     EQU   M33-MESSAGES                                             03673
P@34     EQU   M34-MESSAGES                                             03674
P@35     EQU   M35-MESSAGES                                             03675
P@36     EQU   M36-MESSAGES                                             03676
P@37     EQU   M37-MESSAGES                                             03677
P@38     EQU   M38-MESSAGES                                             03678
P@39     EQU   M39-MESSAGES                                             03679
P@40     EQU   M40-MESSAGES                                             03680
P@41     EQU   M41-MESSAGES                                             03681
P@42     EQU   M42-MESSAGES                                             03682
P@43     EQU   M43-MESSAGES                                             03683
P@44     EQU   M44-MESSAGES                                             03684
P@45     EQU   M45-MESSAGES                                             03685
P@46     EQU   M46-MESSAGES                                             03686
P@47     EQU   M47-MESSAGES                                             03687
P@48     EQU   M48-MESSAGES                                             03688
P@49     EQU   M49-MESSAGES                                             03689
P@50     EQU   M50-MESSAGES                                             03690
ALPHATBL DS    0CL256                                               WEJ 03691**5
         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ 03692**5
         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ 03693**5
         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ 03694**5
         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ 03695**5
         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ 03696**5
         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ 03697**5
         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ 03698**5
         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ 03699**5
         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ 03700**5
         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ 03701**5
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ 03702**5
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ 03703**5
         DC    X'C0000000000000000000000000000000'    X C0-CF       WEJ 03704**5
         DC    X'D0000000000000000000000000000000'    X D0-DF       WEJ 03705**5
         DC    X'E0E10000000000000000000000000000'    X E0-EF       WEJ 03706**5
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'    X F0-FF       WEJ 03707**5
NUMERTBL DS    0CL256                                               WEJ 03708**5
         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ 03709**5
         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ 03710**5
         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ 03711**5
         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ 03712**5
         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ 03713**5
         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ 03714**5
         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ 03715**5
         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ 03716**5
         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ 03717**5
         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ 03718**5
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ 03719**5
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ 03720**5
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'    X C0-CF       WEJ 03721**5
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'    X D0-DF       WEJ 03722**5
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'    X E0-EF       WEJ 03723**5
         DC    X'00000000000000000000FAFBFCFDFEFF'    X F0-FF       WEJ 03724**5
         EJECT                                                          03725
*********************************************************************** 03726**7
*                                                                     * 03727**7
*                          S T A E X I T                              * 03728**7
*                                                                     * 03729**7
*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       * 03730**7
*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE    * 03731**7
*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          * 03732**7
*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS          * 03733**7
*        WHICH WILL JUST SET THE JOB CLASS TO "A" AND TERMINATE.      * 03734**7
*        NOTE THAT THERE IS A RECURSION CHECK TO PROTECT FROM         * 03735**7
*        ABEND LOOPS.                                                 * 03736**7
*                                                                     * 03737**7
*********************************************************************** 03738**7
         PUSH  USING                                                    03739**7
         DROP  R9,R10,R12                                               03740**7
STAEXIT  LR    R8,R15         SET NEW BASE ADDR                         03741**7
         USING STAEXIT,R8     SET ADDRESSABILITY                        03742**7
         LA    R15,12         SET R15 TO 12                         WEJ 03743**7
         CR    R0,R15         SEE IF CORE AVAILABLE                     03744**7
         BE    STAENO         NO, BRANCH                                03745**7
         SAVE  (14,12)        SAVE REGISTERS                            03746**7
         SPACE 1                                                        03747**7
         L     R4,0(R1)       LOAD PARAMETER ADDRESS                    03748*19
         L     R11,STAEREGS+64-WORKAREA(R4) RESTORE HCT ADDRESS         03749*19
         LA    R3,STAESAVE-WORKAREA(R4) LOAD ADDRESS OF NEW SAVE        03750*19
         ST    R3,8(,R13)     SAVE NEW SAVE ADDRESS IN OLD              03751**7
         ST    R13,4(,R3)     SAVE OLD SAVE ADDRESS IN NEW              03752**7
         LR    R13,R3         SET NEW SAVE ADDRESS                      03753**7
         LR    R3,R1          SAVE SDR2 ADDRESS                         03754**7
         LA    R0,L'WTO4      LOAD LENGTH OF MESSAGE                    03755**7
         LA    R1,WTOLIST-WORKAREA(R4) LOAD ADDRESS OF WTO LIST FORM    03756*19
         MVC   0(LWTO4,R1),WTO4 SET WTO LIST FORM                       03757**7
         AIF   ('&TSO' NE 'YES').TSO7                                   03758**7
         WTO   MF=(E,(R1))                                              03759**7
         AGO   .TSO8                                                    03760**7
.TSO7    ANOP                                                           03761**7
         $$WTO (R1)           WRITE ERROR MESSAGE                       03762**7
.TSO8    ANOP                                                           03763**7
         CLI   RECURS-WORKAREA(R4),X'FF'   SEE IF RECURSIVE ABEND       03764*19
         BE    STAENO         YES, TELL ABEND NOT TO RETRY              03765**7
         AIF   ('&SDUMP' EQ 'YES').SDUMP1                               03766**7
         B     STAE1          BYPASS SDUMP SWITCH                       03767**7
.SDUMP1  ANOP                                                           03768**7
         SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE'                    03769**7
STAE1    DS    0H                                                       03770**7
         L     R13,4(,R13)    RESTORE ORIGINAL REG 13                   03771**7
         LR    R1,R3          RESTORE SDWA ADDRESS                      03772**7
         L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS                      03773*10
         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X03774**7
               RETADDR=(0)                                              03775*10
STAENO   L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS                      03776**7
         LA    R15,4          SET RETURN CODE TO RETRY                  03777**7
         BR    R14            GO RETRY                                  03778**7
         SPACE 2                                                        03779**7
         $MID  904                                                      03780**7
WTO4     WTO   '&MID.JES EXIT6 ABEND',                                 X03781**7
               ROUTCDE=(2),DESC=(4),MF=L                                03782**7
LWTO4    EQU   *-WTO4                                                   03783**7
         LTORG                                                      WEJ 03784**7
         SPACE 1                                                        03785**7
         DROP  R8             DROP LOCAL ADDRESSABILITY                 03786**7
         SPACE 2                                                        03787**7
         POP   USING                                                    03788**7
WORKAREA DSECT                                                          03789
SAVEAREA DS    18F            NEW SAVE AREA                             03790
SAVEREGS DS    18F            ROUTINE REGISTER SAVE AREA                03791
STAEREGS DS    18F            REGISTERS FOR ESTAE RECOVERY              03792
STAESAVE DS    18F            SAVE AREA FOR ESTAE ROUTINE               03793
PUTSAVE  DS    19F            PUT SAVE AREA                             03794
JCTADDR  DS    A              ADDRESS OF JCT                            03795
JDTRTN   DS    A              RETURN ADDRESS FROM JDTGET                03796
TEXTSTAR DS    F              START ADDRESS OF INTERNAL TEXT        WEJ 03797
SAVER13  DS    F              SAVE AREA FOR REG 13 ON PUT RPL           03798
SAVER15  DS    F         TEMP SAVE AREA FOR REG 15 ON TEST              03799
SUBWORK  DS    F              ADDR OF TEXT PROCESSER WORK AREA          03800
SUBTABLE DS    F              ADDRESS OF AREA FOR JCL STMT TABLE        03801
WTOSAVE  DS    4F             SAVE AREA FOR REG 14 - 1 BEFORE WTO'S     03802
DOUBLE   DS    D              DOUBLE WORD FOR PACK & CVB                03803
FIRSTENT DS    F              SAVE AREA FOR FIRST SAVE TABLE ENTRY      03804
LASTENT  DS    F              SAVE AREA FOR LAST SAVE TABLE ENTRY       03805
LASTEXEC DS    F              ADDR OF LAST EXEC TABLE ENTRY             03806
PROCTEXT DS    F              ADDR OF SAVED KEYWORD TEXT FROM PROC STMT 03807
RETCODE  DS    F              SAVE AREA FOR RETURN CODE                 03808
TAPECNT  DS    H              COUNT OF TAPE UNITS USED IN STEP          03809
PRIVCNT  DS    H              COUNT OF PRIV UNITS USED IN STEP          03810
ENTCOUNT DS    H              NUMBER OF ACTIVE ENTRIES IN TABLE         03811
UNITCOUN DS    XL1            COUNT OF UNITS FOR THIS DD                03812
*        THIS MAY ALSO BE 'P' FOR PARALLEL MOUNTING                     03813
EOFIND   DS    C              END OF FILE INDICATORS                    03814
ENDSTEP  EQU   1              LAST STATEMENT OF STEP IND                03815
LASTBLK  EQU   2              BLOCK WITH LAST EXEC STMT PROCESSED       03816
SAVETCNT DS    XL1            SAVE AREA FOR NO. OF TIME SUB-PARMS   WEJ 03817
SAVEPROC DS    CL8            STEPNAME WHICH CALLS PROC                 03818
SAVEFORM DS    0CL9           SYSOUT FORM-ID LENGTH AND FORM-ID         03819
SAVEFMLN DS    AL1            SYSOUT FORM-ID LENGTH (IF ANY)            03820
SAVEFMID DS    CL8            SYSOUT FORM-ID (IF ANY)                   03821
FCBFLAG  DS    CL1            Y - FCB ON DD OR OUTPUT CARD              03822
SAVEQNM  DS    CL8            QNAME FROM DD CARD                        03823
PROCIND  DS    C              PROCESS PROCEDURE TEXT INDICATOR          03824
*        X'01' INDICATES NEED TO PROCESS PROCEDURE OVERRIDE TEXT        03825
JOBIND   DS    C              JOB RELATED INDICATORS                    03826
JOBSTC   EQU   1              JOB IS A STARTED TASK                     03827
JOBTSO   EQU   2              JOB IS A TSO LOGON                        03828
JOBCOMM  EQU   8              JOB IS FOR COMMUNICATIONS                 03829
JOBTECH  EQU   16             JOB IS FOR TECH SUPPORT                   03830
JOBPROD  EQU   32             JOB IS A PRODUCTION JOB                   03831
JOBTEST  EQU   64             JOB IS A TEST JOB                         03832
JOBOPER  EQU   128            JOB IS A OPERATIONS JOB                   03833
JOBIND2  DS    C              JOB RELATED INDICATORS                    03834
HELD     EQU   1              JOB HAD TYPRUN=HOLD                       03835
JOBFAIL  EQU   2              JOB FAILED EXIT TESTING                   03836
JOBLIB   EQU   4              JOB HAD A JOBLIB STMT                     03837
DISPIND  DS    C              DD ENTRY DISPOSITION                      03838
NEW      EQU   1              DISP=NEW                                  03839
OLD      EQU   2              DISP=OLD                                  03840
SHR      EQU   4              DISP=SHR                                  03841
MOD      EQU   8              DISP=MOD                                  03842
CATLG    EQU   16             STEP COMPLETION DISP=CATLG                03843
PASS     EQU   32             STEP COMPLETION DISP=PASS                 03844
KEEP     EQU   64             STEP COMPLETION DISP=KEEP                 03845
DELETE   EQU   128            STEP COMPLETION DISP=DELETE               03846
DISPIND1 DS    C              DD ENTRY DISPOSITION                      03847
UNCATLG  EQU   1              STEP COMPLETION DISP=UNCATLG              03848
UNITIND  DS    C              DD ENTRY UNIT TYPE                        03849
TAPE     EQU   2              UNIT USED WAS A TAPE                      03850
PRIV     EQU   4              UNIT USED WAS A PRIV DISK PACK            03851
VIO      EQU   8              UNIT WAS VIO                              03852
AFF      EQU   16             UNIT WAS DETERMINED BY AFF                03853
UNITGDG  EQU   32             UNIT TYPE(S) FROM GDG PROCESSING          03854
UNITFND  EQU   128            UNIT TYPE HAS BEEN FOUND                  03855
UNITIND2 DS    X                                                        03856*12
UNITPRC  EQU   1              UNIT= HAS BEEN FOUND                  WEJ 03857*12
REFFLAG  DS    XL1            REF FLAG SET FOR UNIT AFFINITY            03858
JACCT    DS    CL14           ACCOUNT NUMBER (1ST ACCT INFO FIELD)      03859
TENTRY   DS    0CL53          TEMPORARY DD TEXT TABLE ENTRY             03860
TDDN     DS    CL8            TEMP DDNAME                               03861
TTYPE    DS    C              TEMP UNIT TYPE                            03862
TDSN     DS    CL44           TEMP DSN (FULL)                           03863
TVOLSER  DS    CL6            TEMP 1ST VOLSER OF DATA SET               03864
LDSN     DS    CL44           DSNAME USED BY LOCATE                     03865
SVC26DSN DS    0CL44          DSNAME USED BY SVC26                      03866
SVC26DSL DS    CL1            LENGTH OF DSN                             03867
SVC26DS  DS    CL43           ACTUAL DSNAME INDEX                       03868
REFERBCK DS    0CL25          REFERBACK WORK AREA                       03869
REFJSTEP DS    CL8            REFERBACK JOBSTEP NAME                    03870
REFPSTEP DS    CL8            REFERBACK PROCSTEP NAME                   03871
REFDDN   DS    CL8            REFERBACK DDNAME                          03872
REFUNIT  DS    C              REFERBACK PREV UNIT TYPE                  03873
REFDSN   DS    CL44           REFERBACK DSN                             03874
REFVOL   DS    CL6            REFERBACK PREF DD 1ST VOLSER              03875
VOLCNT   DS    XL1            VOLUME COUNT FROM UNIT=                   03876
SERCNT   DS    XL1            SERIAL COUNT FROM VOL=SER=                03877
ADDCOUNT DS    XL1            WILL CONTAIN # OF UNITS FOR DD            03878
RECURS   DS    CL1            RECURSIVE ABEND INDICATOR                 03879
CARDNO   DS    F              CARD NUMBER FOR MSG ROUTINE               03880
MSGCOUNT DS    F              MESSAGE COUNT FOR MSG ROUTINE             03881
OUTRPL   DS    F              ADDR OF OUTPUT RPL                        03882
OUTACB   DS    F              ADDR OF JOB MESSAGE DATASET ACB           03883
PARMADDR DS    F              ADDR OF START OF CURRENT TEXT ENTRY       03884
MAXTAPE  DS    H              MAX TAPES PER STEP USED                   03885
MAXPRIV  DS    H              MAX PRIVS PER STEP USED                   03886
MAXTOTAL DS    H              MAX TOTAL DEVICES PER STEP USED           03887
MAXREGN  DS    H              MAX STEP REGION SIZE                      03888
MAXTIME  DS    F              MAXIMUM CPU TIME                          03889
         SPACE                                                          03890
RESOURCE DS    XL2            JES2 RESOURCES                            03891
*              RESOURCE BYTE ZERO                                       03892
TESTING  EQU   128                     JES2 'TESTING' RESOURCE          03893
PROD     EQU   64                      JES2 'PROD'  RESOURCE            03894
TAPES    EQU   32                      JES2 'TAPES' RESOURCE            03895
USERPACK EQU   8                       JES2 'USERPACK' RESOURCE         03896
P1401    EQU   2                       JES2 '1401' RESOURCE             03897
*              RESOURCE - BYTE ONE(1)                                   03898
PCICS    EQU   128                     JES2 'CICS' RESOURCE             03899
P7074    EQU   64                      JES2 '7074' RESOURCE             03900
PXMIT    EQU   32                      JES2 'XMIT'/'COMTEN' RESOURCE    03901
LONGJOB  EQU   8                       JES2 'LONGJOB' RESOURCE          03902
DEDICATE EQU   4                       JES2 'DEDICATE' RESOURCE         03903
*                                                                       03904
CLASSFLD DS    C          JOB CLASS AS DETERMINED FROM TABLE        WEJ 03905
TCMCLASS DS    C          JOB CLASS FOR TCAM OUTPUT, X'00' IF NONE  WEJ 03906
         EJECT                                                          03907
INCLASS  DS    C              CLASS FROM JOB TEXT RECORD                03908
SMFRTYPE DS    C              SMF RECORD LOG TYPE                       03909
CURSTEP  DS    CL8            CURRENT STEP NAME                         03910
DEFDPRTY DS    XL2            MAX DPRTY VALUE ALLOWED AFTER AUTH CHECK  03911
         SPACE 3                                                        03912
CAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA                    03913
         DS    0D                                                       03914
LOCAREA  DS    0CL266         LOCATE CAMLST WORK AREA                   03915
CAMLCNT  DS    H              VOLUMES IN LIST                           03916
CAMLUNIT DS    0CL4           UNIT TYPE FOR 1ST VOLUME                  03917
UCBTYP1  DS    CL1            UCB TYPE BYTE 1                           03918
UCBTYP2  DS    CL1            UCB TYPE BYTE 2                           03919
UCBTYP3  DS    CL1            UCB TYPE BYTE 3                           03920
*        X'80' IN UCBTYP3 INDICATES TAPE DEVICE                         03921
UCBTYP4  DS    CL1            UCB TYPE BYTE 4                           03922
CAMVOL   DS    CL6            1ST VOLSER IN DATA SET                    03923
         DS    CL254          REST OF WORK AREA                         03924
LASTUCB  DS    F              SAVE AREA FOR LAST UCB ADDR PROCESSED     03925
         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX             03926
STEPMSG  DS    0CL78          STEP RESOURCE MESSAGE                     03927*13
         DS    X                                                    WEJ 03928*10
STEPM    DS    0CL77                                                    03929*13
         DS    CL8                                        1- 8      WEJ 03930*10
STEPMSTP DS    CL8                                        9-16      WEJ 03931*10
         DS    CL1                                       17-17      WEJ 03932*10
STEPMPST DS    CL8                                       18-25      WEJ 03933*10
         DS    CL7                                       26-32      WEJ 03934*10
STEPMTAP DS    CL6                                       33-38      WEJ 03935*10
         DS    CL23                                      39-61      WEJ 03936*10
STEPMSEC DS    CL6                                       62-69      WEJ 03937*10
         DS    CL8                                       70-77      WEJ 03938*10
JOBMSG   DS    0CL22          STEP RESOURCE MESSAGE                     03939*13
         DS    X                                                    WEJ 03940*10
JOBM     DS    0CL21                                                    03941*13
         DS    CL21                                                 WEJ 03942**7
JOBMCLAS DS    CL1                                                  WEJ 03943**7
* ERRORMSG DS  0CL100         ERROR MESSAGE                             03944**7
*          DS  CL10           MESSAGE PREFIX                            03945**7
* ERRORM   DC  CL90' '                                                  03946**7
MSGPREF  DS    0CL11          ERROR MESSAGE PREFIX                      03947
         DS    C              EDIT FILL CHARACTER                       03948
BUFFER   DS    0CL100         JES2 MESSAGE AREA                         03949
         DS    CL10           REST OF MESSAGE PREFIX                    03950
MSGTEXT  DS    CL90           TEXT OF ERROR MESSAGE                     03951
MSGRPL   DS    19F            SKELETON RPL FOR OUTPUT MSG DATA SET      03952
WTOLIST  DS    CL120          SET WTO LIST FORM                         03953
PROCTXT  DS    CL512          SAVE AREA FOR PROC CARD TEXT              03954
CTGPL    DS    XL40           CATALOG MANAGEMENT PARAMETER LIST         03955
         SPACE 3                                                        03956
ESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X03957
               TERM=NO,MF=L                                             03958
LESTAEL  EQU   *-ESTAEL                                                 03959
SVC26WRK DS    CL5000         SVC26 WORK AREA                           03960
GETSIZE  EQU   *-WORKAREA     LENGTH OF WORK AREA                       03961
         EJECT                                                          03962
SAVTABLE DSECT                                                          03963
*********************************************************************** 03964
*        THIS TABLE HAS 4 ENTRY TYPES                                 * 03965
*            THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD      * 03966
*            THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD * 03967
*            FOLLOWING THE EXEC ENTRY WILL BE ANY JDT ENTRIES FOR     * 03968
*                THIS STEP.  THE OUTPUT JCL STMT IS A JDT ENTRY.      * 03969
*            FOLLOWING THE JDT ENTRY WILL BE ANY DD ENTRIES FOR THE   * 03970
*                STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES * 03971
*            THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE    * 03972
*                REPEATED FOR ALL STEPS OF THE JOB.                   * 03973
*            THE JDT CARD MAY BE IN ANY ORDER DEPENDING ON JCL.       * 03974
*********************************************************************** 03975
ENTLEN   EQU   40             LENGTH OF EACH TABLE ENTRY                03976
ENTRYTYP DS    C              TABLE ENTRY TYPE                          03977
TYPEND   EQU   0              SIGNIFIES END OF TABLE                    03978
TYPJOB   EQU   1              SIGNIFIES A JOB ENTRY                     03979
TYPEXEC  EQU   2              SIGNIFIES AN EXEC ENTRY                   03980
TYPEDD   EQU   4              SIGNIFIES A DD ENTRY                      03981
TYPEJDT  EQU   8              SIGNIFIES A JDT ENTRY                     03982
*********************************************************************** 03983
*                                                                     * 03984
*                      J O B                                          * 03985
*                                                                     * 03986
*********************************************************************** 03987
JENTRY   DS    0CL39          JOB STATEMENT ENTRY                       03988
JNAME    DS    CL8            JOB NAME                                  03989
JPGMRNM  DS    CL9            PROGRAMMER NAME (1ST 9  BYTES ONLY)   WEJ 03990
* JINDEV DS    CL8    WILL USE JCT INPUT DEVICE                         03991
JACCTNO  DS    CL7            ACCOUNT NUMBER (1ST ACCT INFO FIELD)  WEJ 03992
JACCTLEN DS    C              ACCOUNT NUMBER LENGTH                     03993
JLIBIND  DS    X              JOB HAD REGION                            03994
JREGIONK EQU   4              REGION SPECIFIED IN 'K'                   03995
JREGION  DS    H              STEP REGION SIZE                          03996
         ORG   JENTRY                                                   03997
*********************************************************************** 03998
*                                                                     * 03999
*                     E X E C                                         * 04000
*                                                                     * 04001
*********************************************************************** 04002
EENTRY   DS    0CL39          EXEC STATEMENT ENTRY                      04003
EJSTEP   DS    CL8            JOB STEP NAME                             04004
EPSTEP   DS    CL8            PROC STEP NAME                            04005
EPGMNM   DS    CL8            PGM NAME                                  04006
ELIBIND  DS    C              STEP HAD JOBLIB OR STEPLIB                04007
ESTEPLIB EQU   1              STEPLIB PRESENT                           04008
EJOBLIB  EQU   2              JOBLIB PRESENT                            04009
EREGIONK EQU   4              REGION SPECIFIED IN 'K'                   04010
EREGION  DS    H              STEP REGION SIZE                          04011
ETAPES   DS    H              TAPE UNITS USED IN STEP                   04012
EPRIVS   DS    H              PRIV UNITS USED IN STEP                   04013
ECARDNO  DS    F              CARD NUMBER OF THIS STATEMENT             04014
         ORG   JENTRY                                                   04015
*********************************************************************** 04016
*                                                                     * 04017
*                       D D                                           * 04018
*                                                                     * 04019
*********************************************************************** 04020
DENTRY   DS    0CL39          DD STATEMENT ENTRY                        04021
DDDN     DS    CL8            DDNAME                                    04022
DTYPE    DS    C              TYPE OF UNIT FOR THIS FILE                04023
DTAPE    EQU   2              UNIT = TAPE                               04024
DPRIV    EQU   4              UNIT = PRIV OR PRIV-1                     04025
DDSN     DS    CL24           DSN FOR THIS FILE (1ST 24 CHARS ONLY)     04026
DVOLSER  DS    CL6            FIRST VOL/SER OF DATA SET                 04027
         ORG   JENTRY                                                   04028
*********************************************************************** 04029
*                                                                     * 04030
*                     J D T                                           * 04031
*                                                                     * 04032
*********************************************************************** 04033
JDENTRY  DS    0CL39          JDT STATEMENT ENTRY                       04034
JDVERB   DS    CL8            JDT VERB NAME                             04035
JDLABEL  DS    CL8            JDT VERB LABEL                            04036
JDSTEP   DS    CL8            STEP JDT VERB WAS IN                      04037
JDCLASS  DS    C              CLASS PRESENT ON OUTPUT STATEMENT         04038
         EJECT                                                          04039
*********************************************************************** 04040
*        DESCRIPTION OF THE 16 BYTE WORK AREA PROVIDED BY THE CALLER  * 04041
*            OF EXIT6                                                 * 04042
*********************************************************************** 04043
EXITWORK DSECT                                                          04044
EXWKPTR1 DS    A                                                        04045
         DS    XL12                                                     04046
         EJECT                                                          04047
SMFDSECT DSECT                                                          04048
         COPY  SMF247                                               WEJ 04049
         ORG   SMFDSECT                                             WEJ 04050
         COPY  SMF248                                               WEJ 04051
J2XIT06  CSECT ,                                                    WEJ 04052
        $MODEND                                                         04053
         END                                                            04054
